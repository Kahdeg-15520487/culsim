/**
 * Internationalization (i18n) translations for CULSIM
 * Supported languages: English (en) and Vietnamese (vi)
 */

export type Language = 'en' | 'vi';

export interface Translations {
  // UI Elements
  ui: {
    playerStatus: string;
    cultivationInfo: string;
    meridianInfo: string;
    meridianControls: string;
    timeInfo: string;
    gameOutput: string;
    startGame: string;
    stopGame: string;
    pauseGame: string;
    cultivate: string;
    saveGame: string;
    loadGame: string;
    clearSavedGame: string;
    unlockMeridian: string;
    unlockSelectedMeridian: string;
    allMeridiansOpen: string;
    meridianReq: string;
    gameStarted: string;
    gameStopped: string;
    gameLoaded: string;
    noSavedGame: string;
    savedGameCleared: string;
    confirmClearSavedGame: string;
    notEnoughQi: string;
    meridianOpened: string;
    loading: string;
    gameTitle: string;
    maxRealm: string;
    breakthroughs: string;
    qiGathering: string;
    days: string;
    years: string;
    months: string;
    meridiansOpen: string;
    qiPerDay: string;
    welcomeMessage: string;
    savedGameDetected: string;
    startingNewGame: string;
    autoLoadingGame: string;
    autoSaved: string;
    manualCultivationComplete: string;
    breakthrough: string;
    alreadyMaxRealm: string;
    breakthroughNotAvailable: string;
    debugPanel: string;
    addQi: string;
    debugTitle: string;
    addCultivation: string;
    addMeridians: string;
    addElements: string;
    qiUnit: string;
  };

  // Game Status
  status: {
    player: string;
    realm: string;
    qi: string;
    talent: string;
    lifetime: string;
    reincarnation: string;
    karma: string;
    meridians: string;
    elements: string;
    time: string;
    gameSpeed: string;
    running: string;
    paused: string;
  };

  // Realm Names
  realms: {
    mortal: string;
    qiCondensation: string;
    foundationEstablishment: string;
    coreFormation: string;
    nascentSoul: string;
    divineTransformation: string;
    voidRefinement: string;
    immortalAscension: string;
  };

  // Meridian Names
  meridians: {
    governorVessel: string;
    conceptionVessel: string;
    stomach: string;
    spleen: string;
    heart: string;
    smallIntestine: string;
    bladder: string;
    kidney: string;
    pericardium: string;
    tripleBurner: string;
    gallbladder: string;
    liver: string;
  };

  // Element Names
  elements: {
    metal: string;
    wood: string;
    water: string;
    fire: string;
    earth: string;
  };

  // Event Names
  events: {
    fortuitousEncounter: string;
    tribulationChallenge: string;
    karmicReward: string;
    enemyEncounter: string;
  };

  // Game Messages
  messages: {
    startingJourney: string;
    cultivationSessionEnded: string;
    statusUpdate: string;
    day: string;
    meridianAttemptFailed: string;
    meridianPurified: string;
    meridianOpeningFailed: string;
    meridianBreakthroughAttempt: string;
    meridianBreakthroughSuccess: string;
    meridianBreakthroughStageAdvanced: string;
    meridianBreakthroughFailed: string;
    meridianBreakthroughNotEnoughQi: string;
    meridianBreakthroughNotOpen: string;
    meridianBreakthroughNotReady: string;
    meridianBreakthroughAlreadyPerfect: string;
    meridianBreakthroughInvalidIndex: string;
    breakthroughAttempt: string;
    breakthroughSuccess: string;
    breakthroughFailed: string;
    breakthroughRequirements: string;
    breakthroughQiRequirement: string;
    breakthroughMeridianRequirement: string;
    breakthroughPurifiedMeridianRequirement: string;
    breakthroughHighlyPurifiedMeridianRequirement: string;
    breakthroughPerfectMeridianRequirement: string;
    breakthroughElementRequirement: string;
    breakthroughAllElementsRequirement: string;
    breakthroughDivineElementsRequirement: string;
    breakthroughRequirementsMet: string;
    breakthroughRequirementsNotMet: string;
    reincarnation: string;
    lifetimeSummary: string;
    totalQiGathered: string;
    maxRealmAchieved: string;
    karmicBalance: string;
    cultivationInsights: string;
    artifactsPreserved: string;
    newLifeBegins: string;
    randomEvent: string;
    fortuitousEncounter: string;
    tribulationChallengeSuccess: string;
    tribulationChallengeFailure: string;
    karmicReward: string;
    enemyEncounter: string;
    enemyDefeated: string;
    enemyDefeatedBy: string;
    tribulationStart: string;
    tribulationSuccess: string;
    breakthroughAdvanced: string;
    maxQiIncreased: string;
    elementCultivationEnabled: string;
  };
}

export const translations: Record<Language, Translations> = {
  en: {
    ui: {
      playerStatus: 'Player Status',
      cultivationInfo: 'Cultivation',
      meridianInfo: 'Meridians',
      meridianControls: 'Meridian Controls',
      timeInfo: 'Time',
      gameOutput: 'Game Output',
      startGame: 'Start Game',
      stopGame: 'Stop Game',
      pauseGame: 'Pause',
      cultivate: 'Cultivate',
      saveGame: 'Save Game',
      loadGame: 'Load Game',
      clearSavedGame: 'Clear Saved Game',
      unlockMeridian: 'Unlock Meridian',
      unlockSelectedMeridian: 'Unlock Selected Meridian',
      allMeridiansOpen: 'All meridians open!',
      meridianReq: 'Req: {qi} qi',
      gameStarted: 'Game started!',
      gameStopped: 'Game stopped.',
      gameLoaded: 'Game loaded successfully!',
      noSavedGame: 'No saved game found.',
      savedGameCleared: 'Saved game cleared!',
      confirmClearSavedGame: 'Are you sure you want to clear the saved game? This action cannot be undone.',
      notEnoughQi: 'Not enough qi! Need {qi} qi to attempt opening {meridian}.',
      meridianOpened: 'Successfully opened {meridian} meridian!',
      loading: 'Loading...',
      gameTitle: 'üèÆ CULSIM - Cultivation Simulator üèÆ',
      maxRealm: 'Max Realm',
      breakthroughs: 'Breakthroughs',
      qiGathering: 'Qi Gathering',
      days: 'days',
      years: 'years',
      months: 'months',
      meridiansOpen: 'open',
      qiPerDay: 'qi/day',
      welcomeMessage: 'Welcome to CULSIM!',
      savedGameDetected: 'Saved game detected. Auto-loading...',
      startingNewGame: 'Starting new cultivation journey...',
      autoLoadingGame: 'Auto-loading saved game...',
      autoSaved: 'üîÑ Auto-saved game progress!',
      manualCultivationComplete: '‚ú® Manual cultivation complete! Gained {qi} qi.',
      breakthrough: 'Breakthrough',
      alreadyMaxRealm: 'Already at maximum realm!',
      breakthroughNotAvailable: 'Breakthrough not available for current realm.',
      debugPanel: 'Debug Panel',
      addQi: 'Add 10 Qi',
      debugTitle: 'Debug Panel',
      addCultivation: 'Add Cultivation (10 Qi + 10% Meridians + 10% Elements)',
      addMeridians: 'Add 10% Meridians',
      addElements: 'Add 10% Elements',
      qiUnit: 'qi',
    },
    status: {
      player: 'Player',
      realm: 'Realm',
      qi: 'Qi',
      talent: 'Talent',
      lifetime: 'Lifetime',
      reincarnation: 'Reincarnation',
      karma: 'Karma',
      meridians: 'Meridians',
      elements: 'Elements',
      time: 'Time',
      gameSpeed: 'Game Speed',
      running: 'Running',
      paused: 'Paused',
    },
    realms: {
      mortal: 'Mortal',
      qiCondensation: 'Qi Condensation',
      foundationEstablishment: 'Foundation Establishment',
      coreFormation: 'Core Formation',
      nascentSoul: 'Nascent Soul',
      divineTransformation: 'Divine Transformation',
      voidRefinement: 'Void Refinement',
      immortalAscension: 'Immortal Ascension',
    },
    meridians: {
      governorVessel: 'Governor Vessel',
      conceptionVessel: 'Conception Vessel',
      stomach: 'Stomach',
      spleen: 'Spleen',
      heart: 'Heart',
      smallIntestine: 'Small Intestine',
      bladder: 'Bladder',
      kidney: 'Kidney',
      pericardium: 'Pericardium',
      tripleBurner: 'Triple Burner',
      gallbladder: 'Gallbladder',
      liver: 'Liver',
    },
    elements: {
      metal: 'Metal (Èáë)',
      wood: 'Wood (Êú®)',
      water: 'Water (Ê∞¥)',
      fire: 'Fire (ÁÅ´)',
      earth: 'Earth (Âúü)',
    },
    events: {
      fortuitousEncounter: 'Fortuitous Encounter',
      tribulationChallenge: 'Tribulation Challenge',
      karmicReward: 'Karmic Reward',
      enemyEncounter: 'Enemy Encounter',
    },
    messages: {
      startingJourney: 'üåÖ Starting your cultivation journey...\n',
      cultivationSessionEnded: 'üèÆ Cultivation session ended.',
      statusUpdate: 'üìä Status Update (Day {day})',
      day: 'Day',
      meridianAttemptFailed: '‚ùå Failed to open {meridian} meridian.',
      meridianPurified: '‚ú® {meridian} purified to {purity}%',
      meridianOpeningFailed: '‚ùå Failed to open {meridian} meridian. Success chance: {chance}%. Consumed {qi} qi.',
      meridianBreakthroughAttempt: 'üî• Attempting meridian breakthrough for {meridian}. Cost: {qi} qi. Success chance: {chance}%',
      meridianBreakthroughSuccess: 'üéâ Meridian breakthrough successful! {meridian} purity increased from {oldPurity}% to {newPurity}%. Consumed {qi} qi.',
      meridianBreakthroughStageAdvanced: '‚≠ê {meridian} breakthrough stage advanced from {oldStage} to {newStage}!',
      meridianBreakthroughFailed: 'üíî Meridian breakthrough failed. {meridian} purity decreased by {purityLoss}%. Consumed {qi} qi.',
      meridianBreakthroughNotEnoughQi: '‚ùå Not enough qi for meridian breakthrough. Required: {qi} qi.',
      meridianBreakthroughNotOpen: '‚ùå Cannot breakthrough {meridian} - meridian is not open.',
      meridianBreakthroughNotReady: '‚ùå Cannot breakthrough {meridian} - requires {required}% purity first.',
      meridianBreakthroughAlreadyPerfect: '‚ú® {meridian} is already at perfect purity.',
      meridianBreakthroughInvalidIndex: '‚ùå Invalid meridian index.',
      breakthroughAttempt: '‚ö° Attempting breakthrough to {realm}...',
      breakthroughSuccess: 'üéâ Breakthrough successful! Reached {realm}!',
      breakthroughFailed: 'üíî Breakthrough failed. Cultivation insights gained.',
      breakthroughRequirements: 'üìã Requirements for {realm} breakthrough:',
      breakthroughQiRequirement: '   üíé Qi: {current}/{required} {status}',
      breakthroughMeridianRequirement: '   ü´Ä Open Meridians: {current}/{required} {status}',
      breakthroughPurifiedMeridianRequirement: '   ü´Ä Purified Meridians (80%+): {current}/{required} {status}',
      breakthroughHighlyPurifiedMeridianRequirement: '   ü´Ä Highly Purified Meridians (95%+): {current}/{required} {status}',
      breakthroughPerfectMeridianRequirement: '   ü´Ä Perfect Meridians (100%): {current}/{required} {status}',
      breakthroughElementRequirement: '   üåü Fully Cultivated Elements: {current}/{required} {status}',
      breakthroughAllElementsRequirement: '   üåü All Elements Mastered: {current}/{required} {status}',
      breakthroughDivineElementsRequirement: '   üåü Divine Elements: {current}/{required} {status}',
      breakthroughRequirementsMet: 'üéØ Requirements met! Facing {tribulation} tribulation...',
      breakthroughRequirementsNotMet: '‚ùå Breakthrough requirements not met. Continue cultivating!',
      reincarnation: 'üîÑ Reincarnating...',
      lifetimeSummary: 'üìà Lifetime Summary:',
      totalQiGathered: 'Total Qi Gathered: {qi}',
      maxRealmAchieved: 'Max Realm Achieved: {realm}',
      karmicBalance: 'Karmic Balance: {karma}',
      cultivationInsights: 'Cultivation Insights: {insights}',
      artifactsPreserved: 'Artifacts Preserved: {artifacts}',
      newLifeBegins: 'üå± New life begins...',
      randomEvent: 'üé≤ Random Event: {event}',
      fortuitousEncounter: '‚ú® Met a mysterious master! Talent increased by {talent}.',
      tribulationChallengeSuccess: '‚ö° Survived a minor tribulation! Gained {insights} tribulation insights.',
      tribulationChallengeFailure: 'üí• Failed tribulation challenge! Lost {qi} qi.',
      karmicReward: 'üôè Performed a good deed! Karmic balance increased by {karma}.',
      enemyEncounter: 'üëπ Encountered {enemy} (Realm: {realm}, Qi: {qi}/{maxQi})',
      enemyDefeated: '‚úÖ Defeated {enemy}!',
      enemyDefeatedBy: '‚ùå Defeated by {enemy}! Lost {damage} qi.',
      tribulationStart: '‚ö° Heavenly Tribulation: {type}! Success rate: {rate}%',
      tribulationSuccess: '‚ú® Tribulation overcome! Breakthrough successful!',
      breakthroughAdvanced: 'üöÄ Breakthrough successful! Advanced to {realm} realm!',
      maxQiIncreased: 'üíé Max Qi increased to {maxQi}',
      elementCultivationEnabled: 'üåü New elements available for cultivation: {elements}',
    },
  },
  vi: {
    ui: {
      playerStatus: 'Tr·∫°ng Th√°i Ng∆∞·ªùi Ch∆°i',
      cultivationInfo: 'Tu Luy·ªán',
      meridianInfo: 'Kinh M·∫°ch',
      meridianControls: 'ƒêi·ªÅu Khi·ªÉn Kinh M·∫°ch',
      timeInfo: 'Th·ªùi Gian',
      gameOutput: 'ƒê·∫ßu Ra Tr√≤ Ch∆°i',
      startGame: 'B·∫Øt ƒê·∫ßu Tr√≤ Ch∆°i',
      stopGame: 'D·ª´ng Tr√≤ Ch∆°i',
      pauseGame: 'T·∫°m D·ª´ng',
      cultivate: 'Tu Luy·ªán',
      saveGame: 'L∆∞u Tr√≤ Ch∆°i',
      loadGame: 'T·∫£i Tr√≤ Ch∆°i',
      clearSavedGame: 'X√≥a Tr√≤ Ch∆°i ƒê√£ L∆∞u',
      unlockMeridian: 'M·ªü Kh√≥a Kinh M·∫°ch',
      unlockSelectedMeridian: 'M·ªü Kh√≥a Kinh M·∫°ch ƒê√£ Ch·ªçn',
      allMeridiansOpen: 'T·∫•t c·∫£ kinh m·∫°ch ƒë√£ m·ªü!',
      meridianReq: 'C·∫ßn: {qi} kh√≠',
      gameStarted: 'Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu!',
      gameStopped: 'Tr√≤ ch∆°i ƒë√£ d·ª´ng.',
      gameLoaded: 'ƒê√£ t·∫£i tr√≤ ch∆°i th√†nh c√¥ng!',
      noSavedGame: 'Kh√¥ng t√¨m th·∫•y tr√≤ ch∆°i ƒë√£ l∆∞u.',
      savedGameCleared: 'ƒê√£ x√≥a tr√≤ ch∆°i ƒë√£ l∆∞u!',
      confirmClearSavedGame: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tr√≤ ch∆°i ƒë√£ l∆∞u? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.',
      notEnoughQi: 'Kh√¥ng ƒë·ªß kh√≠! C·∫ßn {qi} kh√≠ ƒë·ªÉ th·ª≠ m·ªü {meridian}.',
      meridianOpened: 'ƒê√£ m·ªü th√†nh c√¥ng kinh m·∫°ch {meridian}!',
      loading: 'ƒêang t·∫£i...',
      gameTitle: 'üèÆ CULSIM - Tr√≤ Ch∆°i Tu Luy·ªán üèÆ',
      maxRealm: 'C·∫£nh Gi·ªõi Cao Nh·∫•t',
      breakthroughs: 'ƒê·ªôt Ph√°',
      qiGathering: 'Thu Th·∫≠p Kh√≠',
      days: 'ng√†y',
      years: 'nƒÉm',
      months: 'th√°ng',
      meridiansOpen: 'ƒë√£ m·ªü',
      qiPerDay: 'kh√≠/ng√†y',
      welcomeMessage: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi CULSIM!',
      savedGameDetected: 'Ph√°t hi·ªán tr√≤ ch∆°i ƒë√£ l∆∞u. ƒêang t·ª± ƒë·ªông t·∫£i...',
      startingNewGame: 'B·∫Øt ƒë·∫ßu h√†nh tr√¨nh tu luy·ªán m·ªõi...',
      autoLoadingGame: 'ƒêang t·ª± ƒë·ªông t·∫£i tr√≤ ch∆°i ƒë√£ l∆∞u...',
      autoSaved: 'üîÑ T·ª± ƒë·ªông l∆∞u ti·∫øn tr√¨nh tr√≤ ch∆°i!',
      manualCultivationComplete: '‚ú® Tu luy·ªán th·ªß c√¥ng ho√†n th√†nh! Nh·∫≠n ƒë∆∞·ª£c {qi} kh√≠.',
      breakthrough: 'ƒê·ªôt Ph√°',
      alreadyMaxRealm: 'ƒê√£ ƒë·∫°t c·∫£nh gi·ªõi cao nh·∫•t!',
      breakthroughNotAvailable: 'ƒê·ªôt ph√° kh√¥ng kh·∫£ d·ª•ng cho c·∫£nh gi·ªõi hi·ªán t·∫°i.',
      debugPanel: 'B·∫£ng G·ª° L·ªói',
      addQi: 'Th√™m 10 Kh√≠',
      debugTitle: 'B·∫£ng G·ª° L·ªói',
      addCultivation: 'Th√™m Tu Luy·ªán (10 Kh√≠ + 10% Kinh M·∫°ch + 10% Ng≈© H√†nh)',
      addMeridians: 'Th√™m 10% Kinh M·∫°ch',
      addElements: 'Th√™m 10% Ng≈© H√†nh',
      qiUnit: 'kh√≠',
    },
    status: {
      player: 'Ng∆∞·ªùi Ch∆°i',
      realm: 'C·∫£nh Gi·ªõi',
      qi: 'Kh√≠',
      talent: 'T√†i NƒÉng',
      lifetime: 'Tu·ªïi Th·ªç',
      reincarnation: 'T√°i Sinh',
      karma: 'Nghi·ªáp L·ª±c',
      meridians: 'Kinh M·∫°ch',
      elements: 'Ng≈© H√†nh',
      time: 'Th·ªùi Gian',
      gameSpeed: 'T·ªëc ƒê·ªô Tr√≤ Ch∆°i',
      running: 'ƒêang Ch·∫°y',
      paused: 'T·∫°m D·ª´ng',
    },
    realms: {
      mortal: 'Ph√†m Nh√¢n',
      qiCondensation: 'Luy·ªán Kh√≠',
      foundationEstablishment: 'Tr√∫c C∆°',
      coreFormation: 'Kim ƒêan',
      nascentSoul: 'Nguy√™n Anh',
      divineTransformation: 'H√≥a Th·∫ßn',
      voidRefinement: 'Luy·ªán Kh√¥ng',
      immortalAscension: 'Phi ThƒÉng',
    },
    meridians: {
      governorVessel: 'ƒê·ªëc M·∫°ch',
      conceptionVessel: 'Nh√¢m M·∫°ch',
      stomach: 'V·ªã Kinh',
      spleen: 'T·ª≥ Kinh',
      heart: 'T√¢m Kinh',
      smallIntestine: 'Ti·ªÉu Tr∆∞·ªùng Kinh',
      bladder: 'B√†ng Quang Kinh',
      kidney: 'Th·∫≠n Kinh',
      pericardium: 'T√¢m Bao Kinh',
      tripleBurner: 'Tam Ti√™u Kinh',
      gallbladder: 'ƒê·ªüm Kinh',
      liver: 'Gan Kinh',
    },
    elements: {
      metal: 'Kim (Èáë)',
      wood: 'M·ªôc (Êú®)',
      water: 'Th·ªßy (Ê∞¥)',
      fire: 'H·ªèa (ÁÅ´)',
      earth: 'Th·ªï (Âúü)',
    },
    events: {
      fortuitousEncounter: 'H√†o Ng·∫´u Chi Ki·∫øp',
      tribulationChallenge: 'Th·ª≠ Th√°ch Ki·∫øp N·∫°n',
      karmicReward: 'Th∆∞·ªüng Nghi·ªáp L·ª±c',
      enemyEncounter: 'G·∫∑p K·∫ª Th√π',
    },
    messages: {
      startingJourney: 'üåÖ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh tu luy·ªán c·ªßa b·∫°n...\n',
      cultivationSessionEnded: 'üèÆ K·ª≥ tu luy·ªán k·∫øt th√∫c.',
      statusUpdate: 'üìä C·∫≠p Nh·∫≠t Tr·∫°ng Th√°i (Ng√†y {day})',
      day: 'Ng√†y',
      meridianAttemptFailed: '‚ùå Th·∫•t b·∫°i khi m·ªü kinh m·∫°ch {meridian}.',
      meridianPurified: '‚ú® Kinh m·∫°ch {meridian} tinh l·ªçc ƒë·∫°t {purity}%',
      meridianOpeningFailed: '‚ùå Th·∫•t b·∫°i khi m·ªü kinh m·∫°ch {meridian}. T·ª∑ l·ªá th√†nh c√¥ng: {chance}%. Ti√™u th·ª• {qi} kh√≠.',
      meridianBreakthroughAttempt: 'üî• Th·ª≠ ƒë·ªôt ph√° kinh m·∫°ch {meridian}. Chi ph√≠: {qi} kh√≠. T·ª∑ l·ªá th√†nh c√¥ng: {chance}%',
      meridianBreakthroughSuccess: 'üéâ ƒê·ªôt ph√° kinh m·∫°ch th√†nh c√¥ng! {meridian} ƒë·ªô tinh khi·∫øt tƒÉng t·ª´ {oldPurity}% l√™n {newPurity}%. Ti√™u th·ª• {qi} kh√≠.',
      meridianBreakthroughStageAdvanced: '‚≠ê {meridian} c·∫•p ƒë·ªô ƒë·ªôt ph√° tƒÉng t·ª´ {oldStage} l√™n {newStage}!',
      meridianBreakthroughFailed: 'üíî ƒê·ªôt ph√° kinh m·∫°ch th·∫•t b·∫°i. {meridian} ƒë·ªô tinh khi·∫øt gi·∫£m {purityLoss}%. Ti√™u th·ª• {qi} kh√≠.',
      meridianBreakthroughNotEnoughQi: '‚ùå Kh√¥ng ƒë·ªß kh√≠ ƒë·ªÉ ƒë·ªôt ph√° kinh m·∫°ch. C·∫ßn: {qi} kh√≠.',
      meridianBreakthroughNotOpen: '‚ùå Kh√¥ng th·ªÉ ƒë·ªôt ph√° {meridian} - kinh m·∫°ch ch∆∞a m·ªü.',
      meridianBreakthroughNotReady: '‚ùå Kh√¥ng th·ªÉ ƒë·ªôt ph√° {meridian} - c·∫ßn ƒë·∫°t {required}% ƒë·ªô tinh khi·∫øt tr∆∞·ªõc.',
      meridianBreakthroughAlreadyPerfect: '‚ú® {meridian} ƒë√£ ƒë·∫°t ƒë·ªô tinh khi·∫øt ho√†n h·∫£o.',
      meridianBreakthroughInvalidIndex: '‚ùå Ch·ªâ s·ªë kinh m·∫°ch kh√¥ng h·ª£p l·ªá.',
      breakthroughAttempt: '‚ö° ƒêang th·ª≠ ƒë·ªôt ph√° l√™n {realm}...',
      breakthroughSuccess: 'üéâ ƒê·ªôt ph√° th√†nh c√¥ng! ƒê·∫°t {realm}!',
      breakthroughFailed: 'üíî ƒê·ªôt ph√° th·∫•t b·∫°i. Nh·∫≠n ƒë∆∞·ª£c hi·ªÉu bi·∫øt tu luy·ªán.',
      breakthroughRequirements: 'üìã Y√™u c·∫ßu ƒë·ªôt ph√° {realm}:',
      breakthroughQiRequirement: '   üíé Kh√≠: {current}/{required} {status}',
      breakthroughMeridianRequirement: '   ü´Ä Kinh M·∫°ch ƒê√£ M·ªü: {current}/{required} {status}',
      breakthroughPurifiedMeridianRequirement: '   ü´Ä Kinh M·∫°ch Tinh L·ªçc (80%+): {current}/{required} {status}',
      breakthroughHighlyPurifiedMeridianRequirement: '   ü´Ä Kinh M·∫°ch Cao C·∫•p Tinh L·ªçc (95%+): {current}/{required} {status}',
      breakthroughPerfectMeridianRequirement: '   ü´Ä Kinh M·∫°ch Ho√†n H·∫£o (100%): {current}/{required} {status}',
      breakthroughElementRequirement: '   üåü Ng≈© H√†nh ƒê√£ Tu Luy·ªán ƒê·∫ßy ƒê·ªß: {current}/{required} {status}',
      breakthroughAllElementsRequirement: '   üåü To√†n B·ªô Ng≈© H√†nh Th√¥ng Thu·ª£: {current}/{required} {status}',
      breakthroughDivineElementsRequirement: '   üåü Ng≈© H√†nh Th·∫ßn Linh: {current}/{required} {status}',
      breakthroughRequirementsMet: 'üéØ ƒê·ªß y√™u c·∫ßu! ƒê·ªëi m·∫∑t v·ªõi ki·∫øp n·∫°n {tribulation}...',
      breakthroughRequirementsNotMet: '‚ùå Ch∆∞a ƒë·ªß y√™u c·∫ßu ƒë·ªôt ph√°. Ti·∫øp t·ª•c tu luy·ªán!',
      reincarnation: 'üîÑ ƒêang t√°i sinh...',
      lifetimeSummary: 'üìà T√≥m T·∫Øt Tu·ªïi Th·ªç:',
      totalQiGathered: 'T·ªïng Kh√≠ Thu Th·∫≠p: {qi}',
      maxRealmAchieved: 'C·∫£nh Gi·ªõi Cao Nh·∫•t: {realm}',
      karmicBalance: 'C√¢n B·∫±ng Nghi·ªáp L·ª±c: {karma}',
      cultivationInsights: 'Hi·ªÉu Bi·∫øt Tu Luy·ªán: {insights}',
      artifactsPreserved: 'Ph√°p B·∫£o Gi·ªØ L·∫°i: {artifacts}',
      newLifeBegins: 'üå± Cu·ªôc ƒë·ªùi m·ªõi b·∫Øt ƒë·∫ßu...',
      randomEvent: 'üé≤ S·ª± Ki·ªán Ng·∫´u Nhi√™n: {event}',
      fortuitousEncounter: '‚ú® G·∫∑p g·ª° m·ªôt b·∫≠c th·∫ßy b√≠ ·∫©n! T√†i nƒÉng tƒÉng {talent} ƒëi·ªÉm.',
      tribulationChallengeSuccess: '‚ö° V∆∞·ª£t qua ki·∫øp n·∫°n nh·ªè! Nh·∫≠n ƒë∆∞·ª£c {insights} hi·ªÉu bi·∫øt v·ªÅ ki·∫øp n·∫°n.',
      tribulationChallengeFailure: 'üí• Th·∫•t b·∫°i trong th·ª≠ th√°ch ki·∫øp n·∫°n! M·∫•t {qi} kh√≠.',
      karmicReward: 'üôè L√†m m·ªôt vi·ªác thi·ªán! C√¢n b·∫±ng nghi·ªáp l·ª±c tƒÉng {karma} ƒëi·ªÉm.',
      enemyEncounter: 'üëπ G·∫∑p {enemy} (C·∫£nh Gi·ªõi: {realm}, Kh√≠: {qi}/{maxQi})',
      enemyDefeated: '‚úÖ ƒê√°nh b·∫°i {enemy}!',
      enemyDefeatedBy: '‚ùå B·ªã {enemy} ƒë√°nh b·∫°i! M·∫•t {damage} kh√≠.',
      tribulationStart: '‚ö° Thi√™n Ki·∫øp: {type}! T·ª∑ l·ªá th√†nh c√¥ng: {rate}%',
      tribulationSuccess: '‚ú® V∆∞·ª£t qua ki·∫øp n·∫°n! ƒê·ªôt ph√° th√†nh c√¥ng!',
      breakthroughAdvanced: 'üöÄ ƒê·ªôt ph√° th√†nh c√¥ng! Ti·∫øn l√™n c·∫£nh gi·ªõi {realm}!',
      maxQiIncreased: 'üíé Kh√≠ t·ªëi ƒëa tƒÉng l√™n {maxQi}',
      elementCultivationEnabled: 'üåü Ng≈© h√†nh m·ªõi c√≥ th·ªÉ tu luy·ªán: {elements}',
    },
  },
};

/**
 * Translation helper function
 */
export class I18n {
  private currentLanguage: Language = 'en';
  private readonly STORAGE_KEY = 'culsim-language';

  constructor(language?: Language) {
    // Load saved language from localStorage, fallback to parameter or default
    const savedLanguage = this.loadSavedLanguage();
    this.currentLanguage = savedLanguage || language || 'en';
  }

  private loadSavedLanguage(): Language | null {
    if (typeof window !== 'undefined' && window.localStorage) {
      const saved = localStorage.getItem(this.STORAGE_KEY);
      if (saved === 'en' || saved === 'vi') {
        return saved as Language;
      }
    }
    return null;
  }

  private saveLanguage(language: Language): void {
    if (typeof window !== 'undefined' && window.localStorage) {
      localStorage.setItem(this.STORAGE_KEY, language);
    }
  }

  setLanguage(language: Language): void {
    this.currentLanguage = language;
    this.saveLanguage(language);
  }

  getLanguage(): Language {
    return this.currentLanguage;
  }

  /**
   * Get translated text with optional parameter substitution
   */
  t(key: string, params?: Record<string, any>): string {
    const keys = key.split('.');
    let value: any = translations[this.currentLanguage];

    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        // Fallback to English if key not found
        value = translations.en;
        for (const fallbackKey of keys) {
          if (value && typeof value === 'object' && fallbackKey in value) {
            value = value[fallbackKey];
          } else {
            return key; // Return key if not found in any language
          }
        }
        break;
      }
    }

    if (typeof value === 'string' && params) {
      return value.replace(/\{(\w+)\}/g, (match, param) => {
        return params[param] !== undefined ? params[param] : match;
      });
    }

    return typeof value === 'string' ? value : key;
  }

  /**
   * Get realm name
   */
  getRealmName(realm: number): string {
    const realmNames = {
      0: 'realms.mortal',
      1: 'realms.qiCondensation',
      2: 'realms.foundationEstablishment',
      3: 'realms.coreFormation',
      4: 'realms.nascentSoul',
      5: 'realms.divineTransformation',
      6: 'realms.voidRefinement',
      7: 'realms.immortalAscension',
    };

    return this.t(realmNames[realm as keyof typeof realmNames] || 'realms.mortal');
  }

  /**
   * Get meridian name
   */
  getMeridianName(index: number): string {
    const meridianNames = {
      0: 'meridians.governorVessel',
      1: 'meridians.conceptionVessel',
      2: 'meridians.stomach',
      3: 'meridians.spleen',
      4: 'meridians.heart',
      5: 'meridians.smallIntestine',
      6: 'meridians.bladder',
      7: 'meridians.kidney',
      8: 'meridians.pericardium',
      9: 'meridians.tripleBurner',
      10: 'meridians.gallbladder',
      11: 'meridians.liver',
    };

    return this.t(meridianNames[index as keyof typeof meridianNames] || 'meridians.governorVessel');
  }

  /**
   * Get element name
   */
  getElementName(element: number): string {
    const elementNames = {
      0: 'elements.metal',
      1: 'elements.wood',
      2: 'elements.water',
      3: 'elements.fire',
      4: 'elements.earth',
    };

    return this.t(elementNames[element as keyof typeof elementNames] || 'elements.metal');
  }
}

// Global i18n instance
export const i18n = new I18n();