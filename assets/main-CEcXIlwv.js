(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function t(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(n){if(n.ep)return;n.ep=!0;const s=t(n);fetch(n.href,s)}})();var c=(o=>(o[o.Mortal=0]="Mortal",o[o.QiCondensation=1]="QiCondensation",o[o.FoundationEstablishment=2]="FoundationEstablishment",o[o.CoreFormation=3]="CoreFormation",o[o.NascentSoul=4]="NascentSoul",o[o.DivineTransformation=5]="DivineTransformation",o[o.VoidRefinement=6]="VoidRefinement",o[o.ImmortalAscension=7]="ImmortalAscension",o))(c||{}),l=(o=>(o.Metal="metal",o.Wood="wood",o.Water="water",o.Fire="fire",o.Earth="earth",o))(l||{}),v=(o=>(o[o.Common=0]="Common",o[o.Uncommon=1]="Uncommon",o[o.Rare=2]="Rare",o[o.Epic=3]="Epic",o[o.Legendary=4]="Legendary",o[o.Mythical=5]="Mythical",o))(v||{}),u=(o=>(o.Armor="armor",o.Weapon="weapon",o.Pill="pill",o.Drug="drug",o.Poison="poison",o.Herb="herb",o.BeastPart="beast_part",o.SpiritStone="spirit_stone",o.Charm="charm",o.Manual="manual",o))(u||{}),Ie=(o=>(o.Melee="melee",o.Ranged="ranged",o))(Ie||{}),V=(o=>(o.Physical="physical",o.Spiritual="spiritual",o.Elemental="elemental",o))(V||{}),S=(o=>(o.Weapon="weapon",o.Armor="armor",o.Amulet="amulet",o.Charm="charm",o.Manual="manual",o.SpiritStone="spirit stone",o))(S||{});const de={0:1,1:1.5,2:2.5,3:4,4:6,5:10},Qe={0:1,1:2,2:5,3:10,4:20,5:40,6:80,7:150},qe={armor:{defense:10,durability:100,value:50},weapon:{attack:15,durability:80,value:75},pill:{effectStrength:25,duration:7,value:30},drug:{effectStrength:20,duration:3,value:40},poison:{effectStrength:30,duration:5,value:60},spirit_stone:{qiStorage:10,durability:10,value:20},herb:{qiContent:5,value:15},beast_part:{effectStrength:35,value:45},charm:{effectStrength:10,duration:30,value:100},manual:{knowledge:25,value:200}},xt={0:60,1:25,2:10,3:4,4:.9,5:.1};var _=(o=>(o.Village="village",o.CultivationSite="cultivation_site",o.DangerousArea="dangerous_area",o.SecretRealm="secret_realm",o.AncientRuin="ancient_ruin",o))(_||{});class Nt{constructor(e){this.currentLanguage="en",this.STORAGE_KEY="culsim-language",this.translations={},this.loadedLanguages=new Set,this.translationReady=new Promise(a=>{this.translationReadyResolver=a});const t=this.loadSavedLanguage();this.currentLanguage=t||e||"en",this.loadTranslations(this.currentLanguage).then(()=>{this.translationReadyResolver&&this.translationReadyResolver(),typeof window<"u"&&setTimeout(()=>this.applyTranslations(),0)})}loadSavedLanguage(){if(typeof window<"u"&&window.localStorage){const e=localStorage.getItem(this.STORAGE_KEY);if(e==="en"||e==="vi")return e}return null}saveLanguage(e){typeof window<"u"&&window.localStorage&&localStorage.setItem(this.STORAGE_KEY,e)}async loadTranslations(e){if(!this.loadedLanguages.has(e))try{let t;if(typeof global<"u"&&typeof process<"u"&&process.versions&&process.versions.node){const a=require("fs"),s=require("path").join(__dirname,"..","..","public","locales",`${e}.json`),r=a.readFileSync(s,"utf-8");t=JSON.parse(r)}else{const a=await fetch(`/locales/${e}.json`);if(!a.ok)throw new Error(`Failed to load translations for ${e}`);t=await a.json()}this.translations[e]=t,this.loadedLanguages.add(e)}catch(t){if(console.error(`Error loading translations for ${e}:`,t),e!=="en"&&this.loadedLanguages.has("en")){console.warn(`Falling back to English translations for ${e}`);return}throw t}}async setLanguage(e){await this.loadTranslations(e),this.currentLanguage=e,this.saveLanguage(e),this.applyTranslations(),typeof window<"u"&&window.generateEquipmentSlots&&window.generateEquipmentSlots(),this.onLanguageChange&&this.onLanguageChange()}getLanguage(){return this.currentLanguage}applyTranslations(){if(typeof document>"u")return;document.querySelectorAll("[data-i18n]").forEach(t=>{const a=t.getAttribute("data-i18n");if(a){const n=this.t(a);t.tagName==="INPUT"&&t.hasAttribute("placeholder")?t.placeholder=n:(t.tagName,t.textContent=n)}})}t(e,t){const a=e.split(".");let n=this.translations[this.currentLanguage];if(!n&&this.loadedLanguages.has("en")&&(n=this.translations.en),!n)return e;for(const s of a)if(n&&typeof n=="object"&&s in n)n=n[s];else{if(this.currentLanguage!=="en"&&this.loadedLanguages.has("en")){n=this.translations.en;for(const r of a)if(n&&typeof n=="object"&&r in n)n=n[r];else return e;break}return e}return typeof n=="string"&&t?n.replace(/\{(\w+)\}/g,(s,r)=>t[r]!==void 0?t[r]:s):typeof n=="string"?n:e}getRealmName(e){const t={0:"realms.mortal",1:"realms.qiCondensation",2:"realms.foundationEstablishment",3:"realms.coreFormation",4:"realms.nascentSoul",5:"realms.divineTransformation",6:"realms.voidRefinement",7:"realms.immortalAscension"};return this.t(t[e]||"realms.mortal")}getMeridianName(e){const t={0:"meridians.governorVessel",1:"meridians.conceptionVessel",2:"meridians.stomach",3:"meridians.spleen",4:"meridians.heart",5:"meridians.smallIntestine",6:"meridians.bladder",7:"meridians.kidney",8:"meridians.pericardium",9:"meridians.tripleBurner",10:"meridians.gallbladder",11:"meridians.liver"};return this.t(t[e]||"meridians.governorVessel")}getElementName(e){const t={0:"elements.metal",1:"elements.wood",2:"elements.water",3:"elements.fire",4:"elements.earth"};return this.t(t[e]||"elements.metal")}getQualityName(e){const t={[v.Common]:"itemQualities.common",[v.Uncommon]:"itemQualities.uncommon",[v.Rare]:"itemQualities.rare",[v.Epic]:"itemQualities.epic",[v.Legendary]:"itemQualities.legendary",[v.Mythical]:"itemQualities.mythical"};return this.t(t[e]||"itemQualities.common")}getCategoryName(e){const t={[u.Armor]:"itemCategories.armor",[u.Weapon]:"itemCategories.weapon",[u.Charm]:"itemCategories.charm",[u.Manual]:"itemCategories.manual",[u.Pill]:"itemCategories.pill",[u.Drug]:"itemCategories.drug",[u.Herb]:"itemCategories.herb",[u.SpiritStone]:"itemCategories.spirit_stone",[u.Poison]:"itemCategories.poison",[u.BeastPart]:"itemCategories.beast_part"};return this.t(t[e]||"categories.misc")}getEffectTypeName(e){const t={qi_absorption:"effects.qiAbsorption",cultivation_speed:"effects.cultivationSpeed",elemental_affinity:"effects.elementalAffinity",meridian_efficiency:"effects.meridianEfficiency",combat_power:"effects.combatPower",defense:"effects.defense",health_regeneration:"effects.healthRegeneration",health_recovery:"effects.healthRecovery",mana_regeneration:"effects.manaRegeneration"};return this.t(t[e]||e.replace(/_/g," ").replace(/\b\w/g,a=>a.toUpperCase()))}getCombatTypeName(e){switch(e){case"melee":return this.t("combatTypes.melee");case"ranged":return this.t("combatTypes.ranged");default:return e}}setLanguageChangeCallback(e){this.onLanguageChange=e}async waitForTranslations(){return this.translationReady}}const i=new Nt;class wt{constructor(e=Math.floor(Math.random()*1e6)){this.seed=e}random(){return this.seed=16807*this.seed%2147483647,(this.seed-1)/2147483646}int(e,t){return Math.floor(this.random()*(t-e+1))+e}float(e,t){return this.random()*(t-e)+e}choice(e){return e[this.int(0,e.length-1)]}weightedChoice(e,t){if(e.length!==t.length)throw new Error("Items and weights arrays must have the same length");const a=t.reduce((s,r)=>s+r,0);let n=this.random()*a;for(let s=0;s<e.length;s++)if(n-=t[s],n<=0)return e[s];return e[e.length-1]}shuffle(e){for(let t=e.length-1;t>0;t--){const a=this.int(0,t);[e[t],e[a]]=[e[a],e[t]]}return e}chance(e){return this.random()<e}getSeed(){return this.seed}setSeed(e){this.seed=e}}const he={MAX_QI:100,TALENT:50,ELEMENT_AFFINITY_BASE:{min:10,max:20}},Ft={INTERVAL_DAYS:100},q={[c.Mortal]:{qi:100,meridians:1,elements:1},[c.QiCondensation]:{qi:1e4,meridians:6,elements:2},[c.FoundationEstablishment]:{qi:1e5,meridians:12,elements:3},[c.CoreFormation]:{qi:1e6,meridians:12,elements:4},[c.NascentSoul]:{qi:1e7,meridians:12,elements:5},[c.DivineTransformation]:{qi:1e8,meridians:12,elements:5},[c.VoidRefinement]:{qi:1e9,meridians:12,elements:5}},x={OPENING_BASE_COST:50,OPENING_COST_INCREMENT:25,OPENING_ATTEMPT_COST_FRACTION:.25,INITIAL_PURITY:10,MAX_PURITY:100},R={NATURAL_CAP:50,PURIFIED:80,HIGHLY_PURIFIED:95,PERFECT:100},X={[c.Mortal]:.8,[c.QiCondensation]:.7,[c.FoundationEstablishment]:.6,[c.CoreFormation]:.5,[c.NascentSoul]:.4,[c.DivineTransformation]:.3,[c.VoidRefinement]:.2},ge={MAX_QI_MULTIPLIER:100,QI_RETENTION_PERCENTAGE:.1,MIN_QI_RETAINED:10},ie={BASE_MERIDIAN_PURIFICATION:.1,MAX_ELEMENT_AFFINITY:100},He={[c.Mortal]:{BASIC_ABSORPTION:.1,ENHANCED_ABSORPTION:.05},[c.QiCondensation]:{BASE_ABSORPTION:1},[c.FoundationEstablishment]:{BASE_ABSORPTION:5},[c.CoreFormation]:{BASE_ABSORPTION:10,REALM_MULTIPLIER:1.5},[c.NascentSoul]:{BASE_ABSORPTION:50,REALM_MULTIPLIER:2},[c.DivineTransformation]:{BASE_ABSORPTION:100,REALM_MULTIPLIER:2.5},[c.VoidRefinement]:{BASE_ABSORPTION:250,REALM_MULTIPLIER:3},[c.ImmortalAscension]:{BASE_ABSORPTION:500,REALM_MULTIPLIER:4}},Dt={[c.Mortal]:500,[c.QiCondensation]:150,[c.FoundationEstablishment]:120,[c.CoreFormation]:300,[c.NascentSoul]:250,[c.DivineTransformation]:200,[c.VoidRefinement]:150,[c.ImmortalAscension]:100},U={QI_COST_MULTIPLIER:100,BASE_SUCCESS_CHANCE:.6,TALENT_BONUS_DIVISOR:200,ATTEMPT_COST_FRACTION:.5,HEART_DEMON_CHANCE:.2,HEART_DEMON_QI_LOSS:.1,FAILURE_DAMAGE_CHANCE:.3,FAILURE_DAMAGE_PERCENTAGE:.1};class f{static calculateScaledStat(e,t,a){const n=de[t],s=Qe[a];return Math.floor(e*n*s)}static generateItemEffects(e,t,a,n){const s=[],r=qe[e];switch(e){case u.Armor:s.push({type:"defense",value:this.calculateScaledStat(r.defense,t,a),isPercentage:!1}),t>=v.Rare&&s.push({type:"elemental_resistance",value:t*5,element:n,isPercentage:!0});break;case u.Weapon:s.push({type:"combat_power",value:this.calculateScaledStat(r.attack,t,a),element:n,isPercentage:!1}),t>=v.Epic&&s.push({type:"critical_chance",value:(t-2)*2,isPercentage:!0});break;case u.Pill:s.push({type:"qi_absorption",value:this.calculateScaledStat(r.effectStrength,t,a),duration:r.duration*de[t],isPercentage:!0}),t>=v.Uncommon&&s.push({type:"cultivation_speed",value:t*10,duration:r.duration,isPercentage:!0});break;case u.SpiritStone:s.push({type:"qi_absorption",value:this.calculateScaledStat(r.qiStorage,t,a),isPercentage:!1});break;case u.Herb:s.push({type:"qi_absorption",value:this.calculateScaledStat(r.qiContent,t,a),isPercentage:!1}),n&&s.push({type:"element_boost",value:(t+1)*2,element:n,isPercentage:!0});break;case u.Charm:s.push({type:"luck",value:this.calculateScaledStat(r.effectStrength,t,a),duration:r.duration,isPercentage:!0}),t>=v.Rare&&s.push({type:"comprehension",value:t*3,duration:r.duration*2,isPercentage:!0});break}return s}static generateItemNameKeys(e,t,a,n){const s={[v.Common]:"itemNames.qualityCommon",[v.Uncommon]:"itemNames.qualityRefined",[v.Rare]:"itemNames.qualitySuperior",[v.Epic]:"itemNames.qualityExquisite",[v.Legendary]:"itemNames.qualityLegendary",[v.Mythical]:"itemNames.qualityMythical"},r={[c.Mortal]:"itemNames.realmMortal",[c.QiCondensation]:"itemNames.realmQiCondensation",[c.FoundationEstablishment]:"itemNames.realmFoundationEstablishment",[c.CoreFormation]:"itemNames.realmCoreFormation",[c.NascentSoul]:"itemNames.realmNascentSoul",[c.DivineTransformation]:"itemNames.realmDivineTransformation",[c.VoidRefinement]:"itemNames.realmVoidRefinement",[c.ImmortalAscension]:"itemNames.realmImmortalAscension"},m={[l.Metal]:"itemNames.elementMetal",[l.Wood]:"itemNames.elementWood",[l.Water]:"itemNames.elementWater",[l.Fire]:"itemNames.elementFire",[l.Earth]:"itemNames.elementEarth"},h={[u.Armor]:"itemNames.baseArmor",[u.Weapon]:"itemNames.baseWeapon",[u.Pill]:"itemNames.basePill",[u.Drug]:"itemNames.baseDrug",[u.Poison]:"itemNames.basePoison",[u.SpiritStone]:"itemNames.baseSpiritStone",[u.Herb]:"itemNames.baseHerb",[u.BeastPart]:"itemNames.baseBeastPart",[u.Charm]:"itemNames.baseCharm",[u.Manual]:"itemNames.baseManual"};return{nameQuality:s[t],nameBase:h[e],nameElement:n?m[n]:void 0,nameRealm:r[a]}}static getTranslatedItemName(e){const a={[u.Armor]:"armor",[u.Weapon]:"weapon",[u.Pill]:"pill",[u.Drug]:"drug",[u.Poison]:"poison",[u.SpiritStone]:"spiritStone",[u.Herb]:"herb",[u.BeastPart]:"beastPart",[u.Charm]:"charm",[u.Manual]:"manual"}[e.category],n=i.t(`itemNameTemplates.${a}`),s=i.t(e.nameQuality),r=i.t(e.nameBase),m=e.nameElement?i.t(e.nameElement):"",h=e.nameRealm?i.t(e.nameRealm):"";return n.replace("{quality}",s).replace("{element}",m).replace("{base}",r).replace("{realm}",h).trim()}static calculateItemValue(e,t,a){var s;const n=((s=qe[e])==null?void 0:s.value)||10;return Math.floor(n*de[t]*(Qe[a]*.5))}static determineItemQuality(e,t){const a=Math.min(e*2,20);for(let n=v.Mythical;n>=v.Common;n--){const s=xt[n],r=Math.min(s+a,100);if(t.chance(r))return n}return v.Common}static createItem(e,t,a,n,s){const r=this.generateItemEffects(e,t,a,n),m=this.generateItemNameKeys(e,t,a,n),h=this.calculateItemValue(e,t,a),g=qe[e],p="durability"in g?Math.floor(g.durability*de[t]):void 0;return{id:s||`item-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,...m,category:e,quality:t,realm:a,element:n,effects:r,descriptionKey:this.generateItemDescriptionKey(e,t,a,n),value:h,durability:p,maxDurability:p,stackable:e===u.Pill||e===u.SpiritStone||e===u.Herb,maxStack:e===u.Pill?10:e===u.SpiritStone?50:e===u.Herb?20:1,quantity:1}}static generateItemDescriptionKey(e,t,a,n){return"itemDescriptions.generic"}static getTranslatedItemDescription(e){const t={[v.Common]:"itemQualities.common",[v.Uncommon]:"itemQualities.uncommon",[v.Rare]:"itemQualities.rare",[v.Epic]:"itemQualities.epic",[v.Legendary]:"itemQualities.legendary",[v.Mythical]:"itemQualities.mythical"},a={0:"realms.mortal",1:"realms.qiCondensation",2:"realms.foundationEstablishment",3:"realms.coreFormation",4:"realms.nascentSoul",5:"realms.divineTransformation",6:"realms.voidRefinement",7:"realms.immortalAscension"},n={[u.Armor]:"itemCategories.armor",[u.Weapon]:"itemCategories.weapon",[u.Charm]:"itemCategories.charm",[u.Manual]:"itemCategories.manual",[u.Pill]:"itemCategories.pill",[u.Drug]:"itemCategories.drug",[u.Herb]:"itemCategories.herb",[u.SpiritStone]:"itemCategories.spirit_stone",[u.Poison]:"itemCategories.poison",[u.BeastPart]:"itemCategories.beast_part"},s={quality:i.t(t[e.quality]).toLowerCase(),category:i.t(n[e.category]).toLowerCase(),realm:i.t(a[e.realm]).toLowerCase()};if(e.element!==void 0){const r=Object.values(l).indexOf(e.element);return s.element=i.getElementName(r),i.t("itemDescriptions.elemental",s)}else return i.t("itemDescriptions.basic",s)}}class $e{constructor(e){this.gameState=e}findItemById(e){var n,s;if((n=this.gameState.player.inventory)!=null&&n.items){const r=this.gameState.player.inventory.items.find(m=>m.id===e);if(r)return r}if((s=this.gameState.player.inventory)!=null&&s.equippedItems){for(const r of Object.values(this.gameState.player.inventory.equippedItems))if(r&&r.id===e)return r}const t=this.gameState.player.items.find(r=>r.id===e);if(t)return t;const a=this.gameState.soul.items.find(r=>r.id===e);return a||null}calculateQiAbsorptionBonus(){var n;let e=0,t=0;(n=this.gameState.player.inventory)!=null&&n.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(s=>{s&&s.effects.forEach(r=>{r.type==="qi_absorption"&&(r.isPercentage?e+=r.value:s.category==="spirit_stone"?t===0&&(t+=r.value):t+=r.value)})}),this.gameState.soul.items.forEach(s=>{s.effects.forEach(r=>{r.type==="qi_absorption"&&(r.isPercentage?e+=r.value:s.category==="spirit_stone"?t===0&&(t+=r.value):t+=r.value)})});const a=this.calculateLocationQiAbsorptionBonus();return e+=a.percentage,t+=a.flat,{percentage:e,flat:t}}calculateCultivationSpeedBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="cultivation_speed"&&n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="cultivation_speed"&&n.isPercentage&&(e+=n.value)})}),e+=this.calculateLocationCultivationSpeedBonus(),e}calculateCombatPowerBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="combat_power"&&!n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="combat_power"&&!n.isPercentage&&(e+=n.value)})}),e+=this.calculateLocationCombatPowerBonus(),e}calculateDefenseBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="defense"&&!n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="defense"&&!n.isPercentage&&(e+=n.value)})}),e+=this.calculateLocationDefenseBonus(),e}calculateCriticalChanceBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="critical_chance"&&n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="critical_chance"&&n.isPercentage&&(e+=n.value)})}),e+=this.calculateLocationCriticalChanceBonus(),e}calculateElementalBoost(e){var a;let t=0;return(a=this.gameState.player.inventory)!=null&&a.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(n=>{n&&n.effects.forEach(s=>{s.type==="element_boost"&&s.element===e&&s.isPercentage&&(t+=s.value)})}),this.gameState.soul.items.forEach(n=>{n.effects.forEach(s=>{s.type==="element_boost"&&s.element===e&&s.isPercentage&&(t+=s.value)})}),t+=this.calculateLocationElementBoost(e),t}calculateElementalResistance(e){var a;let t=0;return(a=this.gameState.player.inventory)!=null&&a.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(n=>{n&&n.effects.forEach(s=>{s.type==="elemental_resistance"&&s.element===e&&s.isPercentage&&(t+=s.value)})}),this.gameState.soul.items.forEach(n=>{n.effects.forEach(s=>{s.type==="elemental_resistance"&&s.element===e&&s.isPercentage&&(t+=s.value)})}),t}calculateLuckBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="luck"&&!n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="luck"&&!n.isPercentage&&(e+=n.value)})}),e+=this.calculateLocationLuckBonus(),e}calculateComprehensionBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="comprehension"&&n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="comprehension"&&n.isPercentage&&(e+=n.value)})}),e+=this.calculateLocationComprehensionBonus(),e}getActiveTemporaryEffects(){var t;const e=[];return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.duration&&n.duration>0&&e.push(n)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.duration&&n.duration>0&&e.push(n)})}),e}processTemporaryEffects(){var e;(e=this.gameState.player.inventory)!=null&&e.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(t=>{t&&(t.effects.forEach(a=>{a.duration&&a.duration>0&&(a.duration--,a.duration<=0&&console.log(i.t("messages.effectExpired",{itemName:f.getTranslatedItemName(t),effectType:a.type})))}),t.effects=t.effects.filter(a=>!a.duration||a.duration>0))}),this.gameState.soul.items.forEach(t=>{t.effects.forEach(a=>{a.duration&&a.duration>0&&(a.duration--,a.duration<=0&&console.log(i.t("messages.effectExpired",{itemName:f.getTranslatedItemName(t),effectType:a.type})))}),t.effects=t.effects.filter(a=>!a.duration||a.duration>0)}),this.gameState.soul.items=this.gameState.soul.items.filter(t=>t.effects.length>0)}useConsumableItem(e){var a;if((a=this.gameState.player.inventory)!=null&&a.items){const n=this.gameState.player.inventory.items.findIndex(s=>s.id===e);if(n!==-1){const s=this.gameState.player.inventory.items[n];return s.effects.forEach(r=>{this.applyImmediateEffect(r,s)}),s.quantity>1?s.quantity--:this.gameState.player.inventory.items.splice(n,1),console.log(i.t("messages.itemUsed",{itemName:f.getTranslatedItemName(s)})),!0}}const t=this.gameState.player.items.findIndex(n=>n.id===e);if(t!==-1){const n=this.gameState.player.items[t];return n.effects.forEach(s=>{this.applyImmediateEffect(s,n)}),n.quantity>1?n.quantity--:this.gameState.player.items.splice(t,1),console.log(i.t("messages.itemUsed",{itemName:f.getTranslatedItemName(n)})),!0}return!1}applyImmediateEffect(e,t){const a=this.gameState.player;switch(e.type){case"qi_absorption":if(!e.isPercentage){const n=Math.min(e.value,a.maxQi-a.qi);a.qi+=n,console.log(i.t("messages.qiGained",{qiGain:n,itemName:f.getTranslatedItemName(t)}))}break;case"talent_boost":if(!e.isPercentage){const n=Math.min(e.value,100-a.talent);a.talent+=n,console.log(i.t("messages.talentIncreased",{talentGain:n,itemName:f.getTranslatedItemName(t)}))}break;case"element_boost":if(e.element&&e.isPercentage){const n=a.elements[e.element],s=Math.floor(n*(e.value/100));a.elements[e.element]=Math.min(100,n+s),console.log(i.t("messages.elementAffinityBoosted",{element:e.element,boost:s,itemName:f.getTranslatedItemName(t)}))}break}}getEquippedItems(){var t;const e=[];return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&e.push(a)}),e}getConsumableItems(){var t;const e=[];return(t=this.gameState.player.inventory)!=null&&t.items&&e.push(...this.gameState.player.inventory.items.filter(a=>a.category===u.Pill||a.category===u.SpiritStone||a.category===u.Herb||a.category===u.Drug)),e.push(...this.gameState.soul.items.filter(a=>a.category===u.Pill||a.category===u.SpiritStone||a.category===u.Herb||a.category===u.Drug)),e}calculateHealthRegenerationBonus(){var a;let e=0;(a=this.gameState.player.inventory)!=null&&a.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(n=>{n&&n.effects.forEach(s=>{if(s.type==="health_regen"){const r=s.isPercentage?s.value/100*this.getBaseHealthRegen():s.value;e+=r}})}),this.gameState.soul.items.forEach(n=>{n.effects.forEach(s=>{if(s.type==="health_regen"){const r=s.isPercentage?s.value/100*this.getBaseHealthRegen():s.value;e+=r}})});const t=this.calculateLocationHealthRegenerationBonus();return t>0&&(e+=t/100*this.getBaseHealthRegen()),e}getBaseHealthRegen(){const e=this.gameState.player;let t=1;const a=Math.sqrt(e.realm+1);return t*=a,t*=1+e.talent/200,t}calculateLocationQiAbsorptionBonus(){let e=0,t=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(a=>{a.type==="qi_absorption"&&(a.isPercentage?e+=a.value:t+=a.value)}),{percentage:e,flat:t}}calculateLocationCultivationSpeedBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="cultivation_speed"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationCombatPowerBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="combat_power"&&!t.isPercentage&&(e+=t.value)}),e}calculateLocationElementBoost(e){let t=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(a=>{a.type==="element_boost"&&a.element===e&&a.isPercentage&&(t+=a.value)}),t}calculateLocationDefenseBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="defense"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationHealthRegenerationBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="health_regen"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationQiRegenerationBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="qi_regen"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationCriticalChanceBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="critical_chance"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationCriticalDamageBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="critical_damage"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationComprehensionBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="comprehension"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationLuckBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="luck"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationExperienceBoost(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="experience_boost"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationMeridianPurityBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="meridian_purity"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationLifespanBonus(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="lifespan"&&t.isPercentage&&(e+=t.value)}),e}calculateLocationTalentBoost(){let e=0;return this.gameState.player.activeLocationEffects&&this.gameState.player.activeLocationEffects.forEach(t=>{t.type==="talent_boost"&&t.isPercentage&&(e+=t.value)}),e}}class _e{constructor(e){this.gameState=e,this.effectProcessor=new $e(e)}calculateMaxHealth(e){const a=this.getRealmHealthMultiplier(e.realm),n=Math.floor(e.maxQi/10),s=Math.floor(e.talent/2);return Math.floor(100*a+n+s)}calculateMaxHealthForEnemy(e){const a=this.getRealmHealthMultiplier(e.realm),n=Math.floor(e.maxQi/8);return Math.floor(80*a+n)}getRealmHealthMultiplier(e){switch(e){case c.Mortal:return 1;case c.QiCondensation:return 1.5;case c.FoundationEstablishment:return 2.5;case c.CoreFormation:return 4;case c.NascentSoul:return 7;case c.DivineTransformation:return 12;case c.VoidRefinement:return 20;case c.ImmortalAscension:return 35;default:return 1}}applyDamage(e,t,a){let n=t;switch(a){case V.Physical:n=this.applyPhysicalDamage(e,t);break;case V.Spiritual:n=this.applySpiritualDamage(e,t);break;case V.Elemental:n=this.applyElementalDamage(e,t);break}return n=Math.max(0,n),e.health=Math.max(0,e.health-n),n}applyPhysicalDamage(e,t){return t}applySpiritualDamage(e,t){const a=this.getRealmHealthMultiplier(e.realm)*.1,n=Math.min(e.qi/e.maxQi*.2,.2),s=Math.min(a+n,.5);return t*(1-s)}applyElementalDamage(e,t){return t}heal(e,t){const a=e.health;return e.health=Math.min(e.maxHealth,e.health+t),e.health-a}regenerateHealth(e){if(e.health>=e.maxHealth)return 0;let t=1;if(t*=Math.sqrt(this.getRealmHealthMultiplier(e.realm)),e.health/e.maxHealth<.5&&(t*=.5),"talent"in e&&(t*=1+e.talent/200),"talent"in e){const s=this.effectProcessor.calculateHealthRegenerationBonus();t+=s}const n=Math.max(1,Math.floor(t));return this.heal(e,n)}isAlive(e){return e.health>0}getHealthPercentage(e){return Math.round(e.health/e.maxHealth*100)}initializePlayerHealth(e){e.maxHealth=this.calculateMaxHealth(e),e.health=e.maxHealth}initializeEnemyHealth(e){e.maxHealth=this.calculateMaxHealthForEnemy(e),e.health=e.maxHealth}updateMaxHealth(e){const t=this.calculateMaxHealth(e),a=e.health/e.maxHealth;e.maxHealth=t,e.health=Math.min(e.health,Math.floor(t*a))}}const Ot="starting-village",Gt=[{id:"starting-village",type:"village",nameKey:"locations.peacefulValleyVillage.name",descriptionKey:"locations.peacefulValleyVillage.description",position:{x:0,y:0},properties:{safety:.9,qiDensity:.3,eventFrequency:.7,merchantPresence:.8,cultivationBonus:.1},connectedLocations:[{targetLocationId:"bamboo-grove",travelTime:2,dangerLevel:.1,description:"Path to Bamboo Grove"},{targetLocationId:"mountain-peak",travelTime:3,dangerLevel:.2,description:"Mountain trail to Peak"},{targetLocationId:"dark-forest",travelTime:2,dangerLevel:.4,description:"Winding path through forest"}],discovered:!0,specialFeatures:["village_center","starting_point"],locationEffects:[{type:"health_regen",value:10,isPercentage:!0},{type:"qi_regen",value:5,isPercentage:!0}]},{id:"bamboo-grove",type:"cultivation_site",nameKey:"locations.bambooGrove.name",descriptionKey:"locations.bambooGrove.description",position:{x:1,y:0},properties:{safety:.8,qiDensity:.7,eventFrequency:.4,merchantPresence:.1,cultivationBonus:.25},connectedLocations:[{targetLocationId:"starting-village",travelTime:2,dangerLevel:.1,description:"Return to village"},{targetLocationId:"border-town",travelTime:3,dangerLevel:.3,description:"Path to Border Town"}],specialFeatures:["meditation_spot","bamboo_formation"],locationEffects:[{type:"cultivation_speed",value:15,isPercentage:!0},{type:"element_boost",value:10,element:"wood",isPercentage:!0},{type:"comprehension",value:5,isPercentage:!0}]},{id:"mountain-peak",type:"cultivation_site",nameKey:"locations.mountainPeak.name",descriptionKey:"locations.mountainPeak.description",position:{x:0,y:1},properties:{safety:.6,qiDensity:.8,eventFrequency:.3,merchantPresence:0,cultivationBonus:.35},connectedLocations:[{targetLocationId:"starting-village",travelTime:3,dangerLevel:.2,description:"Descend to village"},{targetLocationId:"border-town",travelTime:2,dangerLevel:.3,description:"Cross to Border Town"}],specialFeatures:["high_altitude","wind_formation","tribulation_site"],locationEffects:[{type:"qi_absorption",value:20,isPercentage:!0},{type:"cultivation_speed",value:10,isPercentage:!0},{type:"element_boost",value:15,element:"metal",isPercentage:!0},{type:"critical_chance",value:5,isPercentage:!0}]},{id:"dark-forest",type:"dangerous_area",nameKey:"locations.darkForest.name",descriptionKey:"locations.darkForest.description",position:{x:-1,y:0},properties:{safety:.3,qiDensity:.5,eventFrequency:.8,merchantPresence:0,cultivationBonus:.15},connectedLocations:[{targetLocationId:"starting-village",travelTime:2,dangerLevel:.4,description:"Exit the dark forest"},{targetLocationId:"abandoned-temple",travelTime:4,dangerLevel:.6,description:"Deep into the forest"}],specialFeatures:["dense_foliage","hidden_groves","spirit_beasts"],locationEffects:[{type:"luck",value:-10,isPercentage:!0},{type:"defense",value:-5,isPercentage:!0},{type:"element_boost",value:8,element:"wood",isPercentage:!0},{type:"experience_boost",value:15,isPercentage:!0}]},{id:"border-town",type:"village",nameKey:"locations.borderTown.name",descriptionKey:"locations.borderTown.description",position:{x:1,y:1},properties:{safety:.7,qiDensity:.4,eventFrequency:.9,merchantPresence:.7,cultivationBonus:.1},connectedLocations:[{targetLocationId:"bamboo-grove",travelTime:3,dangerLevel:.3,description:"Back to Bamboo Grove"},{targetLocationId:"mountain-peak",travelTime:2,dangerLevel:.3,description:"Up to Mountain Peak"},{targetLocationId:"spirit-lake",travelTime:5,dangerLevel:.5,description:"Journey to Spirit Lake"}],specialFeatures:["trading_hub","frontier_post","adventurer_guild"],locationEffects:[{type:"luck",value:8,isPercentage:!0},{type:"experience_boost",value:10,isPercentage:!0}]},{id:"abandoned-temple",type:"ancient_ruin",nameKey:"locations.abandonedTemple.name",descriptionKey:"locations.abandonedTemple.description",position:{x:-2,y:0},properties:{safety:.2,qiDensity:.6,eventFrequency:.6,merchantPresence:0,cultivationBonus:.2},connectedLocations:[{targetLocationId:"dark-forest",travelTime:4,dangerLevel:.6,description:"Exit through the forest"}],specialFeatures:["ancient_formation","hidden_chamber","cursed_ground"],locationEffects:[{type:"comprehension",value:25,isPercentage:!0},{type:"meridian_purity",value:10,isPercentage:!0},{type:"luck",value:-15,isPercentage:!0},{type:"health_regen",value:-20,isPercentage:!0}]},{id:"spirit-lake",type:"secret_realm",nameKey:"locations.spiritLake.name",descriptionKey:"locations.spiritLake.description",position:{x:2,y:2},properties:{safety:.5,qiDensity:.9,eventFrequency:.5,merchantPresence:0,cultivationBonus:.4},connectedLocations:[{targetLocationId:"border-town",travelTime:5,dangerLevel:.5,description:"Return to Border Town"}],specialFeatures:["spirit_gateway","water_formation","realm_entrance"],locationEffects:[{type:"qi_absorption",value:30,isPercentage:!0},{type:"cultivation_speed",value:20,isPercentage:!0},{type:"element_boost",value:20,element:"water",isPercentage:!0},{type:"comprehension",value:15,isPercentage:!0},{type:"meridian_purity",value:15,isPercentage:!0}]}],We={startingLocationId:Ot,locations:Gt};class it{constructor(e,t,a,n){this.gameState=e,this.random=t,this.eventSystem=a,this.combatSystem=n}generateWorldMap(){const e=[];return We.locations.forEach(t=>{const a=this.createLocationFromData(t);e.push(a)}),this.gameState.player.currentLocationId=We.startingLocationId,e}createLocationFromData(e){const t={village:_.Village,cultivation_site:_.CultivationSite,dangerous_area:_.DangerousArea,secret_realm:_.SecretRealm,ancient_ruin:_.AncientRuin};return{id:e.id,type:t[e.type]||_.Village,name:i.t(e.nameKey),description:i.t(e.descriptionKey),nameKey:e.nameKey,descriptionKey:e.descriptionKey,position:e.position,properties:e.properties,connectedLocations:e.connectedLocations||[],discovered:e.discovered||!1,lastVisited:e.discovered?Date.now():void 0,locationEffects:e.locationEffects||[]}}getWorldMap(){return this.gameState.worldMap}getCurrentLocationId(){return this.gameState.player.currentLocationId}travelToLocation(e){console.log("TravelSystem: Starting travel to",e),console.log("TravelSystem: Current player location ID:",this.gameState.player.currentLocationId);const t=this.gameState.worldMap.find(m=>m.id===this.gameState.player.currentLocationId),a=this.gameState.worldMap.find(m=>m.id===e);if(console.log("TravelSystem: Found current location:",t==null?void 0:t.id),console.log("TravelSystem: Found target location:",a==null?void 0:a.id),!t||!a)return console.log(i.t("messages.locationNotFound")),{success:!1};const n=t.connectedLocations.find(m=>m.targetLocationId===e);if(!n)return console.log(i.t("messages.noPathAvailable")),{success:!1};const s=Math.ceil(n.travelTime/2);return this.gameState.player.energy<s?(console.log(i.t("messages.notEnoughEnergy")),{success:!1}):(this.gameState.player.energy-=s,this.gameState.time+=n.travelTime*60*60*1e3,console.log("TravelSystem: Before marking discovered - target location discovered:",a.discovered),a.discovered=!0,a.lastVisited=Date.now(),console.log("TravelSystem: After marking discovered - target location discovered:",a.discovered),console.log("TravelSystem: Before location update - player currentLocationId:",this.gameState.player.currentLocationId),this.gameState.player.currentLocationId=e,console.log("TravelSystem: After location update - player currentLocationId:",this.gameState.player.currentLocationId),console.log(i.t("messages.arrivedAtLocation",{location:a.name,travelTime:n.travelTime})),this.applyLocationEffects(a),{success:!0,events:this.generateLocationEvents(a)})}applyLocationEffects(e){this.gameState.player.activeLocationEffects||(this.gameState.player.activeLocationEffects=[]),this.gameState.player.activeLocationEffects=[],e.locationEffects&&e.locationEffects.length>0&&(this.gameState.player.activeLocationEffects=[...e.locationEffects],console.log(`Applied ${e.locationEffects.length} location effects at ${e.name}`))}generateLocationEvents(e){const t=[];if(this.random.chance(e.properties.eventFrequency))switch(e.type){case _.CultivationSite:t.push(this.generateCultivationEvent(e));break;case _.Village:t.push(this.generateVillageEvent(e));break;case _.DangerousArea:t.push(this.generateDangerEvent(e));break;case _.SecretRealm:t.push(this.generateSecretRealmEvent(e));break;case _.AncientRuin:t.push(this.generateAncientRuinEvent(e));break}return this.random.chance(e.properties.qiDensity*.3)&&t.push(this.generateQiAbsorptionEvent(e)),t}generateCultivationEvent(e){const t=["meditation","breakthrough","enlightenment","disturbance"];switch(this.random.choice(t)){case"meditation":return{id:`cultivation-${Date.now()}`,type:"cultivation",title:i.t("events.cultivationMeditation"),description:i.t("events.cultivationMeditationDesc",{location:e.name}),choices:[{text:i.t("events.meditate"),effect:()=>{const n=Math.floor(this.gameState.player.maxQi*e.properties.cultivationBonus);this.gameState.player.qi=Math.min(this.gameState.player.qi+n,this.gameState.player.maxQi),console.log(i.t("messages.qiAbsorbed",{qi:n}))}},{text:i.t("events.continueJourney"),effect:()=>{}}]};case"breakthrough":return{id:`breakthrough-${Date.now()}`,type:"cultivation",title:i.t("events.cultivationBreakthrough"),description:i.t("events.cultivationBreakthroughDesc",{location:e.name}),choices:[{text:i.t("events.attemptBreakthrough"),effect:()=>{const n=Math.min(.8,this.gameState.player.talent/100);this.random.chance(n)?console.log(i.t("messages.breakthroughSuccess")):console.log(i.t("messages.breakthroughFailed"))}}]};default:return{id:`disturbance-${Date.now()}`,type:"encounter",title:i.t("events.cultivationDisturbance"),description:i.t("events.cultivationDisturbanceDesc"),choices:[{text:i.t("events.investigate"),effect:()=>{const n=this.combatSystem.generateRandomEnemy();console.log(i.t("messages.encounter",{enemy:n.name}))}}]}}}generateVillageEvent(e){const t=["quest","merchant","rumor","trouble"];switch(this.random.choice(t)){case"quest":return{id:`quest-${Date.now()}`,type:"quest",title:i.t("events.villageQuest"),description:i.t("events.villageQuestDesc"),choices:[{text:i.t("events.acceptQuest"),effect:()=>{console.log(i.t("messages.questAccepted"))}},{text:i.t("events.declineQuest"),effect:()=>{}}]};case"merchant":if(this.random.chance(e.properties.merchantPresence))return{id:`merchant-${Date.now()}`,type:"merchant",title:i.t("events.merchantEncounter"),description:i.t("events.merchantEncounterDesc"),choices:[{text:i.t("events.trade"),effect:()=>{console.log(i.t("messages.merchantGreeting"))}}]};break;case"trouble":return{id:`trouble-${Date.now()}`,type:"combat",title:i.t("events.villageTrouble"),description:i.t("events.villageTroubleDesc"),choices:[{text:i.t("events.helpVillagers"),effect:()=>{const n=this.combatSystem.generateRandomEnemy();console.log(i.t("messages.villainEncounter",{enemy:n.name}))}},{text:i.t("events.ignore"),effect:()=>{this.gameState.player.karma=Math.max(0,this.gameState.player.karma-5)}}]}}return{id:`village-${Date.now()}`,type:"social",title:i.t("events.villageLife"),description:i.t("events.villageLifeDesc"),choices:[{text:i.t("events.rest"),effect:()=>{this.gameState.player.energy=Math.min(100,this.gameState.player.energy+20)}}]}}generateDangerEvent(e){return{id:`danger-${Date.now()}`,type:"combat",title:i.t("events.dangerEncounter"),description:i.t("events.dangerEncounterDesc",{location:e.name}),choices:[{text:i.t("events.fight"),effect:()=>{const t=this.combatSystem.generateRandomEnemy();console.log(i.t("messages.ambush",{enemy:t.name}))}},{text:i.t("events.flee"),effect:()=>{this.combatSystem.attemptFlee()?console.log(i.t("messages.fledSuccessfully")):console.log(i.t("messages.fleeFailed"))}}]}}generateSecretRealmEvent(e){const t=["realm_insight","realm_trial","realm_opportunity"];switch(this.random.choice(t)){case"realm_insight":return{id:`realm-insight-${Date.now()}`,type:"cultivation",title:i.t("events.realmInsight"),description:i.t("events.realmInsightDesc",{location:e.name}),choices:[{text:i.t("events.studyFormation"),effect:()=>{this.gameState.player.talent=Math.min(100,this.gameState.player.talent+2),console.log(i.t("messages.insightGained"))}}]};case"realm_trial":return{id:`realm-trial-${Date.now()}`,type:"combat",title:i.t("events.realmTrial"),description:i.t("events.realmTrialDesc",{location:e.name}),choices:[{text:i.t("events.faceTrial"),effect:()=>{const n=this.combatSystem.generateRandomEnemy();n.qi=Math.floor(n.qi*1.5),n.maxQi=Math.floor(n.maxQi*1.5),console.log(i.t("messages.realmGuardian",{enemy:n.name}))}}]};default:return{id:`realm-opportunity-${Date.now()}`,type:"quest",title:i.t("events.realmOpportunity"),description:i.t("events.realmOpportunityDesc",{location:e.name}),choices:[{text:i.t("events.enterRealm"),effect:()=>{console.log(i.t("messages.realmEntered"))}}]}}}generateAncientRuinEvent(e){const t=["treasure","trap","artifact","guardian"];switch(this.random.choice(t)){case"treasure":return{id:`ruin-treasure-${Date.now()}`,type:"exploration",title:i.t("events.ruinTreasure"),description:i.t("events.ruinTreasureDesc"),choices:[{text:i.t("events.searchTreasure"),effect:()=>{if(this.random.chance(.7))console.log(i.t("messages.treasureFound"));else{const n=Math.floor(this.gameState.player.maxHealth*.1);this.gameState.player.health=Math.max(1,this.gameState.player.health-n),console.log(i.t("messages.trapTriggered",{damage:n}))}}}]};case"artifact":return{id:`ruin-artifact-${Date.now()}`,type:"exploration",title:i.t("events.ruinArtifact"),description:i.t("events.ruinArtifactDesc"),choices:[{text:i.t("events.examineArtifact"),effect:()=>{console.log(i.t("messages.artifactDiscovered"))}}]};case"guardian":return{id:`ruin-guardian-${Date.now()}`,type:"combat",title:i.t("events.ruinGuardian"),description:i.t("events.ruinGuardianDesc"),choices:[{text:i.t("events.confrontGuardian"),effect:()=>{const n=this.combatSystem.generateRandomEnemy();console.log(i.t("messages.guardianAppears",{enemy:n.name}))}},{text:i.t("events.retreat"),effect:()=>{console.log(i.t("messages.retreatedSafely"))}}]};default:return{id:`ruin-trap-${Date.now()}`,type:"danger",title:i.t("events.ruinTrap"),description:i.t("events.ruinTrapDesc"),choices:[{text:i.t("events.disarmTrap"),effect:()=>{if(this.random.chance(.5))console.log(i.t("messages.trapDisarmed"));else{const n=Math.floor(this.gameState.player.maxHealth*.15);this.gameState.player.health=Math.max(1,this.gameState.player.health-n),console.log(i.t("messages.trapFailed",{damage:n}))}}}]}}}generateQiAbsorptionEvent(e){return{id:`qi-${Date.now()}`,type:"cultivation",title:i.t("events.qiFlow"),description:i.t("events.qiFlowDesc",{location:e.name}),choices:[{text:i.t("events.absorbQi"),effect:()=>{const t=Math.floor(this.gameState.player.maxQi*e.properties.qiDensity*.1);this.gameState.player.qi=Math.min(this.gameState.player.qi+t,this.gameState.player.maxQi),console.log(i.t("messages.qiAbsorbed",{qi:t}))}}]}}getAvailableDestinations(){const e=this.gameState.worldMap.find(t=>t.id===this.gameState.player.currentLocationId);return e?e.connectedLocations.map(t=>this.gameState.worldMap.find(a=>a.id===t.targetLocationId)).filter(t=>t!==void 0):[]}getLocationInfo(e){return this.gameState.worldMap.find(t=>t.id===e)}getTravelInfo(e){const t=this.gameState.worldMap.find(n=>n.id===this.gameState.player.currentLocationId),a=t==null?void 0:t.connectedLocations.find(n=>n.targetLocationId===e);return a?{time:a.travelTime,cost:Math.ceil(a.travelTime/2),danger:a.dangerLevel}:null}}class Qt{constructor(e,t,a,n){this.gameLoop=null,this.lastAutoSaveTime=0,this.AUTO_SAVE_INTERVAL_DAYS=Ft.INTERVAL_DAYS,this.random=new wt(e),this.state=this.initializeGameState(),this.updateCallback=t,this.uiUpdateCallback=a,this.autoSaveCallback=n}initializeGameState(){const e={id:"player-1",name:"Cultivator",realm:c.Mortal,qi:0,maxQi:he.MAX_QI,health:100,maxHealth:100,meridians:this.createInitialMeridians(),elements:this.initializeElementAffinities(),talent:he.TALENT,items:[],lifetime:0,currentLocationId:"starting-village",energy:100,karma:0},t={id:"soul-1",lifetimeCount:1,totalLifetime:0,cultivationInsights:{realmBreakthroughs:[],techniqueMastery:[],elementalUnderstanding:{[l.Metal]:0,[l.Wood]:0,[l.Water]:0,[l.Fire]:0,[l.Earth]:0},tribulationSurvivals:0},karmicBalance:0,maxRealmAchieved:c.Mortal,items:[]},a={player:e,soul:t,time:0,isRunning:!1,seed:this.random.getSeed(),worldMap:[]};new _e(a).initializePlayerHealth(e);const s=new it(a,this.random,null,null);return a.worldMap=s.generateWorldMap(),a}createInitialMeridians(){return["Governor Vessel","Conception Vessel","Stomach","Spleen","Heart","Small Intestine","Bladder","Kidney","Pericardium","Triple Burner","Gallbladder","Liver"].map((t,a)=>({id:`meridian-${a}`,name:t,isOpen:!1,purity:0,breakthroughStage:0}))}initializeElementAffinities(){const e=[l.Metal,l.Wood,l.Water,l.Fire,l.Earth],t=this.random.choice(e),a={[l.Metal]:0,[l.Wood]:0,[l.Water]:0,[l.Fire]:0,[l.Earth]:0};return a[t]=this.random.int(he.ELEMENT_AFFINITY_BASE.min,he.ELEMENT_AFFINITY_BASE.max),a}start(){console.log(i.t("messages.startingJourney")),this.state.isRunning=!0,this.displayStatus(),this.gameLoop=setInterval(()=>{this.update()},1e3)}stop(){this.gameLoop&&(clearInterval(this.gameLoop),this.gameLoop=null),this.state.isRunning=!1,console.log(`
`+i.t("messages.cultivationSessionEnded"))}update(){this.state.isRunning&&(this.state.time+=1,this.state.player.lifetime+=1,this.state.time-this.lastAutoSaveTime>=this.AUTO_SAVE_INTERVAL_DAYS&&this.autoSave(),this.updateCallback&&this.updateCallback(),this.uiUpdateCallback&&this.uiUpdateCallback())}displayStatus(){const e=this.state.player,t=this.state.soul;console.log(i.t("messages.statusUpdate",{day:Math.floor(this.state.time)})),console.log(`${i.t("status.player")}: ${e.name}`),console.log(`${i.t("status.realm")}: ${this.getRealmName(e.realm)}`),console.log(`${i.t("status.qi")}: ${e.qi.toFixed(1)} / ${e.maxQi}`),console.log(`${i.t("status.talent")}: ${e.talent}/100`);const a=this.getPrimaryElement();if(a){console.log(`${i.t("status.primaryElement")}: ${a} (${e.elements[a].toFixed(1)})`);const n=this.getComplementaryElements(a,e.realm);n.length>0&&console.log(`${i.t("status.complementaryElements")}: ${n.map(s=>{var r;return`${s} (${((r=e.elements[s])==null?void 0:r.toFixed(1))||"0.0"})`}).join(", ")}`)}console.log(`${i.t("status.lifetime")}: ${e.lifetime} ${i.t("messages.day")} (${i.t("status.reincarnation")}: ${t.lifetimeCount})`),console.log(`${i.t("status.karma")}: ${t.karmicBalance>0?"+":""}${t.karmicBalance}`),console.log(`─────────────────────────────
`)}getRealmName(e){return i.getRealmName(e)}getPrimaryElement(){const e=this.state.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,s])=>{s>t&&(t=s,a=n)}),a}getComplementaryElements(e,t){var r;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},s={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=c.QiCondensation&&a.push(n[e]),t>=c.CoreFormation&&a.push(s[e]),t>=c.DivineTransformation){const m=s[e],h=(r=Object.entries(s).find(([g,p])=>p===m))==null?void 0:r[0];h&&a.push(h)}return a}getState(){return{...this.state}}getStateReference(){return this.state}setState(e){this.state=e}getRandom(){return this.random}autoSave(){this.autoSaveCallback&&this.autoSaveCallback(),this.lastAutoSaveTime=this.state.time}saveGame(){try{const e=this.serializeGameState();localStorage.setItem("culsim-save",e),console.log(i.t("messages.gameSaved"))}catch(e){console.error(i.t("messages.saveError"),e)}}loadGame(){try{const e=localStorage.getItem("culsim-save");if(e)return this.state=this.deserializeGameState(e),console.log(i.t("messages.gameLoaded")),!0}catch(e){console.error(i.t("messages.loadError"),e)}return!1}serializeGameState(){return JSON.stringify(this.state,null,2)}deserializeGameState(e){const t=JSON.parse(e);return{player:t.player||this.initializeGameState().player,soul:t.soul||this.initializeGameState().soul,time:t.time?Math.floor(t.time/86400):0,isRunning:!1,seed:t.seed||this.random.getSeed(),worldMap:t.worldMap||this.initializeGameState().worldMap}}}class Ue{constructor(e){this.gameState=e,this.effectProcessor=new $e(e)}processCultivation(){const e=this.gameState.player;switch(this.processMeridianPurification(),e.realm){case c.Mortal:this.cultivateMortalRealm();break;case c.QiCondensation:this.cultivateQiCondensationRealm();break;case c.FoundationEstablishment:this.cultivateFoundationEstablishmentRealm();break;case c.CoreFormation:this.cultivateCoreFormationRealm();break;case c.NascentSoul:this.cultivateNascentSoulRealm();break;case c.DivineTransformation:this.cultivateDivineTransformationRealm();break;case c.VoidRefinement:this.cultivateVoidRefinementRealm();break;case c.ImmortalAscension:this.cultivateImmortalAscensionRealm();break}}cultivateMortalRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.Mortal);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateQiCondensationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.QiCondensation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateFoundationEstablishmentRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.FoundationEstablishment);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateCoreFormationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.CoreFormation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateNascentSoulRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.NascentSoul);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateDivineTransformationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.DivineTransformation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateVoidRefinementRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.VoidRefinement);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateImmortalAscensionRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(c.ImmortalAscension);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}calculateQiGatheringForRealm(e){const t=this.gameState.player;if(e===c.Mortal){const a=He[c.Mortal].BASIC_ABSORPTION,n=1+t.talent/500;let s=a*n;const r=t.meridians.filter(g=>g.isOpen).length;if(r>0){const g=r*.5;s*=1+g}const m=this.effectProcessor.calculateCultivationSpeedBonus();s*=1+m/100;const h=this.effectProcessor.calculateQiAbsorptionBonus();return s*=1+h.percentage/100,s+=h.flat,s}else{const a=He[e],n=a.BASE_ABSORPTION,s=1+t.talent/Dt[e],r=this.calculateMeridianBonus(),m=a.REALM_MULTIPLIER||1;let h=1;e===c.VoidRefinement?h=1+this.gameState.soul.karmicBalance/1e3:e===c.ImmortalAscension&&(h=1+this.gameState.soul.karmicBalance/500);let g=n*s*r*m*h;const p=this.effectProcessor.calculateCultivationSpeedBonus();g*=1+p/100;const A=this.effectProcessor.calculateQiAbsorptionBonus();return g*=1+A.percentage/100,g+=A.flat,g}}calculateMeridianBonus(){const t=this.gameState.player.meridians.filter(s=>s.isOpen);if(t.length===0)return 1;const a=t.length*.1,n=t.reduce((s,r)=>s+r.purity/1e3,0);return 1+a*2+n*4}cultivateElements(){const e=this.gameState.player,t=e.realm,a=.1+e.talent/1e3,n=this.getPrimaryElement();n&&(e.elements[n]=Math.min(100,e.elements[n]+a),this.getComplementaryElements(n,t).forEach(r=>{e.elements[r]=Math.min(100,e.elements[r]+a*.5)}))}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,s])=>{s>t&&(t=s,a=n)}),a}getComplementaryElements(e,t){var r;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},s={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=c.QiCondensation&&a.push(n[e]),t>=c.CoreFormation&&a.push(s[e]),t>=c.DivineTransformation){const m=s[e],h=(r=Object.entries(s).find(([g,p])=>p===m))==null?void 0:r[0];h&&a.push(h)}return a}processMeridianPurification(){const e=this.gameState.player;e.meridians.forEach((t,a)=>{if(!t.isOpen)return;const n=this.getMeridianEffectiveCap(t);if(t.purity>=n)return;const s=ie.BASE_MERIDIAN_PURIFICATION+e.talent/1e3+t.breakthroughStage*.05;t.purity=Math.min(n,t.purity+s)})}getMeridianEffectiveCap(e){switch(e.breakthroughStage){case 0:return R.NATURAL_CAP;case 1:return R.PURIFIED;case 2:return R.HIGHLY_PURIFIED;case 3:return R.PERFECT;default:return R.PERFECT}}cultivate(){const e=this.gameState.player,a=this.calculateQiGatheringForRealm(e.realm)*2;return e.qi=Math.min(e.qi+a,e.maxQi),this.cultivateElements(),this.processMeridianPurification(),a}calculateQiGatheringSpeed(){const e=this.gameState.player;return this.calculateQiGatheringForRealm(e.realm)}}class Ve{constructor(e,t){this.gameState=e,this.random=t}attemptMeridianOpening(e){const t=this.gameState.player,a=t.meridians.map((g,p)=>({meridian:g,index:p})).filter(({meridian:g})=>!g.isOpen);if(a.length===0)return;const n=e!==void 0&&e<t.meridians.length?{meridian:t.meridians[e],index:e}:this.random.choice(a),s=x.OPENING_BASE_COST+n.index*x.OPENING_COST_INCREMENT,r=t.talent/200,m=Math.min(.8,t.qi/s*(.5+r)),h=Math.floor(s*x.OPENING_ATTEMPT_COST_FRACTION);t.qi=Math.max(0,t.qi-h),this.random.chance(m)?(t.meridians[n.index].isOpen=!0,t.meridians[n.index].purity=x.INITIAL_PURITY,console.log(i.t("messages.meridianOpened",{meridian:i.getMeridianName(n.index)}))):console.log(i.t("messages.meridianOpeningFailed",{meridian:i.getMeridianName(n.index),chance:(m*100).toFixed(1)}))}attemptMeridianBreakthrough(e){const t=this.gameState.player;if(e<0||e>=t.meridians.length){console.log(i.t("messages.invalidMeridianIndex"));return}const a=t.meridians[e];if(!a.isOpen){console.log(i.t("messages.meridianNotOpen",{meridian:i.getMeridianName(e)}));return}const n=this.getMeridianEffectiveCap(a);if(a.purity<n){console.log(i.t("messages.meridianNotPurified",{meridian:i.getMeridianName(e),purity:a.purity.toFixed(1),required:n}));return}if(a.purity>=x.MAX_PURITY){console.log(i.t("messages.meridianMaxPurity",{meridian:i.getMeridianName(e)}));return}const s=(e+1)*U.QI_COST_MULTIPLIER,r=1+a.breakthroughStage*10,m=s*r,h=U.BASE_SUCCESS_CHANCE,g=t.talent/U.TALENT_BONUS_DIVISOR,p=Math.min(.95,h+g);if(console.log(i.t("messages.meridianBreakthroughAttempt",{meridian:i.getMeridianName(e),qi:m,chance:(p*100).toFixed(1)})),t.qi<m){console.log(i.t("messages.insufficientQi",{required:m,current:t.qi.toFixed(1)}));return}const A=Math.floor(m*U.ATTEMPT_COST_FRACTION);if(t.qi=Math.max(0,t.qi-A),this.random.chance(p)){a.breakthroughStage+=1;const P=this.getMeridianEffectiveCap(a);if(console.log(i.t("messages.meridianBreakthroughSuccess",{meridian:i.getMeridianName(e),stage:a.breakthroughStage,cap:P})),this.random.chance(U.HEART_DEMON_CHANCE))if(console.log(i.t("messages.heartDemonTribulation")),this.random.chance(.3))console.log(i.t("messages.heartDemonSuccess"));else{const D=t.qi*U.HEART_DEMON_QI_LOSS;t.qi=Math.max(0,t.qi-D),console.log(i.t("messages.heartDemonFailure",{qiLoss:D.toFixed(1)}))}}else if(console.log(i.t("messages.meridianBreakthroughFailed",{meridian:i.getMeridianName(e)})),this.random.chance(U.FAILURE_DAMAGE_CHANCE)){const P=a.purity*U.FAILURE_DAMAGE_PERCENTAGE;a.purity=Math.max(0,a.purity-P),console.log(i.t("messages.meridianBreakthroughDamage",{meridian:i.getMeridianName(e),damage:P.toFixed(1),purity:a.purity.toFixed(1)}))}}getMeridianEffectiveCap(e){switch(e.breakthroughStage){case 0:return R.NATURAL_CAP;case 1:return R.PURIFIED;case 2:return R.HIGHLY_PURIFIED;case 3:return R.PERFECT;default:return R.NATURAL_CAP}}getMeridianInfo(e){return e<0||e>=this.gameState.player.meridians.length?null:this.gameState.player.meridians[e]}getAllMeridians(){return[...this.gameState.player.meridians]}canOpenMeridian(e){return e<0||e>=this.gameState.player.meridians.length?!1:!this.gameState.player.meridians[e].isOpen}canBreakthroughMeridian(e){if(e<0||e>=this.gameState.player.meridians.length)return!1;const t=this.gameState.player.meridians[e];return!(!t.isOpen||t.purity<R.NATURAL_CAP||t.purity>=x.MAX_PURITY)}debugAddMeridianProgress(e){this.gameState.player.meridians.forEach(a=>{if(a.isOpen){const n=this.getMeridianEffectiveCap(a);if(a.purity<n){const s=a.purity;a.purity=Math.min(n,a.purity+e),console.log(`🐛 Debug: Meridian purified from ${s.toFixed(1)}% to ${a.purity.toFixed(1)}% (cap: ${n}%)`)}}})}}class Ke{constructor(e){this.gameState=e}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,s])=>{s>t&&(t=s,a=n)}),a}getComplementaryElements(e,t){var r;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},s={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=1&&a.push(n[e]),t>=3&&a.push(s[e]),t>=5){const m=s[e],h=(r=Object.entries(s).find(([g,p])=>p===m))==null?void 0:r[0];h&&a.push(h)}return a}getElementAffinity(e){return this.gameState.player.elements[e]||0}getAllElementAffinities(){return{...this.gameState.player.elements}}isElementFullyCultivated(e){return this.getElementAffinity(e)>=ie.MAX_ELEMENT_AFFINITY}getFullyCultivatedElementCount(){return Object.values(this.gameState.player.elements).filter(e=>e>=ie.MAX_ELEMENT_AFFINITY).length}calculateElementalBonus(e,t){const a={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},n={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};return a[e]===t?1.25:n[e]===t?.75:1}getElementCultivationProgress(e){return Math.min(100,this.getElementAffinity(e))}getUnlockedElements(){const e=this.getPrimaryElement();if(!e)return[];const t=[e],a=this.getComplementaryElements(e,this.gameState.player.realm);return t.push(...a),[...new Set(t)]}debugAddElementProgress(e=10){const t=this.gameState.player,a=this.getPrimaryElement();let n=0;a&&this.getUnlockedElements().forEach(r=>{const m=t.elements[r];m<ie.MAX_ELEMENT_AFFINITY&&(t.elements[r]=Math.min(ie.MAX_ELEMENT_AFFINITY,m+e),n++)}),console.log(`🐛 Debug: Added ${e}% affinity to ${n} unlocked elements`)}getElementDisplayInfo(e){const t=this.getPrimaryElement();return{name:e,affinity:this.getElementAffinity(e),progress:this.getElementCultivationProgress(e),isPrimary:t===e,isFullyCultivated:this.isElementFullyCultivated(e)}}}class je{constructor(e,t){this.gameState=e,this.random=t}attemptBreakthrough(){const e=this.gameState.player;switch(console.log(i.t("messages.breakthroughAttempt",{realm:this.getRealmName(e.realm)})),e.realm){case c.Mortal:this.attemptQiCondensationBreakthrough();break;case c.QiCondensation:this.attemptFoundationEstablishmentBreakthrough();break;case c.FoundationEstablishment:this.attemptCoreFormationBreakthrough();break;case c.CoreFormation:this.attemptNascentSoulBreakthrough();break;case c.NascentSoul:this.attemptDivineTransformationBreakthrough();break;case c.DivineTransformation:this.attemptVoidRefinementBreakthrough();break;case c.VoidRefinement:this.attemptImmortalAscensionBreakthrough();break;default:console.log(i.t("messages.breakthroughMaxRealm"))}}attemptQiCondensationBreakthrough(){const e=this.gameState.player,t=q[c.Mortal].qi,a=q[c.Mortal].meridians,n=q[c.Mortal].elements,s=e.meridians.filter(m=>m.isOpen).length,r=Object.values(e.elements).filter(m=>m>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(c.QiCondensation)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:r,required:n,status:r>=n?"✅":"❌"})),e.qi>=t&&s>=a&&r>=n?(console.log(i.t("messages.breakthroughRequirementsMet")),this.performTribulation("lightning",X[c.Mortal],()=>{this.performBreakthrough(c.QiCondensation)})):console.log(i.t("messages.breakthroughFailed"))}attemptFoundationEstablishmentBreakthrough(){const e=this.gameState.player,t=q[c.QiCondensation].qi,a=q[c.QiCondensation].meridians,n=q[c.QiCondensation].elements,s=e.meridians.filter(h=>h.isOpen).length,r=this.getPrimaryElement();let m=0;if(r){const h=this.getComplementaryElements(r,c.QiCondensation);m=[r,...h].filter(p=>e.elements[p]>=100).length}console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(c.FoundationEstablishment)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:m,required:n,status:m>=n?"✅":"❌"})),e.qi>=t&&s>=a&&m>=n?this.performTribulation("lightning",X[c.QiCondensation],()=>{this.performBreakthrough(c.FoundationEstablishment)}):console.log(i.t("messages.breakthroughFailed"))}attemptCoreFormationBreakthrough(){const e=this.gameState.player,t=q[c.FoundationEstablishment].qi,a=q[c.FoundationEstablishment].meridians,n=q[c.FoundationEstablishment].elements,s=e.meridians.filter(h=>h.isOpen).length,r=this.getPrimaryElement();let m=0;if(r){const h=this.getComplementaryElements(r,c.FoundationEstablishment);m=[r,...h].filter(p=>e.elements[p]>=100).length}console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(c.CoreFormation)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:m,required:n,status:m>=n?"✅":"❌"})),e.qi>=t&&s>=a&&m>=n?this.performTribulation("lightning",X[c.FoundationEstablishment],()=>{this.performBreakthrough(c.CoreFormation)}):console.log(i.t("messages.breakthroughFailed"))}attemptNascentSoulBreakthrough(){const e=this.gameState.player,t=q[c.CoreFormation].qi,a=q[c.CoreFormation].meridians,n=q[c.CoreFormation].elements,s=e.meridians.filter(h=>h.isOpen&&h.purity>=R.PURIFIED).length,r=this.getPrimaryElement();let m=0;if(r){const h=this.getComplementaryElements(r,c.CoreFormation);m=[r,...h].filter(p=>e.elements[p]>=100).length}console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(c.NascentSoul)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughPurifiedMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:m,required:n,status:m>=n?"✅":"❌"})),e.qi>=t&&s>=a&&m>=n?this.performTribulation("heart_demon",X[c.CoreFormation],()=>{this.performBreakthrough(c.NascentSoul)}):console.log(i.t("messages.breakthroughFailed"))}attemptDivineTransformationBreakthrough(){const e=this.gameState.player,t=q[c.NascentSoul].qi,a=q[c.NascentSoul].meridians,n=q[c.NascentSoul].elements,s=e.meridians.filter(m=>m.isOpen&&m.purity>=R.HIGHLY_PURIFIED).length,r=Object.values(e.elements).filter(m=>m>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:this.getRealmName(c.DivineTransformation)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughHighlyPurifiedMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughAllElementsRequirement",{current:r,required:n,status:r>=n?"✅":"❌"})),e.qi>=t&&s>=a&&r>=n?this.performTribulation("elemental",X[c.NascentSoul],()=>{this.performBreakthrough(c.DivineTransformation)}):console.log(i.t("messages.breakthroughFailed"))}attemptVoidRefinementBreakthrough(){const e=this.gameState.player,t=q[c.DivineTransformation].qi,a=q[c.DivineTransformation].meridians,n=q[c.DivineTransformation].elements,s=e.meridians.filter(m=>m.isOpen&&m.purity>=R.PERFECT).length,r=Object.values(e.elements).filter(m=>m>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:this.getRealmName(c.VoidRefinement)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughPerfectMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughDivineElementsRequirement",{current:r,required:n,status:r>=n?"✅":"❌"})),e.qi>=t&&s>=a&&r>=n?this.performTribulation("karmic",X[c.DivineTransformation],()=>{this.performBreakthrough(c.VoidRefinement)}):console.log(i.t("messages.breakthroughFailed"))}attemptImmortalAscensionBreakthrough(){const e=this.gameState.player,t=q[c.VoidRefinement].qi,a=q[c.VoidRefinement].meridians,n=q[c.VoidRefinement].elements,s=e.meridians.filter(m=>m.isOpen&&m.purity>=R.PERFECT).length,r=Object.values(e.elements).filter(m=>m>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:this.getRealmName(c.ImmortalAscension)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughPerfectMeridianRequirement",{current:s,required:a,status:s>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughDivineElementsRequirement",{current:r,required:n,status:r>=n?"✅":"❌"})),e.qi>=t&&s>=a&&r>=n?this.performTribulation("karmic",X[c.VoidRefinement],()=>{this.performBreakthrough(c.ImmortalAscension)}):console.log(i.t("messages.breakthroughFailed"))}performBreakthrough(e){const t=this.gameState.player,a=t.realm;t.realm=e,t.maxQi*=ge.MAX_QI_MULTIPLIER,t.qi=Math.max(ge.MIN_QI_RETAINED,t.qi*ge.QI_RETENTION_PERCENTAGE),this.enableComplementaryElementCultivation(e),this.gameState.soul.cultivationInsights.realmBreakthroughs.push(a),e>this.gameState.soul.maxRealmAchieved&&(this.gameState.soul.maxRealmAchieved=e),console.log(i.t("messages.breakthroughAdvanced",{realm:this.getRealmName(e)})),console.log(i.t("messages.maxQiIncreased",{maxQi:t.maxQi}))}enableComplementaryElementCultivation(e){const t=this.gameState.player,a=this.getPrimaryElement();if(!a)return;const n=this.getComplementaryElements(a,t.realm-1),r=this.getComplementaryElements(a,e).filter(m=>!n.includes(m));r.length>0&&console.log(i.t("messages.newElementsUnlocked",{elements:r.join(", ")}))}performTribulation(e,t,a){const n=this.gameState.player,s=this.gameState.soul;let r=t;const m=this.getPrimaryElement();m&&e==="elemental"&&(r+=n.elements[m]/1e3),r+=n.talent/1e3,(e==="karmic"||e==="heart_demon")&&(r+=(s.karmicBalance>0?s.karmicBalance:s.karmicBalance*2)/1e3),console.log(i.t("messages.tribulationStart",{type:e.toUpperCase(),rate:(r*100).toFixed(1)})),this.random.chance(r)?(console.log(i.t("messages.tribulationSuccess")),s.cultivationInsights.tribulationSurvivals++,a()):(console.log(i.t("messages.tribulationFailed")),this.handleTribulationFailure(e))}handleTribulationFailure(e){const t=this.gameState.player;switch(e){case"lightning":const a=t.qi*.5;t.qi=Math.max(0,t.qi-a),console.log(i.t("messages.tribulationLightningFailure",{qiLoss:a.toFixed(1)}));break;case"heart_demon":const n=Math.min(2,t.realm);n>0&&(t.realm-=n,t.maxQi/=Math.pow(ge.MAX_QI_MULTIPLIER,n),console.log(i.t("messages.tribulationHeartDemonFailure",{realms:n})));break;case"elemental":const s=this.getPrimaryElement();if(s){const r=t.elements[s]*.3;t.elements[s]=Math.max(0,t.elements[s]-r),console.log(i.t("messages.tribulationElementalFailure",{element:s,affinityLoss:r.toFixed(1)}))}break;case"karmic":this.gameState.soul.karmicBalance-=50,console.log(i.t("messages.tribulationKarmicFailure"));break}}getRealmName(e){return i.getRealmName(e)}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,s])=>{s>t&&(t=s,a=n)}),a}getComplementaryElements(e,t){var r;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},s={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=c.QiCondensation&&a.push(n[e]),t>=c.CoreFormation&&a.push(s[e]),t>=c.DivineTransformation){const m=s[e],h=(r=Object.entries(s).find(([g,p])=>p===m))==null?void 0:r[0];h&&a.push(h)}return a}}class Ye{constructor(e,t,a){this.gameState=e,this.random=t,this.effectProcessor=new $e(e),this.inventorySystem=a,this.healthSystem=new _e(e)}updateInventorySystem(e){this.inventorySystem=e}generateRandomEnemy(){const e=this.random.weightedChoice([c.Mortal,c.QiCondensation,c.FoundationEstablishment],[.5,.3,.2]),t=[i.t("enemies.wildBeast"),i.t("enemies.bandit"),i.t("enemies.spiritBeast"),i.t("enemies.demonCultivator"),i.t("enemies.heavenlyTribulationRemnant"),i.t("enemies.ancientGuardian"),i.t("enemies.chaosSpirit")];let a=20,n=80,s=50,r=150;e>=c.QiCondensation&&(a=200,n=800,s=300,r=1e3),e>=c.FoundationEstablishment&&(a=2e3,n=8e3,s=3e3,r=1e4);const m={id:`enemy-${Date.now()}-${this.random.int(1e3,9999)}`,name:this.random.choice(t),realm:e,qi:this.random.int(a,n),maxQi:this.random.int(s,r),health:this.random.int(50,150),maxHealth:this.random.int(100,200),elements:{[l.Metal]:this.random.int(0,50),[l.Wood]:this.random.int(0,50),[l.Water]:this.random.int(0,50),[l.Fire]:this.random.int(0,50),[l.Earth]:this.random.int(0,50)},combatType:this.random.choice([Ie.Melee,Ie.Ranged]),aggression:this.random.int(30,90),lootTable:this.generateLootTable(e)};return m.qi=Math.min(m.qi,m.maxQi),this.healthSystem.initializeEnemyHealth(m),m}generateLootTable(e){const t=[];if(this.random.chance(.6)){const a=f.determineItemQuality(e,{chance:s=>this.random.chance(s/100)}),n=f.createItem(u.SpiritStone,a,e);t.push({item:n,dropRate:1,quantity:1})}if(this.random.chance(.3)){const a=[l.Metal,l.Wood,l.Water,l.Fire,l.Earth],n=this.random.choice(a),s=f.determineItemQuality(e,{chance:m=>this.random.chance(m/100)}),r=f.createItem(u.Herb,s,e,n);t.push({item:r,dropRate:1,quantity:1})}if(this.random.chance(.1)){const a=f.determineItemQuality(e,{chance:s=>this.random.chance(s/100)}),n=f.createItem(u.Pill,a,e);t.push({item:n,dropRate:1,quantity:1})}return t}resolveCombat(e){const t=this.gameState.player;console.log(i.t("messages.enemyEncounter",{enemy:e.name,realm:i.getRealmName(e.realm),qi:e.qi,maxQi:e.maxQi,health:e.health,maxHealth:e.maxHealth}));const a=this.effectProcessor.calculateCombatPowerBonus(),n=this.effectProcessor.calculateDefenseBonus(),s=this.effectProcessor.calculateCriticalChanceBonus(),r=(t.qi+t.talent*2+t.realm*100+a)*(1+n/100),m=e.qi+e.realm*50,h=this.calculateElementalCombatBonus(t,e),g=this.calculateElementalCombatBonus(e,t);let p=r*h;const A=m*g,P=Math.min(s/100,.5),D=this.random.chance(P);D&&(console.log(i.t("messages.criticalHit")),p*=2);const M=p/(p+A);if(isNaN(M))return{result:"enemy_win",droppedLoot:this.handlePlayerDefeat(e)};if(this.random.chance(M)){const $=this.calculateDamage(t,e,p,A,D),H=this.healthSystem.applyDamage(e,$,V.Physical);if(console.log(i.t("messages.playerAttack",{damage:H,enemy:e.name})),this.healthSystem.isAlive(e)){const N=this.calculateDamage(e,t,A,p,!1),Se=this.healthSystem.applyDamage(t,N,V.Physical);if(console.log(i.t("messages.enemyAttack",{damage:Se,enemy:e.name})),!this.healthSystem.isAlive(t))return{result:"enemy_win",droppedLoot:this.handlePlayerDefeat(e)}}else return{result:"player_win",droppedLoot:this.handlePlayerVictory(e)}}else{const $=this.calculateDamage(e,t,A,p,!1),H=this.healthSystem.applyDamage(t,$,V.Physical);if(console.log(i.t("messages.enemyAttack",{damage:H,enemy:e.name})),!this.healthSystem.isAlive(t))return{result:"enemy_win",droppedLoot:this.handlePlayerDefeat(e)}}return console.log(i.t("messages.combatFlee")),{result:"flee",droppedLoot:[]}}playerAttack(e){const t=this.gameState.player,a=this.effectProcessor.calculateCombatPowerBonus(),n=this.effectProcessor.calculateDefenseBonus(),s=this.effectProcessor.calculateCriticalChanceBonus(),r=(t.qi+t.talent*2+t.realm*100+a)*(1+n/100),m=e.qi+e.realm*50,h=this.calculateElementalCombatBonus(t,e),g=r*h,p=m,A=Math.min(s/100,.5),P=this.random.chance(A);P&&console.log(i.t("messages.criticalHit"));const D=this.calculateDamage(t,e,g,p,P),M=this.healthSystem.applyDamage(e,D,V.Physical);console.log(i.t("messages.playerAttack",{damage:M,enemy:e.name}));const $=!this.healthSystem.isAlive(e);return{damage:M,enemyDefeated:$,enemyHealth:e.health,enemyMaxHealth:e.maxHealth}}enemyAttack(e,t){const a=t.qi+t.realm*50,n=(e.qi+e.talent*2+e.realm*100)*(1+this.effectProcessor.calculateDefenseBonus()/100),s=this.calculateElementalCombatBonus(t,e),r=a*s,m=this.calculateDamage(t,e,r,n,!1),h=this.healthSystem.applyDamage(e,m,V.Physical);console.log(i.t("messages.enemyAttack",{damage:h,enemy:t.name}));const g=!this.healthSystem.isAlive(e);return{damage:h,playerDefeated:g,playerHealth:e.health,playerMaxHealth:e.maxHealth}}attemptFlee(){const e=this.random.chance(.7);return console.log(i.t("messages.combatFlee")),e}calculateElementalCombatBonus(e,t){let a=null,n=0;if(Object.entries(e.elements||{}).forEach(([h,g])=>{typeof g=="number"&&g>n&&(n=g,a=h)}),!a)return 1;let s=null;if(n=0,Object.entries(t.elements||{}).forEach(([h,g])=>{typeof g=="number"&&g>n&&(n=g,s=h)}),!s)return 1;const r={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},m={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};return r[a]===s?1.25:m[a]===s?.75:1}handlePlayerVictory(e){const t=this.gameState.player,a=Math.floor(e.maxQi*.1),n=this.random.int(1,3);t.qi=Math.min(t.qi+a,t.maxQi),t.talent=Math.min(100,t.talent+n);const s=this.processLoot(e.lootTable);return console.log(i.t("messages.combatVictory",{enemy:e.name,qi:a,talent:n})),s}handlePlayerDefeat(e){const t=this.gameState.player,a=e.qi+e.realm*50,n=t.qi+t.realm*100,s=a/Math.max(n,1),r=Math.floor(t.maxQi*.05*s),m=Math.max(10,Math.min(r,Math.floor(t.qi*.3)));if(t.qi=Math.max(0,t.qi-m),this.random.chance(.3)){const h=this.random.int(1,5),g=this.random.choice(t.meridians.filter(p=>p.isOpen));g&&(g.purity=Math.max(0,g.purity-h),console.log(i.t("messages.meridianDamage",{meridian:g.name,damage:h})))}return console.log(i.t("messages.combatDefeat",{enemy:e.name,qiLoss:m})),[]}processLoot(e){const t=[];return e.forEach((a,n)=>{if(this.random.chance(a.dropRate)){const s={...a.item,quantity:a.quantity};if(!this.inventorySystem)return console.error("ERROR: InventorySystem is undefined in CombatSystem!"),t;this.inventorySystem.addItem(s),t.push(s)}}),t}calculateDamage(e,t,a,n,s){const r=a/(a+n);let m=Math.floor(r*50)+10;s&&(m*=2);const h=e.realm-t.realm;h>0?m*=1+h*.25:h<0&&(m*=Math.max(.25,1+h*.5));const g=this.random.float(.8,1.2);return m=Math.floor(m*g),Math.max(1,m)}getCombatDifficulty(e){const t=this.gameState.player,a=t.qi+t.talent*2+t.realm*100,s=(e.qi+e.realm*50)/a;return s<.5?"easy":s<1?"medium":s<1.5?"hard":"deadly"}}class ze{constructor(e,t){this.gameState=e,this.random=t}processRandomEvent(){const e=[{name:i.t("events.fortuitousEncounter"),chance:.25,effect:()=>this.fortuitousEncounter()},{name:i.t("events.tribulationChallenge"),chance:.25,effect:()=>this.tribulationChallenge()},{name:i.t("events.karmicReward"),chance:.25,effect:()=>this.karmicReward()},{name:i.t("events.enemyEncounter"),chance:.25,effect:()=>this.enemyEncounter()}],t=this.random.weightedChoice(e,e.map(a=>a.chance));console.log(i.t("messages.randomEvent",{event:t.name})),t.effect()}fortuitousEncounter(){const e=this.random.int(1,5);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+e),console.log(i.t("messages.fortuitousEncounter",{talent:e}))}tribulationChallenge(){if(this.random.chance(.7)){const e=this.random.int(50,200);this.gameState.player.qi=Math.min(this.gameState.player.qi+e,this.gameState.player.maxQi),console.log(i.t("messages.tribulationSuccess",{qi:e}))}else{const e=Math.floor(this.gameState.player.qi*.1);this.gameState.player.qi=Math.max(0,this.gameState.player.qi-e),console.log(i.t("messages.tribulationFailure",{qiLoss:e}))}}karmicReward(){const e=this.random.int(1,10);this.gameState.soul.karmicBalance+=e,console.log(i.t("messages.karmicReward",{karma:e}))}enemyEncounter(){console.log(i.t("messages.enemyEncounterGeneric"))}processLifeMilestone(e){e===50?this.midLifeCrisis():e===100?this.centuryMilestone():e===200&&this.longevityBreakthrough(),this.random.chance(.05)&&this.processRandomEvent()}midLifeCrisis(){if(console.log(i.t("events.midLifeCrisis")),this.random.chance(.6)){const e=this.random.int(2,8);this.gameState.player.talent+=e,console.log(i.t("messages.midLifeCrisisPositive",{talent:e}))}else{const e=Math.floor(this.gameState.player.qi*.05);this.gameState.player.qi=Math.max(0,this.gameState.player.qi-e),console.log(i.t("messages.midLifeCrisisNegative",{qiLoss:e}))}}centuryMilestone(){console.log(i.t("events.centuryMilestone"));const e=this.random.int(1,3);if(this.gameState.player.talent=Math.min(100,this.gameState.player.talent+e),this.random.chance(.3)){const t=this.random.int(5,15);this.gameState.soul.karmicBalance+=t,console.log(i.t("messages.centuryMilestoneKarmic",{talent:e,karma:t}))}else console.log(i.t("messages.centuryMilestone",{talent:e}))}longevityBreakthrough(){console.log(i.t("events.longevityBreakthrough"));const e=Math.floor(this.gameState.player.maxQi*.1);this.gameState.player.maxQi+=e,this.gameState.player.qi=Math.min(this.gameState.player.qi+e,this.gameState.player.maxQi);const t=this.random.int(3,10);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+t),console.log(i.t("messages.longevityBreakthrough",{qi:e,talent:t}))}processRealmEvent(e){switch(e){case 0:this.processMortalRealmEvents();break;case 1:this.processQiCondensationEvents();break;case 2:this.processFoundationEstablishmentEvents();break}}processMortalRealmEvents(){if(this.random.chance(.1)){console.log(i.t("events.spiritualAwakening"));const e=this.random.int(1,3);this.gameState.player.talent+=e,console.log(i.t("messages.spiritualAwakening",{talent:e}))}}processQiCondensationEvents(){if(this.random.chance(.08)){console.log(i.t("events.meridianInsight"));const e=this.gameState.player.meridians.filter(t=>t.isOpen);if(e.length>0){const t=this.random.choice(e),a=this.random.int(5,15);t.purity=Math.min(100,t.purity+a),console.log(i.t("messages.meridianInsight",{meridian:t.name,purity:a}))}}}processFoundationEstablishmentEvents(){if(this.random.chance(.06)){console.log(i.t("events.elementalHarmony"));const e=this.getPrimaryElement();if(e){const t=this.random.int(5,10);this.gameState.player.elements[e]=Math.min(100,this.gameState.player.elements[e]+t),console.log(i.t("messages.elementalHarmony",{element:e,affinity:t}))}}}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,s])=>{typeof s=="number"&&s>t&&(t=s,a=n)}),a}processDeath(){console.log(i.t("events.deathEvent"));const e=this.gameState.soul;this.random.chance(.2)&&this.specialReincarnation(),this.resetPlayerForNewLife(),console.log(i.t("messages.reincarnationComplete",{lifetime:e.lifetimeCount+1}))}specialReincarnation(){console.log(i.t("events.specialReincarnation"));const e=[()=>{const a=this.random.int(5,15);this.gameState.player.talent+=a,console.log(i.t("messages.specialReincarnationTalent",{talent:a}))},()=>{const a=this.random.int(10,30);this.gameState.soul.karmicBalance+=a,console.log(i.t("messages.specialReincarnationKarma",{karma:a}))},()=>{const a=Object.keys(this.gameState.player.elements),n=this.random.choice(a),s=this.random.int(10,25);this.gameState.player.elements[n]+=s,console.log(i.t("messages.specialReincarnationElement",{element:n,affinity:s}))}];this.random.choice(e)()}resetPlayerForNewLife(){const e=this.gameState.player,t=this.gameState.soul;t.lifetimeCount++,t.totalLifetime+=e.lifetime,e.realm=0,e.qi=0,e.maxQi=100,e.lifetime=0,e.meridians.forEach(a=>{a.isOpen&&(a.purity=Math.max(10,a.purity*.1))}),Object.keys(e.elements).forEach(a=>{const n=a;e.elements[n]=Math.max(0,e.elements[n]*.2)}),e.talent=Math.max(10,e.talent*.5)}}class Ht{constructor(){this.SAVE_KEY_PREFIX="culsim-save",this.MAX_SAVE_SLOTS=5}saveGame(e,t=0){try{if(t<0||t>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${t}. Must be between 0 and ${this.MAX_SAVE_SLOTS-1}`),!1;const a=`${this.SAVE_KEY_PREFIX}-${t}`,s={state:this.serializeGameState(e),timestamp:Date.now(),version:"1.0.0"};return localStorage.setItem(a,JSON.stringify(s)),!0}catch(a){return console.error("Failed to save game:",a),!1}}loadGame(e=0){try{if(e<0||e>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${e}. Must be between 0 and ${this.MAX_SAVE_SLOTS-1}`),null;const t=`${this.SAVE_KEY_PREFIX}-${e}`,a=localStorage.getItem(t);if(!a)return console.log(`No save found in slot ${e}`),null;const n=JSON.parse(a);if(!this.validateSaveData(n))return console.error("Invalid save data structure"),null;const s=this.deserializeGameState(n.state);return console.log(`Game loaded from slot ${e} (saved: ${new Date(n.timestamp).toLocaleString()})`),s}catch(t){return console.error("Failed to load game:",t),null}}getAvailableSaveSlots(){const e=[];for(let t=0;t<this.MAX_SAVE_SLOTS;t++){const a=`${this.SAVE_KEY_PREFIX}-${t}`,n=localStorage.getItem(a);if(n)try{const s=JSON.parse(n);this.validateSaveData(s)?e.push({slot:t,timestamp:s.timestamp,hasData:!0}):e.push({slot:t,timestamp:0,hasData:!1})}catch{e.push({slot:t,timestamp:0,hasData:!1})}else e.push({slot:t,timestamp:0,hasData:!1})}return e}deleteSaveSlot(e){try{if(e<0||e>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${e}`),!1;const t=`${this.SAVE_KEY_PREFIX}-${e}`;return localStorage.removeItem(t),console.log(`Save slot ${e} deleted`),!0}catch(t){return console.error("Failed to delete save slot:",t),!1}}exportSaveData(e=0){try{const t=`${this.SAVE_KEY_PREFIX}-${e}`,a=localStorage.getItem(t);return a||null}catch(t){return console.error("Failed to export save data:",t),null}}importSaveData(e,t=0){try{if(t<0||t>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${t}`),!1;const a=JSON.parse(e);if(!this.validateSaveData(a))return console.error("Invalid save data format"),!1;const n=`${this.SAVE_KEY_PREFIX}-${t}`;return localStorage.setItem(n,e),console.log(`Save data imported to slot ${t}`),!0}catch(a){return console.error("Failed to import save data:",a),!1}}autoSave(e){return this.saveGame(e,0)}serializeGameState(e){return JSON.stringify(e,null,2)}deserializeGameState(e){const t=JSON.parse(e),a={player:{id:"player-1",name:"Cultivator",realm:0,qi:0,maxQi:100,health:100,maxHealth:100,meridians:[],elements:{metal:0,wood:0,water:0,fire:0,earth:0},talent:50,items:[],lifetime:0,currentLocationId:"starting-village",energy:100,karma:0},soul:{id:"soul-1",lifetimeCount:1,totalLifetime:0,cultivationInsights:{realmBreakthroughs:[],techniqueMastery:[],elementalUnderstanding:{metal:0,wood:0,water:0,fire:0,earth:0},tribulationSurvivals:0},karmicBalance:0,maxRealmAchieved:0,items:[]},time:0,seed:0,worldMap:[]};return{player:{...a.player,...t.player},soul:{...a.soul,...t.soul},time:t.time||a.time,isRunning:!1,seed:t.seed||a.seed,worldMap:t.worldMap||a.worldMap}}validateSaveData(e){try{return e&&typeof e=="object"&&e.state&&typeof e.timestamp=="number"&&e.version&&e.timestamp>0}catch{return!1}}clearAllSaveData(){try{for(let e=0;e<this.MAX_SAVE_SLOTS;e++){const t=`${this.SAVE_KEY_PREFIX}-${e}`;localStorage.removeItem(t)}return console.log("All save data cleared"),!0}catch(e){return console.error("Failed to clear save data:",e),!1}}getSaveStatistics(){const t=this.getAvailableSaveSlots().filter(n=>n.hasData),a=t.map(n=>n.timestamp).filter(n=>n>0);return{totalSlots:this.MAX_SAVE_SLOTS,usedSlots:t.length,oldestSave:a.length>0?Math.min(...a):null,newestSave:a.length>0?Math.max(...a):null}}}class ee{constructor(e,t,a){this.inventorySystem=a,this.gameController=new Qt(e,()=>this.update(),t,()=>this.saveGame());const n=this.gameController.getStateReference(),s=this.gameController.getRandom();this.cultivationSystem=new Ue(n),this.meridianSystem=new Ve(n,s),this.elementSystem=new Ke(n),this.breakthroughSystem=new je(n,s),this.combatSystem=new Ye(n,s,a),this.eventSystem=new ze(n,s),this.healthSystem=new _e(n),this.travelSystem=new it(n,s,this.eventSystem,this.combatSystem),this.saveLoadSystem=new Ht}start(){this.gameController.start()}stop(){this.gameController.stop()}update(){const e=this.gameController.getStateReference();this.cultivationSystem.processCultivation(),this.healthSystem.regenerateHealth(e.player),this.gameController.getRandom().chance(.02)&&this.eventSystem.processRandomEvent()}cultivate(){const e=this.cultivationSystem.cultivate();console.log(i.t("ui.manualCultivationComplete",{qi:e.toFixed(2)}))}attemptBreakthrough(){this.breakthroughSystem.attemptBreakthrough()}attemptMeridianOpening(e){this.meridianSystem.attemptMeridianOpening(e)}attemptMeridianBreakthrough(e){this.meridianSystem.attemptMeridianBreakthrough(e)}getPrimaryElement(){return this.elementSystem.getPrimaryElement()}getComplementaryElements(e,t){return this.elementSystem.getComplementaryElements(e,t)}getMeridianEffectiveCap(e){return this.meridianSystem.getMeridianEffectiveCap(e)}getRealmName(e){return this.gameController.getRealmName(e)}getState(){return this.gameController.getState()}saveGame(){const e=this.gameController.getState();this.saveLoadSystem.saveGame(e)}loadGame(){const e=this.saveLoadSystem.loadGame();return e?(console.log("🔄 Loading game state:",{meridians:e.player.meridians.map((t,a)=>({index:a,name:t.name,isOpen:t.isOpen,purity:t.purity}))}),this.gameController.setState(e),this.reinitializeSubsystems(e),!0):!1}reinitializeSubsystems(e){const t=this.gameController.getRandom();this.cultivationSystem=new Ue(e),this.meridianSystem=new Ve(e,t),this.elementSystem=new Ke(e),this.breakthroughSystem=new je(e,t),this.combatSystem=new Ye(e,t,this.inventorySystem),this.eventSystem=new ze(e,t)}generateRandomEnemy(){return this.combatSystem.generateRandomEnemy()}resolveCombat(e){return this.combatSystem.resolveCombat(e)}playerAttack(e){return this.combatSystem.playerAttack(e)}enemyAttack(e){const t=this.getState().player;return this.combatSystem.enemyAttack(t,e)}attemptFlee(){return this.combatSystem.attemptFlee()}handlePlayerVictory(e){return this.combatSystem.handlePlayerVictory(e)}handlePlayerDefeat(e){return this.combatSystem.handlePlayerDefeat(e)}calculateQiGatheringSpeed(){return this.cultivationSystem.calculateQiGatheringSpeed()}getTravelSystem(){return this.travelSystem}debugAddQi(){const e=this.gameController.getState(),t=e.player.maxQi*.1;e.player.qi=Math.min(e.player.qi+t,e.player.maxQi),console.log(`🐛 Debug: Added ${t} qi to player. Current qi: ${e.player.qi.toFixed(1)}/${e.player.maxQi}`)}debugAddMeridianProgress(e=10){this.meridianSystem.debugAddMeridianProgress(e)}debugAddElementProgress(e=10){this.elementSystem.debugAddElementProgress(e)}updateInventorySystem(e){this.inventorySystem=e,this.combatSystem.updateInventorySystem(e)}}class oe{constructor(e){this.maxSlots=100,this.storageExpansions=0,this.player=e,this.initializeInventory()}initializeInventory(){this.player.inventory||(this.player.inventory={items:[],equippedItems:{[S.Weapon]:void 0,[S.Armor]:void 0,[S.Amulet]:void 0,[S.Charm]:void 0,[S.Manual]:void 0,[S.SpiritStone]:void 0},storageCapacity:this.maxSlots,weight:0,maxWeight:1e3,organization:{bags:[],categories:this.initializeCategories()}}),this.updateCategories()}initializeCategories(){return{[u.Weapon]:[],[u.Armor]:[],[u.Pill]:[],[u.Herb]:[],[u.SpiritStone]:[],[u.Charm]:[],[u.Manual]:[],[u.Drug]:[],[u.Poison]:[],[u.BeastPart]:[],artifacts:[],resources:[],insights:[]}}addItem(e){if(console.log("DEBUG: InventorySystem.addItem called with:",f.getTranslatedItemName(e),e.category),this.isInventoryFull())return console.log("DEBUG: Inventory is full"),!1;if(console.log("DEBUG: Inventory not full, checking if stackable"),e.stackable){console.log("DEBUG: Item is stackable");const t=this.findStackableItem(e);if(t)return console.log("DEBUG: Found existing stack, updating quantity"),t.quantity+=e.quantity,this.updateWeight(),console.log("DEBUG: Stack updated successfully"),!0}return console.log("DEBUG: Adding as new item"),this.player.inventory.items.push(e),console.log("DEBUG: Item pushed to inventory"),this.updateWeight(),console.log("DEBUG: Weight updated"),this.updateCategories(),console.log("DEBUG: Categories updated"),console.log("DEBUG: Item added successfully"),!0}removeItem(e,t=1){const a=this.player.inventory.items.findIndex(s=>s.id===e);if(a===-1)return!1;const n=this.player.inventory.items[a];return n.stackable&&n.quantity>t?n.quantity-=t:this.player.inventory.items.splice(a,1),this.updateWeight(),this.updateCategories(),!0}findStackableItem(e){return this.player.inventory.items.find(t=>t.stackable&&t.nameQuality===e.nameQuality&&t.nameBase===e.nameBase&&t.nameElement===e.nameElement&&t.nameRealm===e.nameRealm&&t.category===e.category&&t.quality===e.quality&&t.element===e.element)||null}isInventoryFull(){return this.player.inventory.items.length>=this.getMaxCapacity()}getMaxCapacity(){return this.maxSlots+this.storageExpansions*25}updateWeight(){this.player.inventory.weight=this.player.inventory.items.reduce((e,t)=>e+(t.stackable?t.quantity:1),0)}updateCategories(){console.log("DEBUG: updateCategories called"),this.player.inventory.organization.categories=this.initializeCategories(),console.log("DEBUG: Categories reset");for(const e of this.player.inventory.items)console.log("DEBUG: Processing item:",f.getTranslatedItemName(e),"category:",e.category),e.category in this.player.inventory.organization.categories?(console.log("DEBUG: Category exists, pushing item"),this.player.inventory.organization.categories[e.category].push(e)):console.log("DEBUG: Category does not exist for item:",e.category);console.log("DEBUG: updateCategories completed")}getItemsByCategory(e){return this.player.inventory.organization.categories[e]||[]}getItems(e,t){let a=[...this.player.inventory.items];return e&&(a=this.applyFilters(a,e)),t&&(a=this.applySorting(a,t)),a}applyFilters(e,t){return e.filter(a=>{if(t.category&&a.category!==t.category||t.quality&&a.quality<t.quality||t.element&&a.element!==t.element||t.realm&&a.realm>t.realm)return!1;if(t.searchText){const n=t.searchText.toLowerCase();if(!f.getTranslatedItemName(a).toLowerCase().includes(n)&&!f.getTranslatedItemDescription(a).toLowerCase().includes(n))return!1}return!0})}applySorting(e,t){return e.sort((a,n)=>{let s=0;switch(t.by){case"name":s=f.getTranslatedItemName(a).localeCompare(f.getTranslatedItemName(n));break;case"quality":s=n.quality-a.quality;break;case"value":s=n.value-a.value;break;case"category":s=a.category.localeCompare(n.category);break;case"quantity":s=n.quantity-a.quantity;break}return t.direction==="desc"?-s:s})}equipItem(e,t){const a=this.player.inventory.items.find(n=>n.id===e);return!a||!this.canEquipToSlot(a,t)||this.player.inventory.equippedItems[t]&&!this.unequipItem(t)?!1:(this.removeItem(e),this.player.inventory.equippedItems[t]=a,!0)}unequipItem(e){const t=this.player.inventory.equippedItems[e];return!t||!this.addItem(t)?!1:(delete this.player.inventory.equippedItems[e],!0)}canEquipToSlot(e,t){switch(t){case S.Weapon:return e.category===u.Weapon;case S.Armor:return e.category===u.Armor;case S.Amulet:case S.Charm:return e.category===u.Charm;case S.Manual:return e.category===u.Manual;case S.SpiritStone:return e.category===u.SpiritStone;default:return!1}}useItem(e){const t=this.player.inventory.items.find(a=>a.id===e);return!t||!this.isConsumable(t)?!1:(this.applyItemEffects(t),this.removeItem(e,1),!0)}isConsumable(e){return[u.Pill,u.Drug,u.Herb].includes(e.category)}applyItemEffects(e){console.log(`Applying effects from ${f.getTranslatedItemName(e)}:`,e.effects)}getEquippedItems(){return this.player.inventory.equippedItems}getInventorySummary(){const e=this.player.inventory.items,t=Object.keys(this.player.inventory.organization.categories).reduce((a,n)=>(a[n]=this.player.inventory.organization.categories[n].length,a),{});return{totalItems:e.reduce((a,n)=>a+n.quantity,0),uniqueItems:e.length,totalValue:e.reduce((a,n)=>a+n.value*n.quantity,0),weight:this.player.inventory.weight,capacity:this.getMaxCapacity(),categories:t}}expandCapacity(e=25){this.storageExpansions+=Math.ceil(e/25),this.player.inventory.storageCapacity=this.getMaxCapacity()}getPlayer(){return this.player}}class xe{constructor(e){this.inventorySystem=e,this.player=e.getPlayer()}useItem(e,t){const a=this.findItem(e);if(!a)return{success:!1,message:"Item not found in inventory"};switch(a.category){case u.Pill:case u.Drug:case u.Herb:return this.consumeItem(a);case u.Weapon:case u.Armor:case u.Charm:return this.equipItem(a);case u.Manual:return this.studyManual(a);case u.SpiritStone:return t==="enhance"?this.enhanceSpiritStone(a):this.absorbSpiritStone(a);default:return{success:!1,message:"This item cannot be used directly"}}}consumeItem(e){if(e.realm>this.player.realm)return{success:!1,message:`Your cultivation realm is too low to safely consume this ${e.category.toLowerCase()}`};const t=this.applyEffects(e.effects,e);return this.inventorySystem.removeItem(e.id,1),{success:!0,message:`Consumed ${f.getTranslatedItemName(e)}`,effects:t}}equipItem(e){const t=this.getEquipmentSlotForItem(e);return t?e.realm>this.player.realm?{success:!1,message:`Your cultivation realm is too low to equip this ${e.category.toLowerCase()}`}:this.inventorySystem.equipItem(e.id,t)?{success:!0,message:`Equipped ${f.getTranslatedItemName(e)} to ${t}`,effects:e.effects}:{success:!1,message:"Failed to equip item (inventory full or invalid slot)"}:{success:!1,message:"Cannot determine equipment slot for this item"}}studyManual(e){const t=this.applyEffects(e.effects,e);return this.inventorySystem.removeItem(e.id,1),{success:!0,message:`Studied ${f.getTranslatedItemName(e)} and gained cultivation insights`,effects:t}}absorbSpiritStone(e){const t=this.applyEffects(e.effects,e);if(e.durability){e.durability--;const n=[.2,.15,.1,.07,.05,.03][e.quality]||.2,s=e.effects.find(r=>r.type==="qi_absorption"&&!r.isPercentage);if(s){const r=s.value,m=Math.max(1,Math.floor(r*n));s.value=Math.max(1,r-m)}if(e.durability<=0)return this.inventorySystem.removeItem(e.id,1),{success:!0,message:`Absorbed the last qi from ${f.getTranslatedItemName(e)} - spirit stone depleted`,effects:t}}return{success:!0,message:`Absorbed qi from ${f.getTranslatedItemName(e)}`,effects:t}}enhanceSpiritStone(e){return this.inventorySystem.getEquippedItems()[S.SpiritStone]?{success:!1,message:"You already have a spirit stone equipped for qi gathering enhancement"}:this.inventorySystem.equipItem(e.id,S.SpiritStone)?{success:!0,message:`Enhanced qi gathering with ${f.getTranslatedItemName(e)}. Automatic qi absorption increased!`}:{success:!1,message:"Failed to equip spirit stone"}}unequipItem(e){return this.inventorySystem.unequipItem(e)?{success:!0,message:`Unequipped item from ${e}`}:{success:!1,message:"No item equipped in this slot"}}combineItems(e){if(e.length<2)return{success:!1,message:"Need at least 2 items to combine"};const t=e.map(a=>this.findItem(a)).filter(a=>a!==null);if(t.length!==e.length)return{success:!1,message:"One or more items not found"};if(!this.canCombineItems(t))return{success:!1,message:"These items cannot be combined"};if(this.areItemsIdentical(t)){const a=t[0],n=t.reduce((r,m)=>r+m.quantity,0);t.forEach(r=>this.inventorySystem.removeItem(r.id,r.quantity));const s={...a,quantity:Math.min(n,a.maxStack||99)};return this.inventorySystem.addItem(s),{success:!0,message:`Combined ${t.length} stacks into ${s.quantity} ${f.getTranslatedItemName(a)}`,result:s}}return{success:!1,message:"Advanced combining not yet implemented"}}applyEffects(e,t){const a=[];for(const n of e)try{this.applySingleEffect(n,t),a.push(n)}catch(s){console.error(`Failed to apply effect ${n.type}:`,s)}return a}applySingleEffect(e,t){const a=e.isPercentage?this.getBaseStatForEffect(e.type)*e.value/100:e.value;switch(e.type){case"qi_absorption":this.player.qi=Math.min(this.player.maxQi,this.player.qi+a);break;case"health_recovery":if(this.player.health!==void 0&&this.player.maxHealth!==void 0){const n=Math.min(this.player.maxHealth-this.player.health,a);this.player.health+=n,console.log(i.t("messages.healthRecovered",{amount:n}))}break;case"cultivation_speed":console.log(i.t("messages.cultivationSpeedIncreased",{value:a,duration:e.duration}));break;case"combat_power":console.log(i.t("messages.combatPowerIncreased",{value:a}));break;case"element_boost":e.element&&this.player.elements[e.element]!==void 0&&(this.player.elements[e.element]=Math.min(100,this.player.elements[e.element]+a));break;case"comprehension":console.log(i.t("messages.comprehensionIncreased",{value:a,duration:e.duration}));break;case"luck":console.log(i.t("messages.luckIncreased",{value:a,duration:e.duration}));break;default:console.log(i.t("messages.effectApplied",{effectType:e.type,value:a}))}}getBaseStatForEffect(e){switch(e){case"qi_absorption":return this.player.maxQi;case"health_recovery":return this.player.maxHealth||100;case"cultivation_speed":return 100;case"combat_power":return 100;default:return 100}}getEquipmentSlotForItem(e){const a={[u.Weapon]:[S.Weapon],[u.Armor]:[S.Armor],[u.Charm]:[S.Charm,S.Amulet],[u.SpiritStone]:[S.SpiritStone],[u.Manual]:[S.Manual]}[e.category];if(!a||a.length===0)return null;if(a.length===1)return a[0];const n=this.inventorySystem.getEquippedItems();for(const s of a)if(!n[s])return s;return a[0]}findItem(e){return this.inventorySystem.getItems().find(t=>t.id===e)||null}canCombineItems(e){return this.areItemsIdentical(e)}areItemsIdentical(e){if(e.length<2)return!1;const t=e[0];return e.every(a=>a.nameQuality===t.nameQuality&&a.nameBase===t.nameBase&&a.nameElement===t.nameElement&&a.nameRealm===t.nameRealm&&a.category===t.category&&a.quality===t.quality&&a.element===t.element&&a.realm===t.realm)}getItemTooltip(e){let t=`${f.getTranslatedItemName(e)}
`;return t+=`Quality: ${v[e.quality]}
`,t+=`Category: ${e.category.replace("_"," ")}
`,e.element&&(t+=`Element: ${e.element}
`),t+=`Realm: ${c[e.realm]}
`,t+=`Value: ${e.value} essence
`,e.durability&&e.maxDurability&&(t+=`Durability: ${e.durability}/${e.maxDurability}
`),e.quantity>1&&(t+=`Quantity: ${e.quantity}
`),t+=`
Effects:
`,e.effects.forEach(a=>{const n=a.isPercentage?`${a.value}%`:a.value,s=a.element?` (${a.element})`:"",r=a.duration?` for ${a.duration} days`:"";t+=`• ${a.type.replace("_"," ")}: ${n}${s}${r}
`}),t+=`
${f.getTranslatedItemDescription(e)}`,t}getEquippedEffects(){const e=this.inventorySystem.getEquippedItems(),t={[S.Weapon]:[],[S.Armor]:[],[S.Amulet]:[],[S.Charm]:[],[S.Manual]:[],[S.SpiritStone]:[]};return Object.entries(e).forEach(([a,n])=>{n&&(t[a]=n.effects)}),t}}const st=document.getElementById("player-status"),ot=document.getElementById("cultivation-info"),Ne=document.getElementById("meridian-info");document.getElementById("meridian-controls");const pe=document.getElementById("meridian-select"),ye=document.getElementById("unlock-meridian-btn"),Wt=document.getElementById("elements-info"),rt=document.getElementById("time-info"),J=document.getElementById("game-output"),lt=document.getElementById("cultivate-btn"),ct=document.getElementById("breakthrough-btn"),mt=document.querySelectorAll(".nav-tab"),Xe=document.querySelector(".game-info"),Je=document.getElementById("combat-page"),Ce=document.getElementById("inventory-page"),Ze=document.getElementById("travel-page"),Me=document.getElementById("enemy-display"),K=document.getElementById("find-enemy-btn"),T=document.getElementById("attack-btn"),G=document.getElementById("flee-btn"),Le=document.getElementById("combat-stats"),Te=document.getElementById("combat-loot"),ut=document.getElementById("inventory-search"),dt=document.getElementById("category-filter"),ht=document.getElementById("quality-filter"),gt=document.getElementById("sort-select"),Ut=document.getElementById("total-items"),Vt=document.getElementById("unique-items"),Kt=document.getElementById("total-value"),jt=document.getElementById("inventory-capacity"),Ae=document.getElementById("item-grid"),we=document.getElementById("item-details"),Fe=document.getElementById("item-actions"),et=document.getElementById("equipment-slots"),tt=document.getElementById("current-location-display"),pt=document.getElementById("travel-map"),ke=document.getElementById("locations-list"),Re=document.getElementById("travel-controls"),De={};document.getElementById("artifact-count");document.getElementById("inventory-space");document.getElementById("artifact-grid");document.getElementById("artifact-details");let E=null,Q=[];function yt(o){mt.forEach(e=>{e.classList.remove("active"),e.dataset.page===o&&e.classList.add("active")}),Xe.classList.toggle("active",o==="overview"),Je.classList.toggle("active",o!=="overview"),Ce.classList.toggle("active",o==="inventory"),Ze.classList.toggle("active",o==="travel"),Xe.style.display=o==="overview"?"grid":"none",Je.style.display=o==="combat"?"block":"none",Ce.style.display=o==="inventory"?"block":"none",Ze.style.display=o==="travel"?"block":"none",o==="inventory"&&(Y(),i.applyTranslations()),o==="travel"&&(It(),i.applyTranslations())}function ft(){et.innerHTML="",Object.values(S).forEach(e=>{const t=document.createElement("div");t.className="equipment-slot",t.setAttribute("data-slot",e);const a=document.createElement("div");a.className="slot-label";const n=i.t(`equipmentSlots.${e.replace(" ","")}`);a.textContent=n;const s=document.createElement("div");s.className="slot-content",s.id=`${e}-slot`,s.innerHTML='<div class="equipment-empty">'+i.t("ui.empty")+"</div>",t.appendChild(a),t.appendChild(s),et.appendChild(t),De[e]=s})}window.generateEquipmentSlots=ft;const Yt=document.getElementById("game-title");document.getElementById("player-status-title");document.getElementById("cultivation-title");document.getElementById("meridians-title");document.getElementById("elements-title");document.getElementById("time-title");document.getElementById("debug-title");const vt=document.getElementById("debug-add-qi-btn"),Et=document.getElementById("debug-add-meridian-btn"),St=document.getElementById("debug-add-element-btn"),bt=document.getElementById("debug-add-spirit-stone-btn");function at(o){if(o<30)return`${o} ${i.t("ui.days")}`;if(o<365){const e=Math.floor(o/30),t=o%30;return t===0?`${e} ${i.t("ui.months")}`:`${e} ${i.t("ui.months")}, ${t} ${i.t("ui.days")}`}else{const e=Math.floor(o/365),t=o%365,a=Math.floor(t/30),n=t%30;let s=`${e} ${i.t("ui.years")}`;return a>0&&(s+=`, ${a} ${i.t("ui.months")}`),n>0&&(s+=`, ${n} ${i.t("ui.days")}`),s}}function se(){if(!E){Me.innerHTML='<div class="no-enemy">'+i.t("messages.noEnemyEncountered")+"</div>",K.style.display="inline-block",T.style.display="none",T.disabled=!0,G.disabled=!0;return}const o=`
    <div class="enemy-info">
      <div class="enemy-name">${E.name}</div>
      <div class="enemy-stats">
        <div class="enemy-stat">${i.t("status.realm")}: ${d.getRealmName(E.realm)}</div>
        <div class="enemy-stat">Qi: ${E.qi.toFixed(0)}/${E.maxQi.toFixed(0)}</div>
        <div class="enemy-stat">${i.t("status.health")}: ${E.health.toFixed(0)}/${E.maxHealth.toFixed(0)}</div>
        <div class="enemy-stat">${i.t("status.type")}: ${i.getCombatTypeName(E.combatType)}</div>
        <div class="enemy-stat">${i.t("status.aggression")}: ${E.aggression}%</div>
      </div>
    </div>
  `;Me.innerHTML=o,K.style.display="none",T.style.display="inline-block",T.disabled=!1,G.disabled=!1}function fe(){if(!E){Le.textContent=i.t("messages.noActiveCombat");return}const o=d.getState().player,e=d.getState().soul,t=o.qi+o.talent*2+o.realm*100,a=E.qi+E.realm*50;Le.innerHTML=`
    <div style="margin-bottom: 10px;">
      <strong>${i.t("status.player")}:</strong> ${o.name}<br>
      <strong>${i.t("status.realm")}:</strong> ${i.getRealmName(o.realm)}<br>
      <strong>${i.t("status.health")}:</strong> ${o.health} / ${o.maxHealth}<br>
      <strong>${i.t("status.qi")}:</strong> ${o.qi.toFixed(1)} / ${o.maxQi}<br>
      <strong>${i.t("status.meridians")}:</strong> ${o.meridians.filter(n=>n.isOpen).length}/12<br>
      <strong>${i.t("status.talent")}:</strong> ${o.talent}/100<br>
      <strong>${i.t("status.karma")}:</strong> ${e.karmicBalance>0?"+":""}${e.karmicBalance}
    </div>
    <div>
      <strong>${i.t("messages.yourPower")}</strong> ${t.toFixed(0)}<br>
      <strong>${i.t("messages.enemyPower")}</strong> ${a.toFixed(0)}<br>
      <strong>${i.t("messages.winChance")}</strong> ${(t/(t+a)*100).toFixed(1)}%
    </div>
  `}function ve(){if(Q.length===0){Te.textContent=i.t("messages.noLootAvailable");return}const o=Q.map(e=>{let t="�";switch(e.category){case"spirit_stone":t="💎";break;case"pill":t="💊";break;case"herb":t="🌿";break;case"weapon":t="⚔️";break;case"armor":t="🛡️";break;case"charm":t="📿";break;case"manual":t="📚";break}return`${t} ${f.getTranslatedItemName(e)}: ${f.getTranslatedItemDescription(e)} (Value: ${e.value})`}).join("<br>");Te.innerHTML=o}function zt(){E=d.generateRandomEnemy(),Q=[],se(),fe(),ve(),console.log(i.t("messages.foundEnemy",{enemy:E.name})),K.style.display="none",T.style.display="inline-block",T.disabled=!1,G.disabled=!1}function Xt(){if(!E)return;T.disabled=!0,G.disabled=!0;const o=d.playerAttack(E);if(se(),o.enemyDefeated){Q=d.handlePlayerVictory(E),console.log(i.t("messages.victoryGainedLoot",{count:Q.length})),E=null,se(),fe(),ve(),K.style.display="inline-block",T.style.display="none",T.disabled=!0,G.disabled=!0;return}d.enemyAttack(E).playerDefeated&&(Q=d.handlePlayerDefeat(E),console.log(i.t("messages.defeatedBy",{enemy:E.name})),E=null,K.style.display="inline-block",T.style.display="none",T.disabled=!0,G.disabled=!0),se(),fe(),ve()}function Jt(){if(!E)return;d.attemptFlee()?(console.log(i.t("messages.successfullyFled",{enemy:E.name})),E=null,K.style.display="inline-block",T.style.display="none",T.disabled=!0,G.disabled=!0):(console.log(i.t("messages.failedToFlee",{enemy:E.name})),d.enemyAttack(E).playerDefeated&&(Q=d.handlePlayerDefeat(E),console.log(i.t("messages.defeatedBy",{enemy:E.name})),E=null,K.style.display="inline-block",T.style.display="none",T.disabled=!0,G.disabled=!0)),Q=[],se(),fe(),ve()}function Y(){if(!d||!C)return;const o=C.getInventorySummary();Ut.textContent=o.totalItems.toString(),Vt.textContent=o.uniqueItems.toString(),Kt.textContent=`${o.totalValue.toString()} $`,jt.textContent=`${o.weight}/${o.capacity}`,Zt();const e=ut.value,t=dt.value,a=ht.value,n=gt.value,s={searchText:e||void 0,category:t||void 0,quality:a?v[a]:void 0},r={by:n,direction:"asc"},m=C.getItems(s,r);ea(m)}function Zt(){if(!d)return;const e=d.getState().player.inventory;if(!e)return;const t=e.equippedItems;Object.values(S).forEach(a=>{const n=De[a];if(!n)return;const s=t[a];s?(n.innerHTML=`
        <div class="equipment-item" data-item-id="${s.id}">
          <div class="item-name quality-${v[s.quality].toLowerCase()}">${f.getTranslatedItemName(s)}</div>
          <div class="item-quality quality-${v[s.quality].toLowerCase()}">${v[s.quality]}</div>
        </div>
      `,n.classList.add("equipped")):(n.innerHTML='<div class="equipment-empty">'+i.t("ui.empty")+"</div>",n.classList.remove("equipped"))})}function ea(o){if(o.length===0){Ae.innerHTML='<div class="no-items">'+i.t("ui.noItemsMatchFilters")+"</div>",we.innerHTML=i.t("ui.selectItemToViewDetails"),Fe.innerHTML="";return}const e=o.map(t=>`
    <div class="item-card" data-item-id="${t.id}">
      <div class="item-name quality-${v[t.quality].toLowerCase()}">${f.getTranslatedItemName(t)}</div>
      <div class="item-category">${i.getCategoryName(t.category)}</div>
      <div class="item-quantity">${t.stackable?`${t.quantity}`:""}</div>
      <div class="item-value">${t.value}$</div>
    </div>
  `).join("");Ae.innerHTML=e}function ta(o){var s,r;if(!C||!j)return;const t=C.getItems().find(m=>m.id===o);if(!t)return;document.querySelectorAll(".item-card").forEach(m=>{m.classList.remove("selected")}),(s=document.querySelector(`[data-item-id="${o}"]`))==null||s.classList.add("selected");const a=((r=t.effects)==null?void 0:r.map(m=>`${i.getEffectTypeName(m.type)}: ${m.value}${m.element?` (${i.getElementName(m.element)})`:""}`).join("<br>"))||i.t("ui.noSpecialEffects");we.innerHTML=`
    <div class="item-detail-header">
      <h3>${f.getTranslatedItemName(t)}</h3>
      <div class="item-detail-quality quality-${v[t.quality].toLowerCase()}">${i.t("ui.rarity")}: ${i.getQualityName(t.quality)}</div>
    </div>
    <div class="item-detail-category">${i.t("ui.category")}: ${i.getCategoryName(t.category)}</div>
    <div class="item-detail-description">${f.getTranslatedItemDescription(t)}</div>
    <div class="item-detail-effects">${a}</div>
    <div class="item-detail-value">${i.t("ui.value")} ${t.value}💰</div>
    ${t.durability!==void 0&&t.maxDurability!==void 0?`<div class="item-detail-durability">${i.t("ui.durability")} ${t.durability}/${t.maxDurability}</div>`:""}
    ${t.stackable?`<div class="item-detail-quantity">${i.t("ui.quantity")} ${t.quantity}</div>`:""}
  `;let n="";(t.category===u.Pill||t.category===u.Drug||t.category===u.Herb)&&(n+='<button class="action-btn" data-action="use">'+i.t("ui.use")+"</button>"),(t.category===u.Weapon||t.category===u.Armor||t.category===u.Charm)&&(n+='<button class="action-btn" data-action="equip">'+i.t("ui.equip")+"</button>"),t.category===u.Manual&&(n+='<button class="action-btn" data-action="study">'+i.t("ui.study")+"</button>"),t.category===u.SpiritStone&&(n+='<button class="action-btn" data-action="absorb">'+i.t("ui.absorb")+"</button>",n+='<button class="action-btn" data-action="enhance">'+i.t("ui.enhanceQiGathering")+"</button>"),t.stackable&&t.quantity>1&&(n+='<button class="action-btn" data-action="drop">'+i.t("ui.drop")+"</button>"),Fe.innerHTML=n||i.t("ui.noActionsAvailable"),document.querySelectorAll(".action-btn").forEach(m=>{m.addEventListener("click",()=>{const h=m.dataset.action;aa(t,h)})})}function aa(o,e){if(!j)return;let t;switch(e){case"use":case"equip":case"study":case"absorb":case"enhance":t=j.useItem(o.id,e);break;case"drop":t={success:C.removeItem(o.id,1),message:"Item dropped"};break;default:t={success:!1,message:"Unknown action"}}t.success?(I(`✅ ${t.message}`),Y(),b(),(e==="use"||e==="equip"||e==="study"||e==="absorb"||e==="enhance"||e==="drop")&&(we.innerHTML="Select an item to view details",Fe.innerHTML="",document.querySelectorAll(".item-card").forEach(a=>{a.classList.remove("selected")}))):I(`❌ ${t.message}`)}const te=document.createElement("select");te.id="language-select";const na=[{code:"en",name:"English"},{code:"vi",name:"Tiếng Việt"}];na.forEach(o=>{const e=document.createElement("option");e.value=o.code,e.textContent=o.name,o.code===i.getLanguage()&&(e.selected=!0),te.appendChild(e)});te.addEventListener("change",async o=>{const t=o.target.value;await i.setLanguage(t)});const re=document.createElement("button");re.textContent=i.t("ui.saveGame");re.id="save-btn";const le=document.createElement("button");le.textContent=i.t("ui.loadGame");le.id="load-btn";const ce=document.createElement("button");ce.textContent=i.t("ui.clearSavedGame");ce.id="clear-btn";const qt=document.querySelector(".top-controls"),Ee=document.createElement("div");Ee.className="control-group";Ee.innerHTML='<label for="language-select" style="margin-right: 5px;">🌐</label>';Ee.appendChild(te);const me=document.createElement("div");me.className="control-group";me.appendChild(re);me.appendChild(le);me.appendChild(ce);qt.appendChild(Ee);qt.appendChild(me);function ia(){document.querySelectorAll(".card-toggle").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),e.dataset.card;const a=e.closest(".info-card"),n=a==null?void 0:a.querySelector(".card-content");a&&n&&(a.classList.contains("card-collapsed")?(a.classList.remove("card-collapsed"),e.textContent="−"):(a.classList.add("card-collapsed"),e.textContent="+"))})})}let C,j;function It(){if(!d)return;const o=d.getTravelSystem(),e=o.getLocationInfo(d.getState().player.currentLocationId);e?tt.innerHTML=`
      <div class="location-info-card">
        <h4>${e.name}</h4>
        <p>${e.description}</p>
        <div class="location-properties">
          <span class="location-type">${i.t("travelPage.locationType")}: ${i.t(`locationTypes.${e.type}`)}</span>
        </div>
      </div>
    `:tt.innerHTML='<div class="no-location">'+i.t("messages.noLocationSet")+"</div>";const t=o.getAvailableDestinations();t.length>0?ke.innerHTML=t.map((a,n)=>{const s=o.getTravelInfo(a.id);let r="#666",m="12px";return a.id===d.getState().player.currentLocationId?(r="#4CAF50",m="16px"):a.discovered&&(r="#2196F3",m="14px"),`
        <div class="location-card" data-location-id="${a.id}">
          <div class="location-header">
            <div class="location-marker" style="background-color: ${r}; width: ${m}; height: ${m}; border-radius: 50%; display: inline-block; margin-right: 8px; border: 2px solid rgba(255,255,255,0.5);"></div>
            <h4 style="display: inline-block; margin: 0;">${a.name}</h4>
          </div>
          <p>${a.description}</p>
          <div class="location-details">
            <span class="travel-time">${i.t("travelPage.travelTime")}: ${(s==null?void 0:s.time)||0} ${i.t("travelPage.days")}</span>
            <span class="travel-cost">${i.t("status.energyCost")}: ${(s==null?void 0:s.cost)||0}</span>
            <span class="danger-level">${i.t("status.dangerLevel")}: ${(s==null?void 0:s.danger)||0}/10</span>
          </div>
          <button class="travel-btn" data-location-id="${a.id}">${i.t("ui.travel")}</button>
        </div>
      `}).join(""):ke.innerHTML='<div class="no-locations">'+i.t("messages.noLocationsAvailable")+"</div>",pt.innerHTML="",sa(),Re.innerHTML='<div class="no-travel-target">'+i.t("messages.selectLocationToTravel")+"</div>"}function sa(){if(!d)return;const o=d.getTravelSystem(),e=o.getWorldMap(),t=o.getCurrentLocationId();console.log("updateWorldMap called - Current location:",t),console.log("World map locations:",e.map(y=>`${y.id} (discovered: ${y.discovered})`));const a=800,n=500,s=60;let r=1/0,m=-1/0,h=1/0,g=-1/0;e.forEach(y=>{r=Math.min(r,y.position.x),m=Math.max(m,y.position.x),h=Math.min(h,y.position.y),g=Math.max(g,y.position.y)});const p=m-r||1,A=g-h||1,P=(a-2*s)/p,D=(n-2*s)/A,M=Math.min(P,D),$=s+(a-2*s-p*M)/2-r*M,H=s+(n-2*s-A*M)/2-h*M;let N=`<svg width="${a}" height="${n}" viewBox="0 0 ${a} ${n}" style="width: 100%; height: auto;">
    <!-- Background that can be replaced with an image -->
    <defs>
      <pattern id="mapBackground" patternUnits="userSpaceOnUse" width="100" height="100">
        <rect width="100" height="100" fill="rgba(30, 60, 114, 0.3)"/>
        <circle cx="20" cy="20" r="1" fill="rgba(255, 255, 255, 0.1)"/>
        <circle cx="80" cy="40" r="1" fill="rgba(255, 255, 255, 0.1)"/>
        <circle cx="40" cy="80" r="1" fill="rgba(255, 255, 255, 0.1)"/>
        <circle cx="60" cy="60" r="1" fill="rgba(255, 255, 255, 0.1)"/>
      </pattern>
    </defs>
    <rect id="world-map-background" width="100%" height="100%" fill="url(#mapBackground)" stroke="rgba(255, 255, 255, 0.2)" stroke-width="2" rx="8"/>
  `;e.forEach(y=>{y.connectedLocations.forEach(w=>{const L=e.find(k=>k.id===w.targetLocationId);if(L&&(y.discovered||L.discovered)){const k=y.position.x*M+$,B=y.position.y*M+H,W=L.position.x*M+$,F=L.position.y*M+H,Oe=y.discovered&&L.discovered?"#4a9eff":"#666",be=y.discovered&&L.discovered?"2":"1",ne=y.discovered&&L.discovered?"0.6":"0.3";N+=`<line x1="${k}" y1="${B}" x2="${W}" y2="${F}" stroke="${Oe}" stroke-width="${be}" opacity="${ne}" />`}})}),e.forEach(y=>{const w=y.position.x*M+$,L=y.position.y*M+H;let k="#666",B="#999",W="2",F="12";if(console.log(`Processing location ${y.id}: current=${y.id===t}, discovered=${y.discovered}`),y.id===t?(k="#4CAF50",B="#66BB6A",W="5",F="20",console.log(`Setting ${y.id} as current location (green)`)):y.discovered?(k="#2196F3",B="#64B5F6",W="4",F="18",console.log(`Setting ${y.id} as discovered (blue)`)):(k="#666",B="#999",W="3",F="12",console.log(`Setting ${y.id} as undiscovered (gray)`)),N+=`<circle cx="${w}" cy="${L}" r="${F}" fill="${k}" stroke="${B}" stroke-width="${W}" class="map-location-marker" data-location-id="${y.id}" style="cursor: pointer;" />`,y.id===t||y.discovered||k==="#2196F3"){const be=y.name||(y.nameKey?i.t(y.nameKey):y.id),ne=y.id===t?"16":"14",Mt="bold",Lt="#ffffff",Tt="#000000",At="1.5",kt=be.toString().split(" "),Ge=15,ue=[];let O="";kt.forEach(z=>{(O+z).length<=Ge&&O.length>0?O+=" "+z:(O+z).length<=Ge?O+=z:(O&&ue.push(O),O=z)}),O&&ue.push(O);const Rt=30,Pt=L-parseInt(F)-10-(ue.length-1)*(parseInt(ne)+2),Bt=Math.max(Rt,Pt);ue.forEach((z,$t)=>{const _t=Bt+$t*(parseInt(ne)+2);N+=`<text x="${w}" y="${_t}" text-anchor="middle" font-size="${ne}" font-weight="${Mt}" fill="${Lt}" stroke="${Tt}" stroke-width="${At}" font-family="Arial, sans-serif" style="pointer-events: none; user-select: none; paint-order: stroke fill;">${z}</text>`})}}),N+="</svg>";const Se=`
    <div class="map-legend">
      <div class="legend-title">${i.t("travelPage.mapLegend")}</div>
      <div class="legend-items">
        <div class="legend-item">
          <div class="legend-marker current"></div>
          <span>${i.t("travelPage.currentLocation")}</span>
        </div>
        <div class="legend-item">
          <div class="legend-marker discovered"></div>
          <span>${i.t("travelPage.discoveredLocations")}</span>
        </div>
        <div class="legend-item">
          <div class="legend-marker undiscovered"></div>
          <span>${i.t("travelPage.undiscoveredLocations")}</span>
        </div>
      </div>
    </div>
  `;pt.innerHTML=N+Se,document.querySelectorAll(".map-location-marker").forEach(y=>{y.addEventListener("click",w=>{const L=w.target.getAttribute("data-location-id");if(L){document.querySelectorAll(".location-card").forEach(B=>{B.classList.remove("map-highlighted")}),document.querySelectorAll(".map-location-marker").forEach(B=>{B.style.filter=""});const k=document.querySelector(`.location-card[data-location-id="${L}"]`);k&&k.classList.add("map-highlighted"),w.target.style.filter="brightness(1.5) drop-shadow(0 0 15px currentColor)",nt(L)}})}),document.querySelectorAll(".location-card").forEach(y=>{y.addEventListener("click",w=>{var k;const L=w.target.getAttribute("data-location-id")||((k=w.target.closest(".location-card"))==null?void 0:k.getAttribute("data-location-id"));if(L){document.querySelectorAll(".location-card").forEach(F=>{F.classList.remove("map-highlighted")}),document.querySelectorAll(".map-location-marker").forEach(F=>{F.style.filter=""});const B=w.target.closest(".location-card");B&&B.classList.add("map-highlighted");const W=document.querySelector(`.map-location-marker[data-location-id="${L}"]`);W&&(W.style.filter="brightness(1.5) drop-shadow(0 0 15px currentColor)"),nt(L)}})})}function nt(o){if(!d)return;const e=d.getTravelSystem(),t=e.getLocationInfo(o),a=e.getTravelInfo(o);if(!t||!a)return;Re.innerHTML=`
    <div class="travel-target-info">
      <h4>${i.t("travelPage.travelTo")}: ${t.name}</h4>
      <p>${t.description}</p>
      <div class="travel-details">
        <span class="travel-time">${i.t("travelPage.travelTime")}: ${a.time} ${i.t("travelPage.days")}</span>
        <span class="travel-cost">${i.t("status.energyCost")}: ${a.cost}</span>
        <span class="danger-level">${i.t("status.dangerLevel")}: ${a.danger}/10</span>
      </div>
      <button class="travel-btn" data-location-id="${o}">${i.t("travelPage.travel")}</button>
    </div>
  `;const n=Re.querySelector(".travel-btn");n&&n.addEventListener("click",()=>Ct(o))}function Ct(o){if(!d)return;console.log("Attempting to travel to:",o),console.log("Current location before travel:",d.getState().player.currentLocationId);const t=d.getTravelSystem().travelToLocation(o);console.log("Travel result:",t);const a=d.getState();console.log("Current location after travel:",a.player.currentLocationId),t.success?(J.textContent+=`
`+i.t("messages.travelSuccessful"),It(),b()):J.textContent+=`
`+i.t("messages.travelFailed")}let d,ae=!1;function oa(){return typeof window<"u"&&window.localStorage?localStorage.getItem("culsim-save-0")!==null:!1}function ra(){if(oa()){I(i.t("ui.savedGameDetected"));const e=new ee(void 0,b).getState().player;if(C=new oe(e),d=new ee(void 0,b,C),d.loadGame()){const a=d.getState().player,n=new oe(a);d.updateInventorySystem(n),C=n,j=new xe(C),d.start(),ae=!0,I(i.t("ui.gameLoaded")),b()}else I(i.t("ui.startingNewGame")),Pe()}else I(i.t("ui.welcomeMessage")),I(i.t("ui.startingNewGame")),Pe()}function Pe(){const e=new ee(void 0,b).getState().player;C=new oe(e),d=new ee(void 0,b,C),j=new xe(C),d.getTravelSystem().generateWorldMap(),d.start(),ae=!0,I(i.t("ui.gameStarted")),b()}function b(){if(!d)return;const o=d.getState(),e=o.player,t=o.soul;st.innerHTML=`
    <strong>${i.t("status.player")}:</strong> ${e.name}<br>
    <strong>${i.t("status.realm")}:</strong> ${i.getRealmName(e.realm)}<br>
    <strong>${i.t("status.health")}:</strong> ${e.health} / ${e.maxHealth}<br>
    <strong>${i.t("status.qi")}:</strong> ${e.qi.toFixed(1)} / ${e.maxQi}<br>
    <strong>${i.t("ui.qiGathering")}:</strong> ${d.calculateQiGatheringSpeed().toFixed(3)} ${i.t("ui.qiPerDay")}<br>
    <strong>${i.t("status.meridians")}:</strong> ${e.meridians.filter(r=>r.isOpen).length}/12 ${i.t("ui.meridiansOpen")}<br>
    <strong>${i.t("status.talent")}:</strong> ${e.talent}/100<br>
    <strong>${i.t("status.karma")}:</strong> ${t.karmicBalance>0?"+":""}${t.karmicBalance}
  `,ot.innerHTML=`
    <strong>${i.t("status.lifetime")}:</strong> ${at(e.lifetime)}<br>
    <strong>${i.t("status.reincarnation")}:</strong> ${t.lifetimeCount}<br>
    <strong>${i.t("ui.maxRealm")}:</strong> ${i.getRealmName(t.maxRealmAchieved)}<br>
    <strong>${i.t("ui.breakthroughs")}:</strong> ${t.cultivationInsights.realmBreakthroughs.length}
  `,Ne.innerHTML=e.meridians.map((r,m)=>{const h=r.isOpen?"🟢":"🔴",g=r.isOpen?` (${r.purity.toFixed(1)}%)`:"",p=i.getMeridianName(m),A=p.length>15?p.substring(0,12)+"...":p,P=r.isOpen?"":` (${i.t("ui.meridianReq",{qi:x.OPENING_BASE_COST+m*x.OPENING_COST_INCREMENT})})`,M=r.isOpen&&r.purity>=d.getMeridianEffectiveCap(r)&&r.breakthroughStage<3?(()=>{const $=(m+1)*U.QI_COST_MULTIPLIER,H=1+r.breakthroughStage*10,N=$*H;return`<button class="meridian-breakthrough-btn" data-meridian-index="${m}" style="background: #007bff; color: white; border: none; padding: 2px 6px; margin-right: 5px; cursor: pointer; border-radius: 3px; font-size: 0.8em;">${N} ${i.t("ui.qiUnit")}</button>`})():"";return`${h} ${M}${A}${g}${P}`}).join("<br>");const a=d.getPrimaryElement(),n=a?d.getComplementaryElements(a,e.realm):[];Wt.innerHTML=`
    <strong>${i.getElementName(0)}:</strong> ${e.elements.metal.toFixed(1)}% ${a===l.Metal?"(Primary)":n.includes(l.Metal)?"(Complementary)":""}<br>
    <strong>${i.getElementName(1)}:</strong> ${e.elements.wood.toFixed(1)}% ${a===l.Wood?"(Primary)":n.includes(l.Wood)?"(Complementary)":""}<br>
    <strong>${i.getElementName(2)}:</strong> ${e.elements.water.toFixed(1)}% ${a===l.Water?"(Primary)":n.includes(l.Water)?"(Complementary)":""}<br>
    <strong>${i.getElementName(3)}:</strong> ${e.elements.fire.toFixed(1)}% ${a===l.Fire?"(Primary)":n.includes(l.Fire)?"(Complementary)":""}<br>
    <strong>${i.getElementName(4)}:</strong> ${e.elements.earth.toFixed(1)}% ${a===l.Earth?"(Primary)":n.includes(l.Earth)?"(Complementary)":""}
  `;const s=Math.floor(o.time);rt.innerHTML=`
    <strong>${i.t("status.time")}:</strong> ${at(s)}<br>
    <strong>${i.t("status.gameSpeed")}:</strong> ${ae?"▶️":"⏸️"} ${ae?i.t("status.running"):i.t("status.paused")}
  `,la(),Ce.classList.contains("active")&&Y()}function Z(o,e){const t=document.getElementById(o);if(t){const a=t.querySelector(".title-text");a?a.textContent=e:t.textContent=e}}function Be(){Yt.textContent=i.t("ui.gameTitle"),Z("player-status-title",i.t("ui.playerStatus")),Z("cultivation-title",i.t("ui.cultivationInfo")),Z("meridians-title",i.t("ui.meridianInfo")),Z("elements-title",i.t("status.elements")),Z("time-title",i.t("ui.timeInfo")),Z("debug-title",i.t("ui.debugTitle")),lt.textContent=i.t("ui.cultivate"),ct.textContent=i.t("ui.breakthrough"),ye.textContent=i.t("ui.unlockSelectedMeridian"),K.textContent=i.t("messages.findEnemy"),T.textContent=i.t("ui.attack"),G.textContent=i.t("ui.flee"),vt.textContent=i.t("ui.addQi"),Et.textContent=i.t("ui.addMeridians"),St.textContent=i.t("ui.addElements"),bt.textContent=i.t("ui.addSpiritStone"),re.textContent=i.t("ui.saveGame"),le.textContent=i.t("ui.loadGame"),ce.textContent=i.t("ui.clearSavedGame");const o=document.querySelector('.nav-tab[data-page="overview"]'),e=document.querySelector('.nav-tab[data-page="combat"]'),t=document.querySelector('.nav-tab[data-page="inventory"]'),a=document.querySelector('.nav-tab[data-page="travel"]');o&&(o.textContent=i.t("ui.overview")),e&&(e.textContent=i.t("ui.combat")),t&&(t.textContent=i.t("ui.inventory")),a&&(a.textContent=i.t("ui.travel"));const n=document.querySelector('#combat-page h3[data-i18n="ui.combatArena"]'),s=document.querySelector('#combat-page h3[data-i18n="ui.combatStats"]'),r=document.querySelector('#combat-page h3[data-i18n="ui.lootAndRewards"]');n&&(n.textContent="⚔️ "+i.t("ui.combatArena")),s&&(s.textContent="📊 "+i.t("ui.combatStats")),r&&(r.textContent="🎁 "+i.t("ui.lootAndRewards")),d||(st.textContent=i.t("ui.loading"),ot.textContent=i.t("ui.loading"),Ne.textContent=i.t("ui.loading"),rt.textContent=i.t("ui.loading")),E||(Me.innerHTML='<div class="no-enemy">'+i.t("messages.noEnemyEncountered")+"</div>"),E||(Le.textContent=i.t("messages.noActiveCombat")),(!Q||Q.length===0)&&(Te.textContent=i.t("messages.noLootAvailable"))}function la(){if(!d)return;const e=d.getState().player.meridians.map((t,a)=>({meridian:t,index:a})).filter(({meridian:t})=>!t.isOpen);if(pe.innerHTML="",e.length===0){const t=document.createElement("option");t.textContent=i.t("ui.allMeridiansOpen"),t.disabled=!0,pe.appendChild(t),ye.disabled=!0}else e.forEach(({meridian:t,index:a})=>{const n=document.createElement("option");n.value=a.toString(),n.textContent=`${i.getMeridianName(a)} (${i.t("ui.meridianReq",{qi:x.OPENING_BASE_COST+a*x.OPENING_COST_INCREMENT})})`,pe.appendChild(n)}),ye.disabled=!1}function I(o){J.textContent+=o+`
`,J.scrollTop=J.scrollHeight,J.style.border="2px solid rgba(74, 158, 255, 0.8)",setTimeout(()=>{J.style.border="2px solid rgba(255, 255, 255, 0.3)"},200)}const ca=console.log;console.log=(...o)=>{const e=o.join(" ");I(e),ca(...o)};lt.addEventListener("click",()=>{d&&(d.cultivate(),b())});ct.addEventListener("click",()=>{d&&(d.attemptBreakthrough(),b())});vt.addEventListener("click",()=>{d&&(d.debugAddQi(),b())});Et.addEventListener("click",()=>{d&&(d.debugAddMeridianProgress(10),b())});St.addEventListener("click",()=>{d&&(d.debugAddElementProgress(10),b())});bt.addEventListener("click",()=>{if(!d||!C)return;const o=f.createItem(u.SpiritStone,v.Rare,c.Mortal),e=C.addItem(o);I(e?`✅ Added ${f.getTranslatedItemName(o)} to inventory`:"❌ Failed to add spirit stone - inventory full"),b()});re.addEventListener("click",()=>{d&&(d.saveGame(),b())});le.addEventListener("click",()=>{if(!d){const t=new ee(void 0,b).getState().player;C=new oe(t),d=new ee(void 0,b,C)}if(d.loadGame()){const e=d.getState().player,t=new oe(e);d.updateInventorySystem(t),C=t,j=new xe(C),b(),I(i.t("ui.gameLoaded"))}else I(i.t("ui.noSavedGame"))});ce.addEventListener("click",()=>{typeof window<"u"&&window.localStorage&&confirm(i.t("ui.confirmClearSavedGame"))&&(d&&ae&&(d.stop(),ae=!1),localStorage.removeItem("culsim-save"),Pe(),I(i.t("ui.savedGameCleared")))});ye.addEventListener("click",()=>{if(!d)return;const o=parseInt(pe.value);if(isNaN(o))return;const e=d.getState().player;if(o>=0&&o<e.meridians.length&&!e.meridians[o].isOpen){const t=x.OPENING_BASE_COST+o*x.OPENING_COST_INCREMENT;e.qi>=t?(d.attemptMeridianOpening(o),b()):I(i.t("ui.notEnoughQi",{qi:t,meridian:i.getMeridianName(o)}))}});Ne.addEventListener("click",o=>{const e=o.target;if(e.classList.contains("meridian-breakthrough-btn")){const t=parseInt(e.getAttribute("data-meridian-index")||"-1");t>=0&&d&&(d.attemptMeridianBreakthrough(t),b())}});te.addEventListener("change",()=>{const o=te.value;i.setLanguage(o),Be(),b()});mt.forEach(o=>{o.addEventListener("click",()=>{const e=o.dataset.page;e&&yt(e)})});K.addEventListener("click",()=>{d&&zt()});T.addEventListener("click",()=>{d&&Xt()});G.addEventListener("click",()=>{d&&Jt()});ut.addEventListener("input",()=>{Y()});dt.addEventListener("change",()=>{Y()});ht.addEventListener("change",()=>{Y()});gt.addEventListener("change",()=>{Y()});function ma(){Object.values(S).forEach(o=>{const e=De[o];e&&e.addEventListener("click",()=>{if(!j)return;const t=j.unequipItem(o);t.success?(I(`✅ ${t.message}`),Y(),b()):I(`❌ ${t.message}`)})})}ia();ft();ma();Ae.addEventListener("click",o=>{const t=o.target.closest(".item-card");t&&t.dataset.itemId&&ta(t.dataset.itemId)});ke.addEventListener("click",o=>{const e=o.target;e.classList.contains("travel-btn")&&e.dataset.locationId&&Ct(e.dataset.locationId)});i.waitForTranslations().then(()=>{i.setLanguageChangeCallback(()=>{Be(),b()}),yt("overview"),Be(),b(),I("🏮 Welcome to CULSIM - Cultivation Simulator"),I("📜 Game log initialized"),ra()});
