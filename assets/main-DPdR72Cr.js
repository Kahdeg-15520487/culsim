(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function t(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(n){if(n.ep)return;n.ep=!0;const i=t(n);fetch(n.href,i)}})();var m=(r=>(r[r.Mortal=0]="Mortal",r[r.QiCondensation=1]="QiCondensation",r[r.FoundationEstablishment=2]="FoundationEstablishment",r[r.CoreFormation=3]="CoreFormation",r[r.NascentSoul=4]="NascentSoul",r[r.DivineTransformation=5]="DivineTransformation",r[r.VoidRefinement=6]="VoidRefinement",r[r.ImmortalAscension=7]="ImmortalAscension",r))(m||{}),l=(r=>(r.Metal="metal",r.Wood="wood",r.Water="water",r.Fire="fire",r.Earth="earth",r))(l||{}),f=(r=>(r[r.Common=0]="Common",r[r.Uncommon=1]="Uncommon",r[r.Rare=2]="Rare",r[r.Epic=3]="Epic",r[r.Legendary=4]="Legendary",r[r.Mythical=5]="Mythical",r))(f||{}),u=(r=>(r.Armor="armor",r.Weapon="weapon",r.Pill="pill",r.Drug="drug",r.Poison="poison",r.Herb="herb",r.BeastPart="beast_part",r.SpiritStone="spirit_stone",r.Charm="charm",r.Manual="manual",r))(u||{}),me=(r=>(r.Melee="melee",r.Ranged="ranged",r))(me||{}),N=(r=>(r.Physical="physical",r.Spiritual="spiritual",r.Elemental="elemental",r))(N||{}),E=(r=>(r.Weapon="weapon",r.Armor="armor",r.Amulet="amulet",r.Charm="charm",r.Manual="manual",r.SpiritStone="spirit stone",r))(E||{});const Z={0:1,1:1.5,2:2.5,3:4,4:6,5:10},Ce={0:1,1:2,2:5,3:10,4:20,5:40,6:80,7:150},oe={armor:{defense:10,durability:100,value:50},weapon:{attack:15,durability:80,value:75},pill:{effectStrength:25,duration:7,value:30},drug:{effectStrength:20,duration:3,value:40},poison:{effectStrength:30,duration:5,value:60},spirit_stone:{qiStorage:10,durability:10,value:20},herb:{qiContent:5,value:15},beast_part:{effectStrength:35,value:45},charm:{effectStrength:10,duration:30,value:100},manual:{knowledge:25,value:200}},tt={0:60,1:25,2:10,3:4,4:.9,5:.1},Te={en:{ui:{playerStatus:"Player Status",cultivationInfo:"Cultivation",meridianInfo:"Meridians",meridianControls:"Meridian Controls",timeInfo:"Time",gameOutput:"Game Output",startGame:"Start Game",stopGame:"Stop Game",pauseGame:"Pause",cultivate:"Cultivate",saveGame:"Save Game",loadGame:"Load Game",clearSavedGame:"Clear Saved Game",unlockMeridian:"Unlock Meridian",unlockSelectedMeridian:"Unlock Selected Meridian",allMeridiansOpen:"All meridians open!",meridianReq:"Req: {qi} qi",gameStarted:"Game started!",gameStopped:"Game stopped.",gameLoaded:"Game loaded successfully!",noSavedGame:"No saved game found.",savedGameCleared:"Saved game cleared!",confirmClearSavedGame:"Are you sure you want to clear the saved game? This action cannot be undone.",notEnoughQi:"Not enough qi! Need {qi} qi to attempt opening {meridian}.",meridianOpened:"Successfully opened {meridian} meridian!",loading:"Loading...",gameTitle:"🏮 CULSIM - Cultivation Simulator 🏮",maxRealm:"Max Realm",breakthroughs:"Breakthroughs",qiGathering:"Qi Gathering",days:"days",years:"years",months:"months",meridiansOpen:"open",qiPerDay:"qi/day",welcomeMessage:"Welcome to CULSIM!",savedGameDetected:"Saved game detected. Auto-loading...",startingNewGame:"Starting new cultivation journey...",autoLoadingGame:"Auto-loading saved game...",autoSaved:"🔄 Auto-saved game progress!",manualCultivationComplete:"✨ Manual cultivation complete! Gained {qi} qi.",breakthrough:"Breakthrough",alreadyMaxRealm:"Already at maximum realm!",breakthroughNotAvailable:"Breakthrough not available for current realm.",debugPanel:"Debug Panel",addQi:"Add 10 Qi",debugTitle:"Debug Panel",addCultivation:"Add Cultivation (10 Qi + 10% Meridians + 10% Elements)",addMeridians:"Add 10% Meridians",addElements:"Add 10% Elements",addSpiritStone:"Add Superior Spirit Stone",qiUnit:"qi",attack:"Attack",flee:"Flee",combatArena:"Combat Arena",combatStats:"Combat Stats",lootAndRewards:"Loot & Rewards",overview:"Overview",combat:"Combat",inventory:"Inventory",equipment:"Equipment",inventoryStats:"Inventory Stats",items:"Items",itemDetails:"Item Details",searchItems:"Search items...",allCategories:"All Categories",allQualities:"All Qualities",sortByName:"Name",sortByQuality:"Quality",sortByValue:"Value",sortByQuantity:"Quantity",totalItems:"Items:",uniqueItems:"Unique:",totalValue:"Value:",capacity:"Capacity:",noItemsInInventory:"No items in inventory",noItemsMatchFilters:"No items match your filters",selectItemToViewDetails:"Select an item to view details",empty:"Empty",noSpecialEffects:"No special effects",value:"Value:",durability:"Durability:",quantity:"Quantity:",rarity:"Rarity",category:"Category",use:"Use",equip:"Equip",study:"Study",absorb:"Absorb",enhanceQiGathering:"Enhance Qi Gathering",drop:"Drop",noActionsAvailable:"No actions available"},status:{player:"Player",realm:"Realm",health:"Health",qi:"Qi",talent:"Talent",lifetime:"Lifetime",reincarnation:"Reincarnation",karma:"Karma",meridians:"Meridians",elements:"Elements",time:"Time",gameSpeed:"Game Speed",running:"Running",paused:"Paused",type:"Type",aggression:"Aggression"},combatTypes:{melee:"Melee",ranged:"Ranged"},realms:{mortal:"Mortal",qiCondensation:"Qi Condensation",foundationEstablishment:"Foundation Establishment",coreFormation:"Core Formation",nascentSoul:"Nascent Soul",divineTransformation:"Divine Transformation",voidRefinement:"Void Refinement",immortalAscension:"Immortal Ascension"},meridians:{governorVessel:"Governor Vessel",conceptionVessel:"Conception Vessel",stomach:"Stomach",spleen:"Spleen",heart:"Heart",smallIntestine:"Small Intestine",bladder:"Bladder",kidney:"Kidney",pericardium:"Pericardium",tripleBurner:"Triple Burner",gallbladder:"Gallbladder",liver:"Liver"},elements:{metal:"Metal (金)",wood:"Wood (木)",water:"Water (水)",fire:"Fire (火)",earth:"Earth (土)"},enemies:{wildBeast:"Wild Beast",bandit:"Bandit",spiritBeast:"Spirit Beast",demonCultivator:"Demon Cultivator",heavenlyTribulationRemnant:"Heavenly Tribulation Remnant",ancientGuardian:"Ancient Guardian",chaosSpirit:"Chaos Spirit"},loot:{spiritStone:"Spirit Stone",spiritStoneDescription:"A stone containing spiritual energy",elementalCrystal:"{element} Crystal",elementalCrystalDescription:"A crystal infused with {element} energy",ancientScroll:"Ancient Scroll",ancientScrollDescription:"Contains insights into cultivation techniques"},events:{fortuitousEncounter:"Fortuitous Encounter",tribulationChallenge:"Tribulation Challenge",karmicReward:"Karmic Reward",enemyEncounter:"Enemy Encounter"},messages:{startingJourney:`🌅 Starting your cultivation journey...
`,cultivationSessionEnded:"🏮 Cultivation session ended.",statusUpdate:"📊 Status Update (Day {day})",day:"Day",meridianAttemptFailed:"❌ Failed to open {meridian} meridian.",meridianPurified:"✨ {meridian} purified to {purity}%",meridianOpeningFailed:"❌ Failed to open {meridian} meridian. Success chance: {chance}%. Consumed {qi} qi.",meridianBreakthroughAttempt:"🔥 Attempting meridian breakthrough for {meridian}. Cost: {qi} qi. Success chance: {chance}%",meridianBreakthroughSuccess:"🎉 Meridian breakthrough successful! {meridian} purity increased from {oldPurity}% to {newPurity}%. Consumed {qi} qi.",meridianBreakthroughStageAdvanced:"⭐ {meridian} breakthrough stage advanced from {oldStage} to {newStage}!",meridianBreakthroughFailed:"💔 Meridian breakthrough failed. {meridian} purity decreased by {purityLoss}%. Consumed {qi} qi.",meridianBreakthroughNotEnoughQi:"❌ Not enough qi for meridian breakthrough. Required: {qi} qi.",meridianBreakthroughNotOpen:"❌ Cannot breakthrough {meridian} - meridian is not open.",meridianBreakthroughNotReady:"❌ Cannot breakthrough {meridian} - requires {required}% purity first.",meridianNotPurified:"❌ Cannot breakthrough {meridian} - requires {required}% purity. Current: {purity}%. Continue cultivating to purify meridians.",meridianBreakthroughAlreadyPerfect:"✨ {meridian} is already at perfect purity.",meridianBreakthroughInvalidIndex:"❌ Invalid meridian index.",breakthroughAttempt:"⚡ Attempting breakthrough to {realm}...",breakthroughSuccess:"🎉 Breakthrough successful! Reached {realm}!",breakthroughFailed:"💔 Breakthrough failed. Cultivation insights gained.",breakthroughRequirements:"📋 Requirements for {realm} breakthrough:",breakthroughQiRequirement:"   💎 Qi: {current}/{required} {status}",breakthroughMeridianRequirement:"   🫀 Open Meridians: {current}/{required} {status}",breakthroughPurifiedMeridianRequirement:"   🫀 Purified Meridians (80%+): {current}/{required} {status}",breakthroughHighlyPurifiedMeridianRequirement:"   🫀 Highly Purified Meridians (95%+): {current}/{required} {status}",breakthroughPerfectMeridianRequirement:"   🫀 Perfect Meridians (100%): {current}/{required} {status}",breakthroughElementRequirement:"   🌟 Fully Cultivated Elements: {current}/{required} {status}",breakthroughAllElementsRequirement:"   🌟 All Elements Mastered: {current}/{required} {status}",breakthroughDivineElementsRequirement:"   🌟 Divine Elements: {current}/{required} {status}",breakthroughRequirementsMet:"🎯 Requirements met! Facing {tribulation} tribulation...",breakthroughRequirementsNotMet:"❌ Breakthrough requirements not met. Continue cultivating!",reincarnation:"🔄 Reincarnating...",lifetimeSummary:"📈 Lifetime Summary:",totalQiGathered:"Total Qi Gathered: {qi}",maxRealmAchieved:"Max Realm Achieved: {realm}",karmicBalance:"Karmic Balance: {karma}",cultivationInsights:"Cultivation Insights: {insights}",artifactsPreserved:"Artifacts Preserved: {artifacts}",newLifeBegins:"🌱 New life begins...",randomEvent:"🎲 Random Event: {event}",fortuitousEncounter:"✨ Met a mysterious master! Talent increased by {talent}.",tribulationChallengeSuccess:"⚡ Survived a minor tribulation! Gained {insights} tribulation insights.",tribulationChallengeFailure:"💥 Failed tribulation challenge! Lost {qi} qi.",karmicReward:"🙏 Performed a good deed! Karmic balance increased by {karma}.",enemyEncounter:"👹 Encountered {enemy} (Realm: {realm}, Qi: {qi}/{maxQi})",enemyDefeated:"✅ Defeated {enemy}!",enemyDefeatedBy:"❌ Defeated by {enemy}! Lost {damage} qi.",combatVictory:"🎉 Victory! Defeated {enemy}. Gained {qi} qi and {talent} talent.",combatDefeat:"💀 Defeated by {enemy}! Lost {qiLoss} qi.",lootArtifact:"📿 Obtained {name} (Value: {value})",lootElementalCrystal:"💎 Obtained {element} Crystal! {element} affinity increased by {affinity}%.",lootCultivationInsight:"📚 Obtained cultivation insight! Talent increased by {talent} points.",meridianDamage:"💥 {meridian} damaged in combat! Purity decreased by {damage}%.",healthRecovered:"💚 Recovered {amount} health.",criticalHit:"💥 Critical hit! Damage doubled!",tribulationStart:"⚡ Heavenly Tribulation: {type}! Success rate: {rate}%",tribulationSuccess:"✨ Tribulation overcome! Breakthrough successful!",tribulationFailed:"💥 Tribulation failed! Cultivation damaged.",tribulationLightningFailure:"⚡ Lightning tribulation failed! Lost {qiLoss} qi.",tribulationHeartDemonFailure:"👹 Heart demon tribulation failed! Cultivation regressed by {realms} realm(s).",breakthroughAdvanced:"🚀 Breakthrough successful! Advanced to {realm} realm!",maxQiIncreased:"💎 Max Qi increased to {maxQi}",elementCultivationEnabled:"🌟 New elements available for cultivation: {elements}",unlockedElements:"🔓 Unlocked elements: {elements}",gameSaved:"💾 Game saved successfully!",gameLoaded:"📂 Game loaded successfully!",saveError:"❌ Failed to save game:",loadError:"❌ Failed to load game:",noEnemyEncountered:'No enemy encountered. Click "Find Enemy" to search for opponents.',findEnemy:"Find Enemy",noActiveCombat:"No active combat",yourPower:"Your Power:",enemyPower:"Enemy Power:",winChance:"Win Chance:",noLootAvailable:"No loot available",foundEnemy:"🔍 Found enemy: {enemy}",victoryGainedLoot:"🎉 Victory! Gained {count} loot items.",defeatedBy:"💀 Defeated by {enemy}.",successfullyFled:"🏃 Successfully fled from {enemy}.",failedToFlee:"❌ Failed to flee! {enemy} attacks!",enemyEncounterGeneric:"⚔️ An enemy has been encountered!",cultivationSpeedIncreased:"Cultivation speed increased by {value}% for {duration} days",combatPowerIncreased:"Combat power increased by {value}",comprehensionIncreased:"Comprehension increased by {value}% for {duration} days",luckIncreased:"Luck increased by {value}% for {duration} days",effectApplied:"Applied {effectType} effect: {value}",effectExpired:"⚡ {itemName} effect expired: {effectType}",itemUsed:"🍽️ Used {itemName}",qiGained:"💎 Gained {qiGain} qi from {itemName}",talentIncreased:"🎓 Talent increased by {talentGain} from {itemName}",elementAffinityBoosted:"🌟 {element} affinity boosted by {boost}% from {itemName}",playerAttack:"⚔️ You attack {enemy} for {damage} damage!",enemyAttack:"👹 {enemy} attacks you for {damage} damage!",combatFlee:"🏃 Attempting to flee from combat..."},itemCategories:{weapon:"Weapons",armor:"Armor",pill:"Pills",herb:"Herbs",spirit_stone:"Spirit Stones",charm:"Charms",manual:"Manuals"},equipmentSlots:{weapon:"Weapon",armor:"Armor",amulet:"Amulet",charm:"Charm",manual:"Manual",spiritstone:"Spirit Stone"},itemQualities:{common:"Common",uncommon:"Uncommon",rare:"Rare",epic:"Epic",legendary:"Legendary",mythical:"Mythical"},itemDescriptions:{basic:"A {quality} {category} from the {realm} realm.",elemental:"A {quality} {element} {category} from the {realm} realm."},itemNames:{qualityCommon:"",qualityRefined:"Refined ",qualitySuperior:"Superior ",qualityExquisite:"Exquisite ",qualityLegendary:"Legendary ",qualityMythical:"Mythical ",baseArmor:"Daoist Robe",baseWeapon:"Spirit Sword",basePill:"Cultivation Pill",baseDrug:"Spirit Wine",basePoison:"Venom Extract",baseSpiritStone:"Spirit Stone",baseHerb:"Spirit Herb",baseBeastPart:"Beast Core",baseCharm:"Protection Charm",baseManual:"Cultivation Manual",elementMetal:"Metal",elementWood:"Wood",elementWater:"Water",elementFire:"Fire",elementEarth:"Earth",realmMortal:"",realmQiCondensation:" of Qi Condensation",realmFoundationEstablishment:" of Foundation Establishment",realmCoreFormation:" of Core Formation",realmNascentSoul:" of Nascent Soul",realmDivineTransformation:" of Divine Transformation",realmVoidRefinement:" of Void Refinement",realmImmortalAscension:" of Immortal Ascension"},itemNameTemplates:{armor:"{quality} {element} {base} {realm}",weapon:"{quality} {element} {base} {realm}",pill:"{quality} {element} {base} {realm}",drug:"{quality} {element} {base} {realm}",poison:"{quality} {element} {base} {realm}",spiritStone:"{quality} {element} {base} {realm}",herb:"{quality} {element} {base} {realm}",beastPart:"{quality} {element} {base} {realm}",charm:"{quality} {element} {base} {realm}",manual:"{quality} {element} {base} {realm}"},effects:{qiAbsorption:"Qi Absorption",cultivationSpeed:"Cultivation Speed",elementalAffinity:"Elemental Affinity",meridianEfficiency:"Meridian Efficiency",combatPower:"Combat Power",defense:"Defense",healthRegeneration:"Health Regeneration",healthRecovery:"Health Recovery",manaRegeneration:"Mana Regeneration"}},vi:{ui:{playerStatus:"Trạng Thái Người Chơi",cultivationInfo:"Tu Luyện",meridianInfo:"Kinh Mạch",meridianControls:"Điều Khiển Kinh Mạch",timeInfo:"Thời Gian",gameOutput:"Đầu Ra Trò Chơi",startGame:"Bắt Đầu Trò Chơi",stopGame:"Dừng Trò Chơi",pauseGame:"Tạm Dừng",cultivate:"Tu Luyện",saveGame:"Lưu Trò Chơi",loadGame:"Tải Trò Chơi",clearSavedGame:"Xóa Trò Chơi Đã Lưu",unlockMeridian:"Mở Khóa Kinh Mạch",unlockSelectedMeridian:"Mở Khóa Kinh Mạch Đã Chọn",allMeridiansOpen:"Tất cả kinh mạch đã mở!",meridianReq:"Cần: {qi} khí",gameStarted:"Trò chơi đã bắt đầu!",gameStopped:"Trò chơi đã dừng.",gameLoaded:"Đã tải trò chơi thành công!",noSavedGame:"Không tìm thấy trò chơi đã lưu.",savedGameCleared:"Đã xóa trò chơi đã lưu!",confirmClearSavedGame:"Bạn có chắc chắn muốn xóa trò chơi đã lưu? Hành động này không thể hoàn tác.",notEnoughQi:"Không đủ khí! Cần {qi} khí để thử mở {meridian}.",meridianOpened:"Đã mở thành công kinh mạch {meridian}!",loading:"Đang tải...",gameTitle:"🏮 CULSIM - Trò Chơi Tu Luyện 🏮",maxRealm:"Cảnh Giới Cao Nhất",breakthroughs:"Đột Phá",qiGathering:"Thu Thập Khí",days:"ngày",years:"năm",months:"tháng",meridiansOpen:"đã mở",qiPerDay:"khí/ngày",welcomeMessage:"Chào mừng đến với CULSIM!",savedGameDetected:"Phát hiện trò chơi đã lưu. Đang tự động tải...",startingNewGame:"Bắt đầu hành trình tu luyện mới...",autoLoadingGame:"Đang tự động tải trò chơi đã lưu...",autoSaved:"🔄 Tự động lưu tiến trình trò chơi!",manualCultivationComplete:"✨ Tu luyện thủ công hoàn thành! Nhận được {qi} khí.",breakthrough:"Đột Phá",alreadyMaxRealm:"Đã đạt cảnh giới cao nhất!",breakthroughNotAvailable:"Đột phá không khả dụng cho cảnh giới hiện tại.",debugPanel:"Bảng Gỡ Lỗi",addQi:"Thêm 10 Khí",debugTitle:"Bảng Gỡ Lỗi",addCultivation:"Thêm Tu Luyện (10 Khí + 10% Kinh Mạch + 10% Ngũ Hành)",addMeridians:"Thêm 10% Kinh Mạch",addElements:"Thêm 10% Ngũ Hành",addSpiritStone:"Thêm Linh Thạch Cấp Cao",qiUnit:"khí",attack:"Tấn Công",flee:"Chạy Trốn",combatArena:"Chiến Trường",combatStats:"Thống Kê Chiến Đấu",lootAndRewards:"Chiến Lợi Phần Thưởng",overview:"Tổng Quan",combat:"Chiến Đấu",inventory:"Túi Đồ",equipment:"Trang Bị",inventoryStats:"Thống Kê Túi Đồ",items:"Vật Phẩm",itemDetails:"Chi Tiết Vật Phẩm",searchItems:"Tìm kiếm vật phẩm...",allCategories:"Tất Cả Loại",allQualities:"Tất Cả Chất Lượng",sortByName:"Tên",sortByQuality:"Chất Lượng",sortByValue:"Giá Trị",sortByQuantity:"Số Lượng",totalItems:"Vật Phẩm:",uniqueItems:"Độc Nhất:",totalValue:"Giá Trị:",capacity:"Dung Lượng:",noItemsInInventory:"Không có vật phẩm trong túi đồ",noItemsMatchFilters:"Không có vật phẩm nào khớp với bộ lọc",selectItemToViewDetails:"Chọn một vật phẩm để xem chi tiết",empty:"Trống",noSpecialEffects:"Không có hiệu ứng đặc biệt",value:"Giá Trị:",durability:"Độ Bền:",quantity:"Số Lượng:",rarity:"Độ Hiếm",category:"Loại",use:"Sử Dụng",equip:"Trang Bị",study:"Nghiên Cứu",absorb:"Hấp Thu",enhanceQiGathering:"Tăng Cường Tập Khí",drop:"Vứt Bỏ",noActionsAvailable:"Không có hành động khả dụng"},status:{player:"Người Chơi",realm:"Cảnh Giới",health:"Sinh Mệnh",qi:"Khí",talent:"Tài Năng",lifetime:"Tuổi Thọ",reincarnation:"Tái Sinh",karma:"Nghiệp Lực",meridians:"Kinh Mạch",elements:"Ngũ Hành",time:"Thời Gian",gameSpeed:"Tốc Độ Trò Chơi",running:"Đang Chạy",paused:"Tạm Dừng",type:"Loại",aggression:"Ác ý"},combatTypes:{melee:"Cận Chiến",ranged:"Tầm Xa"},realms:{mortal:"Phàm Nhân",qiCondensation:"Luyện Khí",foundationEstablishment:"Trúc Cơ",coreFormation:"Kim Đan",nascentSoul:"Nguyên Anh",divineTransformation:"Hóa Thần",voidRefinement:"Luyện Không",immortalAscension:"Phi Thăng"},meridians:{governorVessel:"Đốc Mạch",conceptionVessel:"Nhâm Mạch",stomach:"Vị Kinh",spleen:"Tỳ Kinh",heart:"Tâm Kinh",smallIntestine:"Tiểu Trường Kinh",bladder:"Bàng Quang Kinh",kidney:"Thận Kinh",pericardium:"Tâm Bao Kinh",tripleBurner:"Tam Tiêu Kinh",gallbladder:"Đởm Kinh",liver:"Gan Kinh"},elements:{metal:"Kim (金)",wood:"Mộc (木)",water:"Thủy (水)",fire:"Hỏa (火)",earth:"Thổ (土)"},enemies:{wildBeast:"Dã Thú",bandit:"Tặc Đồ",spiritBeast:"Thú Linh",demonCultivator:"Ma Tu",heavenlyTribulationRemnant:"Dư Âm Thiên Kiếp",ancientGuardian:"Cổ Vệ",chaosSpirit:"Hỗn Độn Linh"},loot:{spiritStone:"Thiên Linh Thạch",spiritStoneDescription:"Một viên đá chứa năng lượng linh khí",elementalCrystal:"Tinh Thạch {element}",elementalCrystalDescription:"Một tinh thạch chứa năng lượng {element}",ancientScroll:"Cổ Cuốn",ancientScrollDescription:"Chứa đựng những hiểu biết về kỹ thuật tu luyện"},events:{fortuitousEncounter:"Hào Ngẫu Chi Kiếp",tribulationChallenge:"Thử Thách Kiếp Nạn",karmicReward:"Thưởng Nghiệp Lực",enemyEncounter:"Gặp Kẻ Thù"},messages:{startingJourney:`🌅 Bắt đầu hành trình tu luyện của bạn...
`,cultivationSessionEnded:"🏮 Kỳ tu luyện kết thúc.",statusUpdate:"📊 Cập Nhật Trạng Thái (Ngày {day})",day:"Ngày",meridianAttemptFailed:"❌ Thất bại khi mở kinh mạch {meridian}.",meridianPurified:"✨ Kinh mạch {meridian} tinh lọc đạt {purity}%",meridianOpeningFailed:"❌ Thất bại khi mở kinh mạch {meridian}. Tỷ lệ thành công: {chance}%. Tiêu thụ {qi} khí.",meridianBreakthroughAttempt:"🔥 Thử đột phá kinh mạch {meridian}. Chi phí: {qi} khí. Tỷ lệ thành công: {chance}%",meridianBreakthroughSuccess:"🎉 Đột phá kinh mạch thành công! {meridian} độ tinh khiết tăng từ {oldPurity}% lên {newPurity}%. Tiêu thụ {qi} khí.",meridianBreakthroughStageAdvanced:"⭐ {meridian} cấp độ đột phá tăng từ {oldStage} lên {newStage}!",meridianBreakthroughFailed:"💔 Đột phá kinh mạch thất bại. {meridian} độ tinh khiết giảm {purityLoss}%. Tiêu thụ {qi} khí.",meridianBreakthroughNotEnoughQi:"❌ Không đủ khí để đột phá kinh mạch. Cần: {qi} khí.",meridianBreakthroughNotOpen:"❌ Không thể đột phá {meridian} - kinh mạch chưa mở.",meridianBreakthroughNotReady:"❌ Không thể đột phá {meridian} - cần đạt {required}% độ tinh khiết trước.",meridianNotPurified:"❌ Không thể đột phá {meridian} - cần đạt {required}% độ tinh khiết. Hiện tại: {purity}%. Tiếp tục tu luyện để tinh lọc kinh mạch.",meridianBreakthroughAlreadyPerfect:"✨ {meridian} đã đạt độ tinh khiết hoàn hảo.",meridianBreakthroughInvalidIndex:"❌ Chỉ số kinh mạch không hợp lệ.",breakthroughAttempt:"⚡ Đang thử đột phá lên {realm}...",breakthroughSuccess:"🎉 Đột phá thành công! Đạt {realm}!",breakthroughFailed:"💔 Đột phá thất bại. Nhận được hiểu biết tu luyện.",breakthroughRequirements:"📋 Yêu cầu đột phá {realm}:",breakthroughQiRequirement:"   💎 Khí: {current}/{required} {status}",breakthroughMeridianRequirement:"   🫀 Kinh Mạch Đã Mở: {current}/{required} {status}",breakthroughPurifiedMeridianRequirement:"   🫀 Kinh Mạch Tinh Lọc (80%+): {current}/{required} {status}",breakthroughHighlyPurifiedMeridianRequirement:"   🫀 Kinh Mạch Cao Cấp Tinh Lọc (95%+): {current}/{required} {status}",breakthroughPerfectMeridianRequirement:"   🫀 Kinh Mạch Hoàn Hảo (100%): {current}/{required} {status}",breakthroughElementRequirement:"   🌟 Ngũ Hành Đã Tu Luyện Đầy Đủ: {current}/{required} {status}",breakthroughAllElementsRequirement:"   🌟 Toàn Bộ Ngũ Hành Thông Thuợ: {current}/{required} {status}",breakthroughDivineElementsRequirement:"   🌟 Ngũ Hành Thần Linh: {current}/{required} {status}",breakthroughRequirementsMet:"🎯 Đủ yêu cầu! Đối mặt với kiếp nạn {tribulation}...",breakthroughRequirementsNotMet:"❌ Chưa đủ yêu cầu đột phá. Tiếp tục tu luyện!",reincarnation:"🔄 Đang tái sinh...",lifetimeSummary:"📈 Tóm Tắt Tuổi Thọ:",totalQiGathered:"Tổng Khí Thu Thập: {qi}",maxRealmAchieved:"Cảnh Giới Cao Nhất: {realm}",karmicBalance:"Cân Bằng Nghiệp Lực: {karma}",cultivationInsights:"Hiểu Biết Tu Luyện: {insights}",artifactsPreserved:"Pháp Bảo Giữ Lại: {artifacts}",newLifeBegins:"🌱 Cuộc đời mới bắt đầu...",randomEvent:"🎲 Sự Kiện Ngẫu Nhiên: {event}",fortuitousEncounter:"✨ Gặp gỡ một bậc thầy bí ẩn! Tài năng tăng {talent} điểm.",tribulationChallengeSuccess:"⚡ Vượt qua kiếp nạn nhỏ! Nhận được {insights} hiểu biết về kiếp nạn.",tribulationChallengeFailure:"💥 Thất bại trong thử thách kiếp nạn! Mất {qi} khí.",karmicReward:"🙏 Làm một việc thiện! Cân bằng nghiệp lực tăng {karma} điểm.",enemyEncounter:"👹 Gặp {enemy} (Cảnh Giới: {realm}, Khí: {qi}/{maxQi})",enemyDefeated:"✅ Đánh bại {enemy}!",enemyDefeatedBy:"❌ Bị {enemy} đánh bại! Mất {damage} khí.",combatVictory:"🎉 Chiến thắng! Đánh bại {enemy}. Nhận được {qi} khí và {talent} tài năng.",combatDefeat:"💀 Bị {enemy} đánh bại! Mất {qiLoss} khí.",lootArtifact:"📿 Nhận được {name} (Giá trị: {value})",lootElementalCrystal:"💎 Nhận được Tinh Thạch {element}! Độ tương hợp {element} tăng {affinity}%.",lootCultivationInsight:"📚 Nhận được hiểu biết tu luyện! Tài năng tăng {talent} điểm.",meridianDamage:"💥 Kinh mạch {meridian} bị thương trong chiến đấu! Độ tinh khiết giảm {damage}%.",healthRecovered:"💚 Phục hồi {amount} sinh mệnh.",criticalHit:"💥 Đòn chí mạng! Sát thương gấp đôi!",tribulationStart:"⚡ Thiên Kiếp: {type}! Tỷ lệ thành công: {rate}%",tribulationSuccess:"✨ Vượt qua kiếp nạn! Đột phá thành công!",tribulationFailed:"💥 Thất bại trong kiếp nạn! Tu luyện bị tổn thương.",tribulationLightningFailure:"⚡ Kiếp nạn sấm sét thất bại! Mất {qiLoss} khí.",tribulationHeartDemonFailure:"👹 Kiếp nạn tâm ma thất bại! Tu luyện thoái bộ {realms} cảnh giới.",breakthroughAdvanced:"🚀 Đột phá thành công! Tiến lên cảnh giới {realm}!",maxQiIncreased:"💎 Khí tối đa tăng lên {maxQi}",elementCultivationEnabled:"🌟 Ngũ hành mới có thể tu luyện: {elements}",unlockedElements:"🔓 Ngũ hành đã mở khóa: {elements}",gameSaved:"💾 Đã lưu trò chơi thành công!",gameLoaded:"📂 Đã tải trò chơi thành công!",saveError:"❌ Lưu trò chơi thất bại:",loadError:"❌ Tải trò chơi thất bại:",noEnemyEncountered:'Chưa gặp kẻ thù. Nhấp "Tìm Kẻ Thù" để tìm đối thủ.',findEnemy:"Tìm Kẻ Thù",noActiveCombat:"Không có trận chiến đang diễn ra",yourPower:"Sức Mạnh Của Bạn:",enemyPower:"Sức Mạnh Kẻ Thù:",winChance:"Tỷ Lệ Thắng:",noLootAvailable:"Không có chiến lợi phẩm",foundEnemy:"🔍 Tìm thấy kẻ thù: {enemy}",victoryGainedLoot:"🎉 Chiến thắng! Nhận được {count} vật phẩm.",defeatedBy:"💀 Bị {enemy} đánh bại.",successfullyFled:"🏃 Thành công chạy trốn khỏi {enemy}.",failedToFlee:"❌ Chạy trốn thất bại! {enemy} tấn công!",enemyEncounterGeneric:"⚔️ Đã gặp kẻ thù!",cultivationSpeedIncreased:"Tốc độ tu luyện tăng {value}% trong {duration} ngày",combatPowerIncreased:"Sức chiến đấu tăng {value}",comprehensionIncreased:"Sức lĩnh ngộ tăng {value}% trong {duration} ngày",luckIncreased:"May mắn tăng {value}% trong {duration} ngày",effectApplied:"Áp dụng hiệu ứng {effectType}: {value}",effectExpired:"⚡ Hiệu ứng của {itemName} đã hết: {effectType}",itemUsed:"🍽️ Đã sử dụng {itemName}",qiGained:"💎 Nhận được {qiGain} khí từ {itemName}",talentIncreased:"🎓 Tài năng tăng {talentGain} từ {itemName}",elementAffinityBoosted:"🌟 Độ tương hợp {element} tăng {boost}% từ {itemName}",playerAttack:"⚔️ Bạn tấn công {enemy} gây {damage} sát thương!",enemyAttack:"👹 {enemy} tấn công bạn gây {damage} sát thương!",combatFlee:"🏃 Đang cố gắng chạy trốn khỏi trận chiến..."},itemCategories:{weapon:"Vũ Khí",armor:"Giáp Trụ",pill:"Đan Dược",herb:"Dược Thảo",spirit_stone:"Linh Thạch",charm:"Pháp Bảo",manual:"Công Pháp"},equipmentSlots:{weapon:"Vũ Khí",armor:"Giáp Trụ",amulet:"Phù Ấn",charm:"Pháp Bảo",manual:"Công Pháp",spiritstone:"Linh Thạch"},itemQualities:{common:"Thường",uncommon:"Hiếm",rare:"Quý",epic:"Truyền Thuyết",legendary:"Thần Thoại",mythical:"Thần Bí"},itemDescriptions:{basic:"Một {category} {quality} từ cảnh giới {realm}.",elemental:"Một {category} {element} {quality} từ cảnh giới {realm}."},itemNames:{qualityCommon:"Hạ Phẩm",qualityRefined:"Trung Phẩm",qualitySuperior:"Thượng Phẩm",qualityExquisite:"Tinh Phẩm",qualityLegendary:"Truyền Thuyết",qualityMythical:"Thần Bí",baseArmor:"Đạo Phục",baseWeapon:"Tiên Kiếm",basePill:"Luyện Đan",baseDrug:"Linh Tửu",basePoison:"Độc Dịch",baseSpiritStone:"Linh Thạch",baseHerb:"Linh Dược",baseBeastPart:"Thú Đan",baseCharm:"Hộ Mệnh Phù",baseManual:"Tu Luyện Bí Kíp",elementMetal:"Kim",elementWood:"Mộc",elementWater:"Thủy",elementFire:"Hỏa",elementEarth:"Thổ",realmMortal:"",realmQiCondensation:"Luyện Khí Kỳ",realmFoundationEstablishment:"Trúc Cơ Kỳ",realmCoreFormation:"Kim Đan Kỳ",realmNascentSoul:"Nguyên Anh Kỳ",realmDivineTransformation:"Hóa Thần Kỳ",realmVoidRefinement:"Luyện Không Kỳ",realmImmortalAscension:"Phi Thăng Kỳ"},itemNameTemplates:{armor:"{element} {quality} {base} {realm}",weapon:"{element} {quality} {base} {realm}",pill:"{quality} {element} {base} {realm}",drug:"{quality} {element} {base} {realm}",poison:"{quality} {element} {base} {realm}",spiritStone:"{element} {quality} {base} {realm}",herb:"{quality} {element} {base} {realm}",beastPart:"{element} {quality} {base} {realm}",charm:"{element} {quality} {base} {realm}",manual:"{quality} {element} {base} {realm}"},effects:{qiAbsorption:"Hấp Thụ Linh Khí",cultivationSpeed:"Tốc Độ Tu Luyện",elementalAffinity:"Tương Thích Ngũ Hành",meridianEfficiency:"Hiệu Suất Kinh Mạch",combatPower:"Sức Chiến Đấu",defense:"Phòng Thủ",healthRegeneration:"Hồi Phục Sinh Mệnh",healthRecovery:"Phục Hồi Sinh Mệnh",manaRegeneration:"Hồi Phục Linh Lực"}}};class at{constructor(e){this.currentLanguage="en",this.STORAGE_KEY="culsim-language";const t=this.loadSavedLanguage();this.currentLanguage=t||e||"en",typeof window<"u"&&setTimeout(()=>this.applyTranslations(),0)}loadSavedLanguage(){if(typeof window<"u"&&window.localStorage){const e=localStorage.getItem(this.STORAGE_KEY);if(e==="en"||e==="vi")return e}return null}saveLanguage(e){typeof window<"u"&&window.localStorage&&localStorage.setItem(this.STORAGE_KEY,e)}setLanguage(e){this.currentLanguage=e,this.saveLanguage(e),this.applyTranslations(),typeof window<"u"&&window.generateEquipmentSlots&&window.generateEquipmentSlots()}getLanguage(){return this.currentLanguage}applyTranslations(){if(typeof document>"u")return;document.querySelectorAll("[data-i18n]").forEach(t=>{const a=t.getAttribute("data-i18n");if(a){const n=this.t(a);t.tagName==="INPUT"&&t.hasAttribute("placeholder")?t.placeholder=n:(t.tagName,t.textContent=n)}})}t(e,t){const a=e.split(".");let n=Te[this.currentLanguage];for(const i of a)if(n&&typeof n=="object"&&i in n)n=n[i];else{n=Te.en;for(const o of a)if(n&&typeof n=="object"&&o in n)n=n[o];else return e;break}return typeof n=="string"&&t?n.replace(/\{(\w+)\}/g,(i,o)=>t[o]!==void 0?t[o]:i):typeof n=="string"?n:e}getRealmName(e){const t={0:"realms.mortal",1:"realms.qiCondensation",2:"realms.foundationEstablishment",3:"realms.coreFormation",4:"realms.nascentSoul",5:"realms.divineTransformation",6:"realms.voidRefinement",7:"realms.immortalAscension"};return this.t(t[e]||"realms.mortal")}getMeridianName(e){const t={0:"meridians.governorVessel",1:"meridians.conceptionVessel",2:"meridians.stomach",3:"meridians.spleen",4:"meridians.heart",5:"meridians.smallIntestine",6:"meridians.bladder",7:"meridians.kidney",8:"meridians.pericardium",9:"meridians.tripleBurner",10:"meridians.gallbladder",11:"meridians.liver"};return this.t(t[e]||"meridians.governorVessel")}getElementName(e){const t={0:"elements.metal",1:"elements.wood",2:"elements.water",3:"elements.fire",4:"elements.earth"};return this.t(t[e]||"elements.metal")}getQualityName(e){const t={[f.Common]:"itemQualities.common",[f.Uncommon]:"itemQualities.uncommon",[f.Rare]:"itemQualities.rare",[f.Epic]:"itemQualities.epic",[f.Legendary]:"itemQualities.legendary",[f.Mythical]:"itemQualities.mythical"};return this.t(t[e]||"itemQualities.common")}getCategoryName(e){const t={[u.Armor]:"itemCategories.armor",[u.Weapon]:"itemCategories.weapon",[u.Charm]:"itemCategories.charm",[u.Manual]:"itemCategories.manual",[u.Pill]:"itemCategories.pill",[u.Drug]:"itemCategories.drug",[u.Herb]:"itemCategories.herb",[u.SpiritStone]:"itemCategories.spirit_stone",[u.Poison]:"itemCategories.poison",[u.BeastPart]:"itemCategories.beast_part"};return this.t(t[e]||"categories.misc")}getEffectTypeName(e){const t={qi_absorption:"effects.qiAbsorption",cultivation_speed:"effects.cultivationSpeed",elemental_affinity:"effects.elementalAffinity",meridian_efficiency:"effects.meridianEfficiency",combat_power:"effects.combatPower",defense:"effects.defense",health_regeneration:"effects.healthRegeneration",health_recovery:"effects.healthRecovery",mana_regeneration:"effects.manaRegeneration"};return this.t(t[e]||e.replace(/_/g," ").replace(/\b\w/g,a=>a.toUpperCase()))}getCombatTypeName(e){switch(e){case"melee":return this.t("combatTypes.melee");case"ranged":return this.t("combatTypes.ranged");default:return e}}}const s=new at;class nt{constructor(e=Math.floor(Math.random()*1e6)){this.seed=e}random(){return this.seed=16807*this.seed%2147483647,(this.seed-1)/2147483646}int(e,t){return Math.floor(this.random()*(t-e+1))+e}float(e,t){return this.random()*(t-e)+e}choice(e){return e[this.int(0,e.length-1)]}weightedChoice(e,t){if(e.length!==t.length)throw new Error("Items and weights arrays must have the same length");const a=t.reduce((i,o)=>i+o,0);let n=this.random()*a;for(let i=0;i<e.length;i++)if(n-=t[i],n<=0)return e[i];return e[e.length-1]}shuffle(e){for(let t=e.length-1;t>0;t--){const a=this.int(0,t);[e[t],e[a]]=[e[a],e[t]]}return e}chance(e){return this.random()<e}getSeed(){return this.seed}setSeed(e){this.seed=e}}const ee={MAX_QI:100,TALENT:50,ELEMENT_AFFINITY_BASE:{min:10,max:20}},it={INTERVAL_DAYS:100},b={[m.Mortal]:{qi:100,meridians:1,elements:1},[m.QiCondensation]:{qi:1e4,meridians:6,elements:2},[m.FoundationEstablishment]:{qi:1e5,meridians:12,elements:3},[m.CoreFormation]:{qi:1e6,meridians:12,elements:4},[m.NascentSoul]:{qi:1e7,meridians:12,elements:5},[m.DivineTransformation]:{qi:1e8,meridians:12,elements:5},[m.VoidRefinement]:{qi:1e9,meridians:12,elements:5}},M={OPENING_BASE_COST:50,OPENING_COST_INCREMENT:25,OPENING_ATTEMPT_COST_FRACTION:.25,INITIAL_PURITY:10,MAX_PURITY:100},T={NATURAL_CAP:50,PURIFIED:80,HIGHLY_PURIFIED:95,PERFECT:100},x={[m.Mortal]:.8,[m.QiCondensation]:.7,[m.FoundationEstablishment]:.6,[m.CoreFormation]:.5,[m.NascentSoul]:.4,[m.DivineTransformation]:.3,[m.VoidRefinement]:.2},te={MAX_QI_MULTIPLIER:100,QI_RETENTION_PERCENTAGE:.1,MIN_QI_RETAINED:10},U={BASE_MERIDIAN_PURIFICATION:.1,MAX_ELEMENT_AFFINITY:100},Ie={[m.Mortal]:{BASIC_ABSORPTION:.1,ENHANCED_ABSORPTION:.05},[m.QiCondensation]:{BASE_ABSORPTION:1},[m.FoundationEstablishment]:{BASE_ABSORPTION:5},[m.CoreFormation]:{BASE_ABSORPTION:10,REALM_MULTIPLIER:1.5},[m.NascentSoul]:{BASE_ABSORPTION:50,REALM_MULTIPLIER:2},[m.DivineTransformation]:{BASE_ABSORPTION:100,REALM_MULTIPLIER:2.5},[m.VoidRefinement]:{BASE_ABSORPTION:250,REALM_MULTIPLIER:3},[m.ImmortalAscension]:{BASE_ABSORPTION:500,REALM_MULTIPLIER:4}},st={[m.Mortal]:500,[m.QiCondensation]:150,[m.FoundationEstablishment]:120,[m.CoreFormation]:300,[m.NascentSoul]:250,[m.DivineTransformation]:200,[m.VoidRefinement]:150,[m.ImmortalAscension]:100},R={QI_COST_MULTIPLIER:100,BASE_SUCCESS_CHANCE:.6,TALENT_BONUS_DIVISOR:200,ATTEMPT_COST_FRACTION:.5,HEART_DEMON_CHANCE:.2,HEART_DEMON_QI_LOSS:.1,FAILURE_DAMAGE_CHANCE:.3,FAILURE_DAMAGE_PERCENTAGE:.1};class p{static calculateScaledStat(e,t,a){const n=Z[t],i=Ce[a];return Math.floor(e*n*i)}static generateItemEffects(e,t,a,n){const i=[],o=oe[e];switch(e){case u.Armor:i.push({type:"defense",value:this.calculateScaledStat(o.defense,t,a),isPercentage:!1}),t>=f.Rare&&i.push({type:"elemental_resistance",value:t*5,element:n,isPercentage:!0});break;case u.Weapon:i.push({type:"combat_power",value:this.calculateScaledStat(o.attack,t,a),element:n,isPercentage:!1}),t>=f.Epic&&i.push({type:"critical_chance",value:(t-2)*2,isPercentage:!0});break;case u.Pill:i.push({type:"qi_absorption",value:this.calculateScaledStat(o.effectStrength,t,a),duration:o.duration*Z[t],isPercentage:!0}),t>=f.Uncommon&&i.push({type:"cultivation_speed",value:t*10,duration:o.duration,isPercentage:!0});break;case u.SpiritStone:i.push({type:"qi_absorption",value:this.calculateScaledStat(o.qiStorage,t,a),isPercentage:!1});break;case u.Herb:i.push({type:"qi_absorption",value:this.calculateScaledStat(o.qiContent,t,a),isPercentage:!1}),n&&i.push({type:"element_boost",value:(t+1)*2,element:n,isPercentage:!0});break;case u.Charm:i.push({type:"luck",value:this.calculateScaledStat(o.effectStrength,t,a),duration:o.duration,isPercentage:!0}),t>=f.Rare&&i.push({type:"comprehension",value:t*3,duration:o.duration*2,isPercentage:!0});break}return i}static generateItemNameKeys(e,t,a,n){const i={[f.Common]:"itemNames.qualityCommon",[f.Uncommon]:"itemNames.qualityRefined",[f.Rare]:"itemNames.qualitySuperior",[f.Epic]:"itemNames.qualityExquisite",[f.Legendary]:"itemNames.qualityLegendary",[f.Mythical]:"itemNames.qualityMythical"},o={[m.Mortal]:"itemNames.realmMortal",[m.QiCondensation]:"itemNames.realmQiCondensation",[m.FoundationEstablishment]:"itemNames.realmFoundationEstablishment",[m.CoreFormation]:"itemNames.realmCoreFormation",[m.NascentSoul]:"itemNames.realmNascentSoul",[m.DivineTransformation]:"itemNames.realmDivineTransformation",[m.VoidRefinement]:"itemNames.realmVoidRefinement",[m.ImmortalAscension]:"itemNames.realmImmortalAscension"},c={[l.Metal]:"itemNames.elementMetal",[l.Wood]:"itemNames.elementWood",[l.Water]:"itemNames.elementWater",[l.Fire]:"itemNames.elementFire",[l.Earth]:"itemNames.elementEarth"},h={[u.Armor]:"itemNames.baseArmor",[u.Weapon]:"itemNames.baseWeapon",[u.Pill]:"itemNames.basePill",[u.Drug]:"itemNames.baseDrug",[u.Poison]:"itemNames.basePoison",[u.SpiritStone]:"itemNames.baseSpiritStone",[u.Herb]:"itemNames.baseHerb",[u.BeastPart]:"itemNames.baseBeastPart",[u.Charm]:"itemNames.baseCharm",[u.Manual]:"itemNames.baseManual"};return{nameQuality:i[t],nameBase:h[e],nameElement:n?c[n]:void 0,nameRealm:o[a]}}static getTranslatedItemName(e){const a={[u.Armor]:"armor",[u.Weapon]:"weapon",[u.Pill]:"pill",[u.Drug]:"drug",[u.Poison]:"poison",[u.SpiritStone]:"spiritStone",[u.Herb]:"herb",[u.BeastPart]:"beastPart",[u.Charm]:"charm",[u.Manual]:"manual"}[e.category],n=s.t(`itemNameTemplates.${a}`),i=s.t(e.nameQuality),o=s.t(e.nameBase),c=e.nameElement?s.t(e.nameElement):"",h=e.nameRealm?s.t(e.nameRealm):"";return n.replace("{quality}",i).replace("{element}",c).replace("{base}",o).replace("{realm}",h).trim()}static calculateItemValue(e,t,a){var i;const n=((i=oe[e])==null?void 0:i.value)||10;return Math.floor(n*Z[t]*(Ce[a]*.5))}static determineItemQuality(e,t){const a=Math.min(e*2,20);for(let n=f.Mythical;n>=f.Common;n--){const i=tt[n],o=Math.min(i+a,100);if(t.chance(o))return n}return f.Common}static createItem(e,t,a,n,i){const o=this.generateItemEffects(e,t,a,n),c=this.generateItemNameKeys(e,t,a,n),h=this.calculateItemValue(e,t,a),g=oe[e],y="durability"in g?Math.floor(g.durability*Z[t]):void 0;return{id:i||`item-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,...c,category:e,quality:t,realm:a,element:n,effects:o,descriptionKey:this.generateItemDescriptionKey(e,t,a,n),value:h,durability:y,maxDurability:y,stackable:e===u.Pill||e===u.SpiritStone||e===u.Herb,maxStack:e===u.Pill?10:e===u.SpiritStone?50:e===u.Herb?20:1,quantity:1}}static generateItemDescriptionKey(e,t,a,n){return"itemDescriptions.generic"}static getTranslatedItemDescription(e){const t={[f.Common]:"itemQualities.common",[f.Uncommon]:"itemQualities.uncommon",[f.Rare]:"itemQualities.rare",[f.Epic]:"itemQualities.epic",[f.Legendary]:"itemQualities.legendary",[f.Mythical]:"itemQualities.mythical"},a={0:"realms.mortal",1:"realms.qiCondensation",2:"realms.foundationEstablishment",3:"realms.coreFormation",4:"realms.nascentSoul",5:"realms.divineTransformation",6:"realms.voidRefinement",7:"realms.immortalAscension"},n={[u.Armor]:"itemCategories.armor",[u.Weapon]:"itemCategories.weapon",[u.Charm]:"itemCategories.charm",[u.Manual]:"itemCategories.manual",[u.Pill]:"itemCategories.pill",[u.Drug]:"itemCategories.drug",[u.Herb]:"itemCategories.herb",[u.SpiritStone]:"itemCategories.spirit_stone",[u.Poison]:"itemCategories.poison",[u.BeastPart]:"itemCategories.beast_part"},i={quality:s.t(t[e.quality]).toLowerCase(),category:s.t(n[e.category]).toLowerCase(),realm:s.t(a[e.realm]).toLowerCase()};if(e.element!==void 0){const o=Object.values(l).indexOf(e.element);return i.element=s.getElementName(o),s.t("itemDescriptions.elemental",i)}else return s.t("itemDescriptions.basic",i)}}class ye{constructor(e){this.gameState=e}findItemById(e){var n,i;if((n=this.gameState.player.inventory)!=null&&n.items){const o=this.gameState.player.inventory.items.find(c=>c.id===e);if(o)return o}if((i=this.gameState.player.inventory)!=null&&i.equippedItems){for(const o of Object.values(this.gameState.player.inventory.equippedItems))if(o&&o.id===e)return o}const t=this.gameState.player.items.find(o=>o.id===e);if(t)return t;const a=this.gameState.soul.items.find(o=>o.id===e);return a||null}calculateQiAbsorptionBonus(){var a;let e=0,t=0;return(a=this.gameState.player.inventory)!=null&&a.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(n=>{n&&n.effects.forEach(i=>{i.type==="qi_absorption"&&(i.isPercentage?e+=i.value:n.category==="spirit_stone"?t===0&&(t+=i.value):t+=i.value)})}),this.gameState.soul.items.forEach(n=>{n.effects.forEach(i=>{i.type==="qi_absorption"&&(i.isPercentage?e+=i.value:n.category==="spirit_stone"?t===0&&(t+=i.value):t+=i.value)})}),{percentage:e,flat:t}}calculateCultivationSpeedBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="cultivation_speed"&&n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="cultivation_speed"&&n.isPercentage&&(e+=n.value)})}),e}calculateCombatPowerBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="combat_power"&&!n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="combat_power"&&!n.isPercentage&&(e+=n.value)})}),e}calculateDefenseBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="defense"&&!n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="defense"&&!n.isPercentage&&(e+=n.value)})}),e}calculateCriticalChanceBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="critical_chance"&&n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="critical_chance"&&n.isPercentage&&(e+=n.value)})}),e}calculateElementalBoost(e){var a;let t=0;return(a=this.gameState.player.inventory)!=null&&a.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(n=>{n&&n.effects.forEach(i=>{i.type==="element_boost"&&i.element===e&&i.isPercentage&&(t+=i.value)})}),this.gameState.soul.items.forEach(n=>{n.effects.forEach(i=>{i.type==="element_boost"&&i.element===e&&i.isPercentage&&(t+=i.value)})}),t}calculateElementalResistance(e){var a;let t=0;return(a=this.gameState.player.inventory)!=null&&a.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(n=>{n&&n.effects.forEach(i=>{i.type==="elemental_resistance"&&i.element===e&&i.isPercentage&&(t+=i.value)})}),this.gameState.soul.items.forEach(n=>{n.effects.forEach(i=>{i.type==="elemental_resistance"&&i.element===e&&i.isPercentage&&(t+=i.value)})}),t}calculateLuckBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="luck"&&!n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="luck"&&!n.isPercentage&&(e+=n.value)})}),e}calculateComprehensionBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.type==="comprehension"&&n.isPercentage&&(e+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="comprehension"&&n.isPercentage&&(e+=n.value)})}),e}getActiveTemporaryEffects(){var t;const e=[];return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{n.duration&&n.duration>0&&e.push(n)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.duration&&n.duration>0&&e.push(n)})}),e}processTemporaryEffects(){var e;(e=this.gameState.player.inventory)!=null&&e.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(t=>{t&&(t.effects.forEach(a=>{a.duration&&a.duration>0&&(a.duration--,a.duration<=0&&console.log(s.t("messages.effectExpired",{itemName:p.getTranslatedItemName(t),effectType:a.type})))}),t.effects=t.effects.filter(a=>!a.duration||a.duration>0))}),this.gameState.soul.items.forEach(t=>{t.effects.forEach(a=>{a.duration&&a.duration>0&&(a.duration--,a.duration<=0&&console.log(s.t("messages.effectExpired",{itemName:p.getTranslatedItemName(t),effectType:a.type})))}),t.effects=t.effects.filter(a=>!a.duration||a.duration>0)}),this.gameState.soul.items=this.gameState.soul.items.filter(t=>t.effects.length>0)}useConsumableItem(e){var a;if((a=this.gameState.player.inventory)!=null&&a.items){const n=this.gameState.player.inventory.items.findIndex(i=>i.id===e);if(n!==-1){const i=this.gameState.player.inventory.items[n];return i.effects.forEach(o=>{this.applyImmediateEffect(o,i)}),i.quantity>1?i.quantity--:this.gameState.player.inventory.items.splice(n,1),console.log(s.t("messages.itemUsed",{itemName:p.getTranslatedItemName(i)})),!0}}const t=this.gameState.player.items.findIndex(n=>n.id===e);if(t!==-1){const n=this.gameState.player.items[t];return n.effects.forEach(i=>{this.applyImmediateEffect(i,n)}),n.quantity>1?n.quantity--:this.gameState.player.items.splice(t,1),console.log(s.t("messages.itemUsed",{itemName:p.getTranslatedItemName(n)})),!0}return!1}applyImmediateEffect(e,t){const a=this.gameState.player;switch(e.type){case"qi_absorption":if(!e.isPercentage){const n=Math.min(e.value,a.maxQi-a.qi);a.qi+=n,console.log(s.t("messages.qiGained",{qiGain:n,itemName:p.getTranslatedItemName(t)}))}break;case"talent_boost":if(!e.isPercentage){const n=Math.min(e.value,100-a.talent);a.talent+=n,console.log(s.t("messages.talentIncreased",{talentGain:n,itemName:p.getTranslatedItemName(t)}))}break;case"element_boost":if(e.element&&e.isPercentage){const n=a.elements[e.element],i=Math.floor(n*(e.value/100));a.elements[e.element]=Math.min(100,n+i),console.log(s.t("messages.elementAffinityBoosted",{element:e.element,boost:i,itemName:p.getTranslatedItemName(t)}))}break}}getEquippedItems(){var t;const e=[];return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&e.push(a)}),e}getConsumableItems(){var t;const e=[];return(t=this.gameState.player.inventory)!=null&&t.items&&e.push(...this.gameState.player.inventory.items.filter(a=>a.category===u.Pill||a.category===u.SpiritStone||a.category===u.Herb||a.category===u.Drug)),e.push(...this.gameState.soul.items.filter(a=>a.category===u.Pill||a.category===u.SpiritStone||a.category===u.Herb||a.category===u.Drug)),e}calculateHealthRegenerationBonus(){var t;let e=0;return(t=this.gameState.player.inventory)!=null&&t.equippedItems&&Object.values(this.gameState.player.inventory.equippedItems).forEach(a=>{a&&a.effects.forEach(n=>{if(n.type==="health_regen"){const i=n.isPercentage?n.value/100*this.getBaseHealthRegen():n.value;e+=i}})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{if(n.type==="health_regen"){const i=n.isPercentage?n.value/100*this.getBaseHealthRegen():n.value;e+=i}})}),e}getBaseHealthRegen(){const e=this.gameState.player;let t=1;const a=Math.sqrt(e.realm+1);return t*=a,t*=1+e.talent/200,t}}class fe{constructor(e){this.gameState=e,this.itemEffectProcessor=new ye(e)}calculateMaxHealth(e){const a=this.getRealmHealthMultiplier(e.realm),n=Math.floor(e.maxQi/10),i=Math.floor(e.talent/2);return Math.floor(100*a+n+i)}calculateMaxHealthForEnemy(e){const a=this.getRealmHealthMultiplier(e.realm),n=Math.floor(e.maxQi/8);return Math.floor(80*a+n)}getRealmHealthMultiplier(e){switch(e){case m.Mortal:return 1;case m.QiCondensation:return 1.5;case m.FoundationEstablishment:return 2.5;case m.CoreFormation:return 4;case m.NascentSoul:return 7;case m.DivineTransformation:return 12;case m.VoidRefinement:return 20;case m.ImmortalAscension:return 35;default:return 1}}applyDamage(e,t,a){if(e.health===void 0||e.maxHealth===void 0)throw new Error("Entity health not initialized");let n=t;switch(a){case N.Physical:n=this.applyPhysicalDamage(e,t);break;case N.Spiritual:n=this.applySpiritualDamage(e,t);break;case N.Elemental:n=this.applyElementalDamage(e,t);break}return n=Math.max(0,n),e.health=Math.max(0,e.health-n),n}applyPhysicalDamage(e,t){return t}applySpiritualDamage(e,t){const a=this.getRealmHealthMultiplier(e.realm)*.1,n=Math.min(e.qi/e.maxQi*.2,.2),i=Math.min(a+n,.5);return t*(1-i)}applyElementalDamage(e,t){return t}heal(e,t){if(e.health===void 0||e.maxHealth===void 0)throw new Error("Entity health not initialized");const a=e.health;return e.health=Math.min(e.maxHealth,e.health+t),e.health-a}regenerateHealth(e){if(e.health===void 0||e.maxHealth===void 0||e.health>=e.maxHealth)return 0;let t=1;if(t*=Math.sqrt(this.getRealmHealthMultiplier(e.realm)),e.health/e.maxHealth<.5&&(t*=.5),"talent"in e&&(t*=1+e.talent/200),"talent"in e){const i=this.itemEffectProcessor.calculateHealthRegenerationBonus();t+=i}const n=Math.max(1,Math.floor(t));return this.heal(e,n)}isAlive(e){return e.health!==void 0&&e.health>0}getHealthPercentage(e){return e.health===void 0||e.maxHealth===void 0?0:Math.round(e.health/e.maxHealth*100)}initializePlayerHealth(e){e.maxHealth=this.calculateMaxHealth(e),e.health=e.maxHealth}initializeEnemyHealth(e){e.maxHealth=this.calculateMaxHealthForEnemy(e),e.health=e.maxHealth}updateMaxHealth(e){if(e.health===void 0||e.maxHealth===void 0){this.initializePlayerHealth(e);return}const t=this.calculateMaxHealth(e),a=e.health/e.maxHealth;e.maxHealth=t,e.health=Math.min(e.health,Math.floor(t*a))}}class rt{constructor(e,t,a,n){this.gameLoop=null,this.lastAutoSaveTime=0,this.AUTO_SAVE_INTERVAL_DAYS=it.INTERVAL_DAYS,this.random=new nt(e),this.state=this.initializeGameState(),this.updateCallback=t,this.uiUpdateCallback=a,this.autoSaveCallback=n}initializeGameState(){const e={id:"player-1",name:"Cultivator",realm:m.Mortal,qi:0,maxQi:ee.MAX_QI,health:100,maxHealth:100,meridians:this.createInitialMeridians(),elements:this.initializeElementAffinities(),talent:ee.TALENT,items:[],lifetime:0},t={id:"soul-1",lifetimeCount:1,totalLifetime:0,cultivationInsights:{realmBreakthroughs:[],techniqueMastery:[],elementalUnderstanding:{[l.Metal]:0,[l.Wood]:0,[l.Water]:0,[l.Fire]:0,[l.Earth]:0},tribulationSurvivals:0},karmicBalance:0,maxRealmAchieved:m.Mortal,items:[]},a={player:e,soul:t,time:0,isRunning:!1,seed:this.random.getSeed()};return new fe(a).initializePlayerHealth(e),a}createInitialMeridians(){return["Governor Vessel","Conception Vessel","Stomach","Spleen","Heart","Small Intestine","Bladder","Kidney","Pericardium","Triple Burner","Gallbladder","Liver"].map((t,a)=>({id:`meridian-${a}`,name:t,isOpen:!1,purity:0,breakthroughStage:0}))}initializeElementAffinities(){const e=[l.Metal,l.Wood,l.Water,l.Fire,l.Earth],t=this.random.choice(e),a={[l.Metal]:0,[l.Wood]:0,[l.Water]:0,[l.Fire]:0,[l.Earth]:0};return a[t]=this.random.int(ee.ELEMENT_AFFINITY_BASE.min,ee.ELEMENT_AFFINITY_BASE.max),a}start(){console.log(s.t("messages.startingJourney")),this.state.isRunning=!0,this.displayStatus(),this.gameLoop=setInterval(()=>{this.update()},1e3)}stop(){this.gameLoop&&(clearInterval(this.gameLoop),this.gameLoop=null),this.state.isRunning=!1,console.log(`
`+s.t("messages.cultivationSessionEnded"))}update(){this.state.isRunning&&(this.state.time+=1,this.state.player.lifetime+=1,this.state.time-this.lastAutoSaveTime>=this.AUTO_SAVE_INTERVAL_DAYS&&this.autoSave(),this.updateCallback&&this.updateCallback(),this.uiUpdateCallback&&this.uiUpdateCallback())}displayStatus(){const e=this.state.player,t=this.state.soul;console.log(s.t("messages.statusUpdate",{day:Math.floor(this.state.time)})),console.log(`${s.t("status.player")}: ${e.name}`),console.log(`${s.t("status.realm")}: ${this.getRealmName(e.realm)}`),console.log(`${s.t("status.qi")}: ${e.qi.toFixed(1)} / ${e.maxQi}`),console.log(`${s.t("status.talent")}: ${e.talent}/100`);const a=this.getPrimaryElement();if(a){console.log(`${s.t("status.primaryElement")}: ${a} (${e.elements[a].toFixed(1)})`);const n=this.getComplementaryElements(a,e.realm);n.length>0&&console.log(`${s.t("status.complementaryElements")}: ${n.map(i=>{var o;return`${i} (${((o=e.elements[i])==null?void 0:o.toFixed(1))||"0.0"})`}).join(", ")}`)}console.log(`${s.t("status.lifetime")}: ${e.lifetime} ${s.t("messages.day")} (${s.t("status.reincarnation")}: ${t.lifetimeCount})`),console.log(`${s.t("status.karma")}: ${t.karmicBalance>0?"+":""}${t.karmicBalance}`),console.log(`─────────────────────────────
`)}getRealmName(e){return s.getRealmName(e)}getPrimaryElement(){const e=this.state.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,i])=>{i>t&&(t=i,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},i={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=m.QiCondensation&&a.push(n[e]),t>=m.CoreFormation&&a.push(i[e]),t>=m.DivineTransformation){const c=i[e],h=(o=Object.entries(i).find(([g,y])=>y===c))==null?void 0:o[0];h&&a.push(h)}return a}getState(){return{...this.state}}getStateReference(){return this.state}setState(e){this.state=e}getRandom(){return this.random}autoSave(){this.autoSaveCallback&&this.autoSaveCallback(),this.lastAutoSaveTime=this.state.time}saveGame(){try{const e=this.serializeGameState();localStorage.setItem("culsim-save",e),console.log(s.t("messages.gameSaved"))}catch(e){console.error(s.t("messages.saveError"),e)}}loadGame(){try{const e=localStorage.getItem("culsim-save");if(e)return this.state=this.deserializeGameState(e),console.log(s.t("messages.gameLoaded")),!0}catch(e){console.error(s.t("messages.loadError"),e)}return!1}serializeGameState(){return JSON.stringify(this.state,null,2)}deserializeGameState(e){const t=JSON.parse(e);return{player:t.player||this.initializeGameState().player,soul:t.soul||this.initializeGameState().soul,time:t.time?Math.floor(t.time/86400):0,isRunning:!1,seed:t.seed||this.random.getSeed()}}}class Me{constructor(e){this.gameState=e,this.itemEffectProcessor=new ye(e)}processCultivation(){const e=this.gameState.player;switch(this.processMeridianPurification(),e.realm){case m.Mortal:this.cultivateMortalRealm();break;case m.QiCondensation:this.cultivateQiCondensationRealm();break;case m.FoundationEstablishment:this.cultivateFoundationEstablishmentRealm();break;case m.CoreFormation:this.cultivateCoreFormationRealm();break;case m.NascentSoul:this.cultivateNascentSoulRealm();break;case m.DivineTransformation:this.cultivateDivineTransformationRealm();break;case m.VoidRefinement:this.cultivateVoidRefinementRealm();break;case m.ImmortalAscension:this.cultivateImmortalAscensionRealm();break}}cultivateMortalRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.Mortal);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateQiCondensationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.QiCondensation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateFoundationEstablishmentRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.FoundationEstablishment);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateCoreFormationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.CoreFormation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateNascentSoulRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.NascentSoul);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateDivineTransformationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.DivineTransformation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateVoidRefinementRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.VoidRefinement);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateImmortalAscensionRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.ImmortalAscension);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}calculateQiGatheringForRealm(e){const t=this.gameState.player;if(e===m.Mortal){const a=Ie[m.Mortal].BASIC_ABSORPTION,n=1+t.talent/500;let i=a*n;const o=t.meridians.filter(g=>g.isOpen).length;if(o>0){const g=o*.5;i*=1+g}const c=this.itemEffectProcessor.calculateCultivationSpeedBonus();i*=1+c/100;const h=this.itemEffectProcessor.calculateQiAbsorptionBonus();return i*=1+h.percentage/100,i+=h.flat,i}else{const a=Ie[e],n=a.BASE_ABSORPTION,i=1+t.talent/st[e],o=this.calculateMeridianBonus(),c=a.REALM_MULTIPLIER||1;let h=1;e===m.VoidRefinement?h=1+this.gameState.soul.karmicBalance/1e3:e===m.ImmortalAscension&&(h=1+this.gameState.soul.karmicBalance/500);let g=n*i*o*c*h;const y=this.itemEffectProcessor.calculateCultivationSpeedBonus();g*=1+y/100;const I=this.itemEffectProcessor.calculateQiAbsorptionBonus();return g*=1+I.percentage/100,g+=I.flat,g}}calculateMeridianBonus(){const t=this.gameState.player.meridians.filter(i=>i.isOpen);if(t.length===0)return 1;const a=t.length*.1,n=t.reduce((i,o)=>i+o.purity/1e3,0);return 1+a*2+n*4}cultivateElements(){const e=this.gameState.player,t=e.realm,a=.1+e.talent/1e3,n=this.getPrimaryElement();n&&(e.elements[n]=Math.min(100,e.elements[n]+a),this.getComplementaryElements(n,t).forEach(o=>{e.elements[o]=Math.min(100,e.elements[o]+a*.5)}))}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,i])=>{i>t&&(t=i,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},i={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=m.QiCondensation&&a.push(n[e]),t>=m.CoreFormation&&a.push(i[e]),t>=m.DivineTransformation){const c=i[e],h=(o=Object.entries(i).find(([g,y])=>y===c))==null?void 0:o[0];h&&a.push(h)}return a}processMeridianPurification(){const e=this.gameState.player;e.meridians.forEach((t,a)=>{if(!t.isOpen)return;const n=this.getMeridianEffectiveCap(t);if(t.purity>=n)return;const i=U.BASE_MERIDIAN_PURIFICATION+e.talent/1e3+t.breakthroughStage*.05;t.purity=Math.min(n,t.purity+i)})}getMeridianEffectiveCap(e){switch(e.breakthroughStage){case 0:return T.NATURAL_CAP;case 1:return T.PURIFIED;case 2:return T.HIGHLY_PURIFIED;case 3:return T.PERFECT;default:return T.PERFECT}}cultivate(){const e=this.gameState.player,a=this.calculateQiGatheringForRealm(e.realm)*2;return e.qi=Math.min(e.qi+a,e.maxQi),this.cultivateElements(),this.processMeridianPurification(),a}calculateQiGatheringSpeed(){const e=this.gameState.player;return this.calculateQiGatheringForRealm(e.realm)}}class ke{constructor(e,t){this.gameState=e,this.random=t}attemptMeridianOpening(e){const t=this.gameState.player,a=t.meridians.map((g,y)=>({meridian:g,index:y})).filter(({meridian:g})=>!g.isOpen);if(a.length===0)return;const n=e!==void 0&&e<t.meridians.length?{meridian:t.meridians[e],index:e}:this.random.choice(a),i=M.OPENING_BASE_COST+n.index*M.OPENING_COST_INCREMENT,o=t.talent/200,c=Math.min(.8,t.qi/i*(.5+o)),h=Math.floor(i*M.OPENING_ATTEMPT_COST_FRACTION);t.qi=Math.max(0,t.qi-h),this.random.chance(c)?(t.meridians[n.index].isOpen=!0,t.meridians[n.index].purity=M.INITIAL_PURITY,console.log(s.t("messages.meridianOpened",{meridian:s.getMeridianName(n.index)}))):console.log(s.t("messages.meridianOpeningFailed",{meridian:s.getMeridianName(n.index),chance:(c*100).toFixed(1)}))}attemptMeridianBreakthrough(e){const t=this.gameState.player;if(e<0||e>=t.meridians.length){console.log(s.t("messages.invalidMeridianIndex"));return}const a=t.meridians[e];if(!a.isOpen){console.log(s.t("messages.meridianNotOpen",{meridian:s.getMeridianName(e)}));return}const n=this.getMeridianEffectiveCap(a);if(a.purity<n){console.log(s.t("messages.meridianNotPurified",{meridian:s.getMeridianName(e),purity:a.purity.toFixed(1),required:n}));return}if(a.purity>=M.MAX_PURITY){console.log(s.t("messages.meridianMaxPurity",{meridian:s.getMeridianName(e)}));return}const i=(e+1)*R.QI_COST_MULTIPLIER,o=1+a.breakthroughStage*10,c=i*o,h=R.BASE_SUCCESS_CHANCE,g=t.talent/R.TALENT_BONUS_DIVISOR,y=Math.min(.95,h+g);if(console.log(s.t("messages.meridianBreakthroughAttempt",{meridian:s.getMeridianName(e),qi:c,chance:(y*100).toFixed(1)})),t.qi<c){console.log(s.t("messages.insufficientQi",{required:c,current:t.qi.toFixed(1)}));return}const I=Math.floor(c*R.ATTEMPT_COST_FRACTION);if(t.qi=Math.max(0,t.qi-I),this.random.chance(y)){a.breakthroughStage+=1;const k=this.getMeridianEffectiveCap(a);if(console.log(s.t("messages.meridianBreakthroughSuccess",{meridian:s.getMeridianName(e),stage:a.breakthroughStage,cap:k})),this.random.chance(R.HEART_DEMON_CHANCE))if(console.log(s.t("messages.heartDemonTribulation")),this.random.chance(.3))console.log(s.t("messages.heartDemonSuccess"));else{const P=t.qi*R.HEART_DEMON_QI_LOSS;t.qi=Math.max(0,t.qi-P),console.log(s.t("messages.heartDemonFailure",{qiLoss:P.toFixed(1)}))}}else if(console.log(s.t("messages.meridianBreakthroughFailed",{meridian:s.getMeridianName(e)})),this.random.chance(R.FAILURE_DAMAGE_CHANCE)){const k=a.purity*R.FAILURE_DAMAGE_PERCENTAGE;a.purity=Math.max(0,a.purity-k),console.log(s.t("messages.meridianBreakthroughDamage",{meridian:s.getMeridianName(e),damage:k.toFixed(1),purity:a.purity.toFixed(1)}))}}getMeridianEffectiveCap(e){switch(e.breakthroughStage){case 0:return T.NATURAL_CAP;case 1:return T.PURIFIED;case 2:return T.HIGHLY_PURIFIED;case 3:return T.PERFECT;default:return T.NATURAL_CAP}}getMeridianInfo(e){return e<0||e>=this.gameState.player.meridians.length?null:this.gameState.player.meridians[e]}getAllMeridians(){return[...this.gameState.player.meridians]}canOpenMeridian(e){return e<0||e>=this.gameState.player.meridians.length?!1:!this.gameState.player.meridians[e].isOpen}canBreakthroughMeridian(e){if(e<0||e>=this.gameState.player.meridians.length)return!1;const t=this.gameState.player.meridians[e];return!(!t.isOpen||t.purity<T.NATURAL_CAP||t.purity>=M.MAX_PURITY)}debugAddMeridianProgress(e){this.gameState.player.meridians.forEach(a=>{if(a.isOpen){const n=this.getMeridianEffectiveCap(a);if(a.purity<n){const i=a.purity;a.purity=Math.min(n,a.purity+e),console.log(`🐛 Debug: Meridian purified from ${i.toFixed(1)}% to ${a.purity.toFixed(1)}% (cap: ${n}%)`)}}})}}class Ae{constructor(e){this.gameState=e}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,i])=>{i>t&&(t=i,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},i={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=1&&a.push(n[e]),t>=3&&a.push(i[e]),t>=5){const c=i[e],h=(o=Object.entries(i).find(([g,y])=>y===c))==null?void 0:o[0];h&&a.push(h)}return a}getElementAffinity(e){return this.gameState.player.elements[e]||0}getAllElementAffinities(){return{...this.gameState.player.elements}}isElementFullyCultivated(e){return this.getElementAffinity(e)>=U.MAX_ELEMENT_AFFINITY}getFullyCultivatedElementCount(){return Object.values(this.gameState.player.elements).filter(e=>e>=U.MAX_ELEMENT_AFFINITY).length}calculateElementalBonus(e,t){const a={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},n={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};return a[e]===t?1.25:n[e]===t?.75:1}getElementCultivationProgress(e){return Math.min(100,this.getElementAffinity(e))}getUnlockedElements(){const e=this.getPrimaryElement();if(!e)return[];const t=[e],a=this.getComplementaryElements(e,this.gameState.player.realm);return t.push(...a),[...new Set(t)]}debugAddElementProgress(e=10){const t=this.gameState.player,a=this.getPrimaryElement();let n=0;a&&this.getUnlockedElements().forEach(o=>{const c=t.elements[o];c<U.MAX_ELEMENT_AFFINITY&&(t.elements[o]=Math.min(U.MAX_ELEMENT_AFFINITY,c+e),n++)}),console.log(`🐛 Debug: Added ${e}% affinity to ${n} unlocked elements`)}getElementDisplayInfo(e){const t=this.getPrimaryElement();return{name:e,affinity:this.getElementAffinity(e),progress:this.getElementCultivationProgress(e),isPrimary:t===e,isFullyCultivated:this.isElementFullyCultivated(e)}}}class Re{constructor(e,t){this.gameState=e,this.random=t}attemptBreakthrough(){const e=this.gameState.player;switch(console.log(s.t("messages.breakthroughAttempt",{realm:this.getRealmName(e.realm)})),e.realm){case m.Mortal:this.attemptQiCondensationBreakthrough();break;case m.QiCondensation:this.attemptFoundationEstablishmentBreakthrough();break;case m.FoundationEstablishment:this.attemptCoreFormationBreakthrough();break;case m.CoreFormation:this.attemptNascentSoulBreakthrough();break;case m.NascentSoul:this.attemptDivineTransformationBreakthrough();break;case m.DivineTransformation:this.attemptVoidRefinementBreakthrough();break;case m.VoidRefinement:this.attemptImmortalAscensionBreakthrough();break;default:console.log(s.t("messages.breakthroughMaxRealm"))}}attemptQiCondensationBreakthrough(){const e=this.gameState.player,t=b[m.Mortal].qi,a=b[m.Mortal].meridians,n=b[m.Mortal].elements,i=e.meridians.filter(c=>c.isOpen).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(s.t("messages.breakthroughRequirements",{realm:s.getRealmName(m.QiCondensation)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughElementRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&i>=a&&o>=n?(console.log(s.t("messages.breakthroughRequirementsMet")),this.performTribulation("lightning",x[m.Mortal],()=>{this.performBreakthrough(m.QiCondensation)})):console.log(s.t("messages.breakthroughFailed"))}attemptFoundationEstablishmentBreakthrough(){const e=this.gameState.player,t=b[m.QiCondensation].qi,a=b[m.QiCondensation].meridians,n=b[m.QiCondensation].elements,i=e.meridians.filter(h=>h.isOpen).length,o=this.getPrimaryElement();let c=0;if(o){const h=this.getComplementaryElements(o,m.QiCondensation);c=[o,...h].filter(y=>e.elements[y]>=100).length}console.log(s.t("messages.breakthroughRequirements",{realm:s.getRealmName(m.FoundationEstablishment)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughElementRequirement",{current:c,required:n,status:c>=n?"✅":"❌"})),e.qi>=t&&i>=a&&c>=n?this.performTribulation("lightning",x[m.QiCondensation],()=>{this.performBreakthrough(m.FoundationEstablishment)}):console.log(s.t("messages.breakthroughFailed"))}attemptCoreFormationBreakthrough(){const e=this.gameState.player,t=b[m.FoundationEstablishment].qi,a=b[m.FoundationEstablishment].meridians,n=b[m.FoundationEstablishment].elements,i=e.meridians.filter(h=>h.isOpen).length,o=this.getPrimaryElement();let c=0;if(o){const h=this.getComplementaryElements(o,m.FoundationEstablishment);c=[o,...h].filter(y=>e.elements[y]>=100).length}console.log(s.t("messages.breakthroughRequirements",{realm:s.getRealmName(m.CoreFormation)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughElementRequirement",{current:c,required:n,status:c>=n?"✅":"❌"})),e.qi>=t&&i>=a&&c>=n?this.performTribulation("lightning",x[m.FoundationEstablishment],()=>{this.performBreakthrough(m.CoreFormation)}):console.log(s.t("messages.breakthroughFailed"))}attemptNascentSoulBreakthrough(){const e=this.gameState.player,t=b[m.CoreFormation].qi,a=b[m.CoreFormation].meridians,n=b[m.CoreFormation].elements,i=e.meridians.filter(h=>h.isOpen&&h.purity>=T.PURIFIED).length,o=this.getPrimaryElement();let c=0;if(o){const h=this.getComplementaryElements(o,m.CoreFormation);c=[o,...h].filter(y=>e.elements[y]>=100).length}console.log(s.t("messages.breakthroughRequirements",{realm:s.getRealmName(m.NascentSoul)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughPurifiedMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughElementRequirement",{current:c,required:n,status:c>=n?"✅":"❌"})),e.qi>=t&&i>=a&&c>=n?this.performTribulation("heart_demon",x[m.CoreFormation],()=>{this.performBreakthrough(m.NascentSoul)}):console.log(s.t("messages.breakthroughFailed"))}attemptDivineTransformationBreakthrough(){const e=this.gameState.player,t=b[m.NascentSoul].qi,a=b[m.NascentSoul].meridians,n=b[m.NascentSoul].elements,i=e.meridians.filter(c=>c.isOpen&&c.purity>=T.HIGHLY_PURIFIED).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(s.t("messages.breakthroughRequirements",{realm:this.getRealmName(m.DivineTransformation)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughHighlyPurifiedMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughAllElementsRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&i>=a&&o>=n?this.performTribulation("elemental",x[m.NascentSoul],()=>{this.performBreakthrough(m.DivineTransformation)}):console.log(s.t("messages.breakthroughFailed"))}attemptVoidRefinementBreakthrough(){const e=this.gameState.player,t=b[m.DivineTransformation].qi,a=b[m.DivineTransformation].meridians,n=b[m.DivineTransformation].elements,i=e.meridians.filter(c=>c.isOpen&&c.purity>=T.PERFECT).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(s.t("messages.breakthroughRequirements",{realm:this.getRealmName(m.VoidRefinement)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughPerfectMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughDivineElementsRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&i>=a&&o>=n?this.performTribulation("karmic",x[m.DivineTransformation],()=>{this.performBreakthrough(m.VoidRefinement)}):console.log(s.t("messages.breakthroughFailed"))}attemptImmortalAscensionBreakthrough(){const e=this.gameState.player,t=b[m.VoidRefinement].qi,a=b[m.VoidRefinement].meridians,n=b[m.VoidRefinement].elements,i=e.meridians.filter(c=>c.isOpen&&c.purity>=T.PERFECT).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(s.t("messages.breakthroughRequirements",{realm:this.getRealmName(m.ImmortalAscension)})),console.log(s.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(s.t("messages.breakthroughPerfectMeridianRequirement",{current:i,required:a,status:i>=a?"✅":"❌"})),console.log(s.t("messages.breakthroughDivineElementsRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&i>=a&&o>=n?this.performTribulation("karmic",x[m.VoidRefinement],()=>{this.performBreakthrough(m.ImmortalAscension)}):console.log(s.t("messages.breakthroughFailed"))}performBreakthrough(e){const t=this.gameState.player,a=t.realm;t.realm=e,t.maxQi*=te.MAX_QI_MULTIPLIER,t.qi=Math.max(te.MIN_QI_RETAINED,t.qi*te.QI_RETENTION_PERCENTAGE),this.enableComplementaryElementCultivation(e),this.gameState.soul.cultivationInsights.realmBreakthroughs.push(a),e>this.gameState.soul.maxRealmAchieved&&(this.gameState.soul.maxRealmAchieved=e),console.log(s.t("messages.breakthroughAdvanced",{realm:this.getRealmName(e)})),console.log(s.t("messages.maxQiIncreased",{maxQi:t.maxQi}))}enableComplementaryElementCultivation(e){const t=this.gameState.player,a=this.getPrimaryElement();if(!a)return;const n=this.getComplementaryElements(a,t.realm-1),o=this.getComplementaryElements(a,e).filter(c=>!n.includes(c));o.length>0&&console.log(s.t("messages.newElementsUnlocked",{elements:o.join(", ")}))}performTribulation(e,t,a){const n=this.gameState.player,i=this.gameState.soul;let o=t;const c=this.getPrimaryElement();c&&e==="elemental"&&(o+=n.elements[c]/1e3),o+=n.talent/1e3,(e==="karmic"||e==="heart_demon")&&(o+=(i.karmicBalance>0?i.karmicBalance:i.karmicBalance*2)/1e3),console.log(s.t("messages.tribulationStart",{type:e.toUpperCase(),rate:(o*100).toFixed(1)})),this.random.chance(o)?(console.log(s.t("messages.tribulationSuccess")),i.cultivationInsights.tribulationSurvivals++,a()):(console.log(s.t("messages.tribulationFailed")),this.handleTribulationFailure(e))}handleTribulationFailure(e){const t=this.gameState.player;switch(e){case"lightning":const a=t.qi*.5;t.qi=Math.max(0,t.qi-a),console.log(s.t("messages.tribulationLightningFailure",{qiLoss:a.toFixed(1)}));break;case"heart_demon":const n=Math.min(2,t.realm);n>0&&(t.realm-=n,t.maxQi/=Math.pow(te.MAX_QI_MULTIPLIER,n),console.log(s.t("messages.tribulationHeartDemonFailure",{realms:n})));break;case"elemental":const i=this.getPrimaryElement();if(i){const o=t.elements[i]*.3;t.elements[i]=Math.max(0,t.elements[i]-o),console.log(s.t("messages.tribulationElementalFailure",{element:i,affinityLoss:o.toFixed(1)}))}break;case"karmic":this.gameState.soul.karmicBalance-=50,console.log(s.t("messages.tribulationKarmicFailure"));break}}getRealmName(e){return s.getRealmName(e)}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,i])=>{i>t&&(t=i,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},i={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};if(t>=m.QiCondensation&&a.push(n[e]),t>=m.CoreFormation&&a.push(i[e]),t>=m.DivineTransformation){const c=i[e],h=(o=Object.entries(i).find(([g,y])=>y===c))==null?void 0:o[0];h&&a.push(h)}return a}}class le{constructor(e,t,a){this.gameState=e,this.random=t,this.itemEffectProcessor=new ye(e),this.inventorySystem=a,this.healthSystem=new fe(e),this.inventorySystem||console.error("WARNING: CombatSystem created with undefined inventorySystem!")}generateRandomEnemy(){const e=this.random.weightedChoice([m.Mortal,m.QiCondensation,m.FoundationEstablishment],[.5,.3,.2]),t=[s.t("enemies.wildBeast"),s.t("enemies.bandit"),s.t("enemies.spiritBeast"),s.t("enemies.demonCultivator"),s.t("enemies.heavenlyTribulationRemnant"),s.t("enemies.ancientGuardian"),s.t("enemies.chaosSpirit")];let a=20,n=80,i=50,o=150;e>=m.QiCondensation&&(a=200,n=800,i=300,o=1e3),e>=m.FoundationEstablishment&&(a=2e3,n=8e3,i=3e3,o=1e4);const c={id:`enemy-${Date.now()}-${this.random.int(1e3,9999)}`,name:this.random.choice(t),realm:e,qi:this.random.int(a,n),maxQi:this.random.int(i,o),elements:{[l.Metal]:this.random.int(0,50),[l.Wood]:this.random.int(0,50),[l.Water]:this.random.int(0,50),[l.Fire]:this.random.int(0,50),[l.Earth]:this.random.int(0,50)},combatType:this.random.choice([me.Melee,me.Ranged]),aggression:this.random.int(30,90),lootTable:this.generateLootTable(e)};return c.qi=Math.min(c.qi,c.maxQi),this.healthSystem.initializeEnemyHealth(c),c}generateLootTable(e){const t=[];if(this.random.chance(.6)){const a=p.determineItemQuality(e,{chance:i=>this.random.chance(i/100)}),n=p.createItem(u.SpiritStone,a,e);t.push({item:n,dropRate:1,quantity:1})}if(this.random.chance(.3)){const a=[l.Metal,l.Wood,l.Water,l.Fire,l.Earth],n=this.random.choice(a),i=p.determineItemQuality(e,{chance:c=>this.random.chance(c/100)}),o=p.createItem(u.Herb,i,e,n);t.push({item:o,dropRate:1,quantity:1})}if(this.random.chance(.1)){const a=p.determineItemQuality(e,{chance:i=>this.random.chance(i/100)}),n=p.createItem(u.Pill,a,e);t.push({item:n,dropRate:1,quantity:1})}return t}resolveCombat(e){const t=this.gameState.player;console.log(s.t("messages.enemyEncounter",{enemy:e.name,realm:s.getRealmName(e.realm),qi:e.qi,maxQi:e.maxQi,health:e.health,maxHealth:e.maxHealth}));const a=this.itemEffectProcessor.calculateCombatPowerBonus(),n=this.itemEffectProcessor.calculateDefenseBonus(),i=this.itemEffectProcessor.calculateCriticalChanceBonus(),o=(t.qi+t.talent*2+t.realm*100+a)*(1+n/100),c=e.qi+e.realm*50,h=this.calculateElementalCombatBonus(t,e),g=this.calculateElementalCombatBonus(e,t);let y=o*h;const I=c*g,k=Math.min(i/100,.5),P=this.random.chance(k);P&&(console.log(s.t("messages.criticalHit")),y*=2);const _=y/(y+I);if(isNaN(_))return{result:"enemy_win",droppedLoot:this.handlePlayerDefeat(e)};if(this.random.chance(_)){const B=this.calculateDamage(t,e,y,I,P),H=this.healthSystem.applyDamage(e,B,N.Physical);if(console.log(s.t("messages.playerAttack",{damage:H,enemy:e.name})),this.healthSystem.isAlive(e)){const Q=this.calculateDamage(e,t,I,y,!1),et=this.healthSystem.applyDamage(t,Q,N.Physical);if(console.log(s.t("messages.enemyAttack",{damage:et,enemy:e.name})),!this.healthSystem.isAlive(t))return{result:"enemy_win",droppedLoot:this.handlePlayerDefeat(e)}}else return{result:"player_win",droppedLoot:this.handlePlayerVictory(e)}}else{const B=this.calculateDamage(e,t,I,y,!1),H=this.healthSystem.applyDamage(t,B,N.Physical);if(console.log(s.t("messages.enemyAttack",{damage:H,enemy:e.name})),!this.healthSystem.isAlive(t))return{result:"enemy_win",droppedLoot:this.handlePlayerDefeat(e)}}return console.log(s.t("messages.combatFlee")),{result:"flee",droppedLoot:[]}}playerAttack(e){const t=this.gameState.player,a=this.itemEffectProcessor.calculateCombatPowerBonus(),n=this.itemEffectProcessor.calculateDefenseBonus(),i=this.itemEffectProcessor.calculateCriticalChanceBonus(),o=(t.qi+t.talent*2+t.realm*100+a)*(1+n/100),c=e.qi+e.realm*50,h=this.calculateElementalCombatBonus(t,e),g=o*h,y=c,I=Math.min(i/100,.5),k=this.random.chance(I);k&&console.log(s.t("messages.criticalHit"));const P=this.calculateDamage(t,e,g,y,k),_=this.healthSystem.applyDamage(e,P,N.Physical);console.log(s.t("messages.playerAttack",{damage:_,enemy:e.name}));const B=!this.healthSystem.isAlive(e);return{damage:_,enemyDefeated:B,enemyHealth:e.health,enemyMaxHealth:e.maxHealth}}enemyAttack(e,t){const a=t.qi+t.realm*50,n=(e.qi+e.talent*2+e.realm*100)*(1+this.itemEffectProcessor.calculateDefenseBonus()/100),i=this.calculateElementalCombatBonus(t,e),o=a*i,c=this.calculateDamage(t,e,o,n,!1),h=this.healthSystem.applyDamage(e,c,N.Physical);console.log(s.t("messages.enemyAttack",{damage:h,enemy:t.name}));const g=!this.healthSystem.isAlive(e);return{damage:h,playerDefeated:g,playerHealth:e.health,playerMaxHealth:e.maxHealth}}attemptFlee(){const e=this.random.chance(.7);return console.log(s.t("messages.combatFlee")),e}calculateElementalCombatBonus(e,t){let a=null,n=0;if(Object.entries(e.elements||{}).forEach(([h,g])=>{typeof g=="number"&&g>n&&(n=g,a=h)}),!a)return 1;let i=null;if(n=0,Object.entries(t.elements||{}).forEach(([h,g])=>{typeof g=="number"&&g>n&&(n=g,i=h)}),!i)return 1;const o={[l.Wood]:l.Fire,[l.Fire]:l.Earth,[l.Earth]:l.Metal,[l.Metal]:l.Water,[l.Water]:l.Wood},c={[l.Wood]:l.Earth,[l.Earth]:l.Water,[l.Water]:l.Fire,[l.Fire]:l.Metal,[l.Metal]:l.Wood};return o[a]===i?1.25:c[a]===i?.75:1}handlePlayerVictory(e){const t=this.gameState.player,a=Math.floor(e.maxQi*.1),n=this.random.int(1,3);t.qi=Math.min(t.qi+a,t.maxQi),t.talent=Math.min(100,t.talent+n);const i=this.processLoot(e.lootTable);return console.log(s.t("messages.combatVictory",{enemy:e.name,qi:a,talent:n})),i}handlePlayerDefeat(e){const t=this.gameState.player;if(this.random.chance(.3)){const a=this.random.int(1,5),n=this.random.choice(t.meridians.filter(i=>i.isOpen));n&&(n.purity=Math.max(0,n.purity-a),console.log(s.t("messages.meridianDamage",{meridian:n.name,damage:a})))}return console.log(s.t("messages.combatDefeat",{enemy:e.name})),[]}processLoot(e){const t=[];return e.forEach((a,n)=>{if(this.random.chance(a.dropRate)){const i={...a.item,quantity:a.quantity};if(!this.inventorySystem)return console.error("ERROR: InventorySystem is undefined in CombatSystem!"),t;this.inventorySystem.addItem(i),t.push(i)}}),t}calculateDamage(e,t,a,n,i){const o=a/(a+n);let c=Math.floor(o*50)+10;i&&(c*=2);const h=e.realm-t.realm;h>0?c*=1+h*.25:h<0&&(c*=Math.max(.25,1+h*.5));const g=this.random.float(.8,1.2);return c=Math.floor(c*g),Math.max(1,c)}getCombatDifficulty(e){const t=this.gameState.player,a=t.qi+t.talent*2+t.realm*100,i=(e.qi+e.realm*50)/a;return i<.5?"easy":i<1?"medium":i<1.5?"hard":"deadly"}}class Ne{constructor(e,t){this.gameState=e,this.random=t}processRandomEvent(){const e=[{name:s.t("events.fortuitousEncounter"),chance:.25,effect:()=>this.fortuitousEncounter()},{name:s.t("events.tribulationChallenge"),chance:.25,effect:()=>this.tribulationChallenge()},{name:s.t("events.karmicReward"),chance:.25,effect:()=>this.karmicReward()},{name:s.t("events.enemyEncounter"),chance:.25,effect:()=>this.enemyEncounter()}],t=this.random.weightedChoice(e,e.map(a=>a.chance));console.log(s.t("messages.randomEvent",{event:t.name})),t.effect()}fortuitousEncounter(){const e=this.random.int(1,5);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+e),console.log(s.t("messages.fortuitousEncounter",{talent:e}))}tribulationChallenge(){if(this.random.chance(.7)){const e=this.random.int(50,200);this.gameState.player.qi=Math.min(this.gameState.player.qi+e,this.gameState.player.maxQi),console.log(s.t("messages.tribulationSuccess",{qi:e}))}else{const e=Math.floor(this.gameState.player.qi*.1);this.gameState.player.qi=Math.max(0,this.gameState.player.qi-e),console.log(s.t("messages.tribulationFailure",{qiLoss:e}))}}karmicReward(){const e=this.random.int(1,10);this.gameState.soul.karmicBalance+=e,console.log(s.t("messages.karmicReward",{karma:e}))}enemyEncounter(){console.log(s.t("messages.enemyEncounterGeneric"))}processLifeMilestone(e){e===50?this.midLifeCrisis():e===100?this.centuryMilestone():e===200&&this.longevityBreakthrough(),this.random.chance(.05)&&this.processRandomEvent()}midLifeCrisis(){if(console.log(s.t("events.midLifeCrisis")),this.random.chance(.6)){const e=this.random.int(2,8);this.gameState.player.talent+=e,console.log(s.t("messages.midLifeCrisisPositive",{talent:e}))}else{const e=Math.floor(this.gameState.player.qi*.05);this.gameState.player.qi=Math.max(0,this.gameState.player.qi-e),console.log(s.t("messages.midLifeCrisisNegative",{qiLoss:e}))}}centuryMilestone(){console.log(s.t("events.centuryMilestone"));const e=this.random.int(1,3);if(this.gameState.player.talent=Math.min(100,this.gameState.player.talent+e),this.random.chance(.3)){const t=this.random.int(5,15);this.gameState.soul.karmicBalance+=t,console.log(s.t("messages.centuryMilestoneKarmic",{talent:e,karma:t}))}else console.log(s.t("messages.centuryMilestone",{talent:e}))}longevityBreakthrough(){console.log(s.t("events.longevityBreakthrough"));const e=Math.floor(this.gameState.player.maxQi*.1);this.gameState.player.maxQi+=e,this.gameState.player.qi=Math.min(this.gameState.player.qi+e,this.gameState.player.maxQi);const t=this.random.int(3,10);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+t),console.log(s.t("messages.longevityBreakthrough",{qi:e,talent:t}))}processRealmEvent(e){switch(e){case 0:this.processMortalRealmEvents();break;case 1:this.processQiCondensationEvents();break;case 2:this.processFoundationEstablishmentEvents();break}}processMortalRealmEvents(){if(this.random.chance(.1)){console.log(s.t("events.spiritualAwakening"));const e=this.random.int(1,3);this.gameState.player.talent+=e,console.log(s.t("messages.spiritualAwakening",{talent:e}))}}processQiCondensationEvents(){if(this.random.chance(.08)){console.log(s.t("events.meridianInsight"));const e=this.gameState.player.meridians.filter(t=>t.isOpen);if(e.length>0){const t=this.random.choice(e),a=this.random.int(5,15);t.purity=Math.min(100,t.purity+a),console.log(s.t("messages.meridianInsight",{meridian:t.name,purity:a}))}}}processFoundationEstablishmentEvents(){if(this.random.chance(.06)){console.log(s.t("events.elementalHarmony"));const e=this.getPrimaryElement();if(e){const t=this.random.int(5,10);this.gameState.player.elements[e]=Math.min(100,this.gameState.player.elements[e]+t),console.log(s.t("messages.elementalHarmony",{element:e,affinity:t}))}}}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,i])=>{typeof i=="number"&&i>t&&(t=i,a=n)}),a}processDeath(){console.log(s.t("events.deathEvent"));const e=this.gameState.soul;this.random.chance(.2)&&this.specialReincarnation(),this.resetPlayerForNewLife(),console.log(s.t("messages.reincarnationComplete",{lifetime:e.lifetimeCount+1}))}specialReincarnation(){console.log(s.t("events.specialReincarnation"));const e=[()=>{const a=this.random.int(5,15);this.gameState.player.talent+=a,console.log(s.t("messages.specialReincarnationTalent",{talent:a}))},()=>{const a=this.random.int(10,30);this.gameState.soul.karmicBalance+=a,console.log(s.t("messages.specialReincarnationKarma",{karma:a}))},()=>{const a=Object.keys(this.gameState.player.elements),n=this.random.choice(a),i=this.random.int(10,25);this.gameState.player.elements[n]+=i,console.log(s.t("messages.specialReincarnationElement",{element:n,affinity:i}))}];this.random.choice(e)()}resetPlayerForNewLife(){const e=this.gameState.player,t=this.gameState.soul;t.lifetimeCount++,t.totalLifetime+=e.lifetime,e.realm=0,e.qi=0,e.maxQi=100,e.lifetime=0,e.meridians.forEach(a=>{a.isOpen&&(a.purity=Math.max(10,a.purity*.1))}),Object.keys(e.elements).forEach(a=>{const n=a;e.elements[n]=Math.max(0,e.elements[n]*.2)}),e.talent=Math.max(10,e.talent*.5)}}class ot{constructor(){this.SAVE_KEY_PREFIX="culsim-save",this.MAX_SAVE_SLOTS=5}saveGame(e,t=0){try{if(t<0||t>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${t}. Must be between 0 and ${this.MAX_SAVE_SLOTS-1}`),!1;const a=`${this.SAVE_KEY_PREFIX}-${t}`,i={state:this.serializeGameState(e),timestamp:Date.now(),version:"1.0.0"};return localStorage.setItem(a,JSON.stringify(i)),!0}catch(a){return console.error("Failed to save game:",a),!1}}loadGame(e=0){try{if(e<0||e>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${e}. Must be between 0 and ${this.MAX_SAVE_SLOTS-1}`),null;const t=`${this.SAVE_KEY_PREFIX}-${e}`,a=localStorage.getItem(t);if(!a)return console.log(`No save found in slot ${e}`),null;const n=JSON.parse(a);if(!this.validateSaveData(n))return console.error("Invalid save data structure"),null;const i=this.deserializeGameState(n.state);return console.log(`Game loaded from slot ${e} (saved: ${new Date(n.timestamp).toLocaleString()})`),i}catch(t){return console.error("Failed to load game:",t),null}}getAvailableSaveSlots(){const e=[];for(let t=0;t<this.MAX_SAVE_SLOTS;t++){const a=`${this.SAVE_KEY_PREFIX}-${t}`,n=localStorage.getItem(a);if(n)try{const i=JSON.parse(n);this.validateSaveData(i)?e.push({slot:t,timestamp:i.timestamp,hasData:!0}):e.push({slot:t,timestamp:0,hasData:!1})}catch{e.push({slot:t,timestamp:0,hasData:!1})}else e.push({slot:t,timestamp:0,hasData:!1})}return e}deleteSaveSlot(e){try{if(e<0||e>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${e}`),!1;const t=`${this.SAVE_KEY_PREFIX}-${e}`;return localStorage.removeItem(t),console.log(`Save slot ${e} deleted`),!0}catch(t){return console.error("Failed to delete save slot:",t),!1}}exportSaveData(e=0){try{const t=`${this.SAVE_KEY_PREFIX}-${e}`,a=localStorage.getItem(t);return a||null}catch(t){return console.error("Failed to export save data:",t),null}}importSaveData(e,t=0){try{if(t<0||t>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${t}`),!1;const a=JSON.parse(e);if(!this.validateSaveData(a))return console.error("Invalid save data format"),!1;const n=`${this.SAVE_KEY_PREFIX}-${t}`;return localStorage.setItem(n,e),console.log(`Save data imported to slot ${t}`),!0}catch(a){return console.error("Failed to import save data:",a),!1}}autoSave(e){return this.saveGame(e,0)}serializeGameState(e){return JSON.stringify(e,null,2)}deserializeGameState(e){const t=JSON.parse(e),a={player:{id:"player-1",name:"Cultivator",realm:0,qi:0,maxQi:100,meridians:[],elements:{metal:0,wood:0,water:0,fire:0,earth:0},talent:50,items:[],lifetime:0},soul:{id:"soul-1",lifetimeCount:1,totalLifetime:0,cultivationInsights:{realmBreakthroughs:[],techniqueMastery:[],elementalUnderstanding:{metal:0,wood:0,water:0,fire:0,earth:0},tribulationSurvivals:0},karmicBalance:0,maxRealmAchieved:0,items:[]},time:0,seed:0};return{player:{...a.player,...t.player},soul:{...a.soul,...t.soul},time:t.time||a.time,isRunning:!1,seed:t.seed||a.seed}}validateSaveData(e){try{return e&&typeof e=="object"&&e.state&&typeof e.timestamp=="number"&&e.version&&e.timestamp>0}catch{return!1}}clearAllSaveData(){try{for(let e=0;e<this.MAX_SAVE_SLOTS;e++){const t=`${this.SAVE_KEY_PREFIX}-${e}`;localStorage.removeItem(t)}return console.log("All save data cleared"),!0}catch(e){return console.error("Failed to clear save data:",e),!1}}getSaveStatistics(){const t=this.getAvailableSaveSlots().filter(n=>n.hasData),a=t.map(n=>n.timestamp).filter(n=>n>0);return{totalSlots:this.MAX_SAVE_SLOTS,usedSlots:t.length,oldestSave:a.length>0?Math.min(...a):null,newestSave:a.length>0?Math.max(...a):null}}}class w{constructor(e,t,a){this.inventorySystem=a,this.gameController=new rt(e,()=>this.update(),t,()=>this.saveGame());const n=this.gameController.getStateReference(),i=this.gameController.getRandom();this.cultivationSystem=new Me(n),this.meridianSystem=new ke(n,i),this.elementSystem=new Ae(n),this.breakthroughSystem=new Re(n,i),this.combatSystem=new le(n,i,a),this.eventSystem=new Ne(n,i),this.healthSystem=new fe(n),this.saveLoadSystem=new ot}start(){this.gameController.start()}stop(){this.gameController.stop()}update(){const e=this.gameController.getStateReference();this.cultivationSystem.processCultivation(),this.healthSystem.regenerateHealth(e.player),this.gameController.getRandom().chance(.02)&&this.eventSystem.processRandomEvent()}cultivate(){const e=this.cultivationSystem.cultivate();console.log(s.t("ui.manualCultivationComplete",{qi:e.toFixed(2)}))}attemptBreakthrough(){this.breakthroughSystem.attemptBreakthrough()}attemptMeridianOpening(e){this.meridianSystem.attemptMeridianOpening(e)}attemptMeridianBreakthrough(e){this.meridianSystem.attemptMeridianBreakthrough(e)}getPrimaryElement(){return this.elementSystem.getPrimaryElement()}getComplementaryElements(e,t){return this.elementSystem.getComplementaryElements(e,t)}getMeridianEffectiveCap(e){return this.meridianSystem.getMeridianEffectiveCap(e)}getRealmName(e){return this.gameController.getRealmName(e)}getState(){return this.gameController.getState()}saveGame(){const e=this.gameController.getState();this.saveLoadSystem.saveGame(e)}loadGame(){const e=this.saveLoadSystem.loadGame();return e?(console.log("🔄 Loading game state:",{meridians:e.player.meridians.map((t,a)=>({index:a,name:t.name,isOpen:t.isOpen,purity:t.purity}))}),this.gameController.setState(e),this.reinitializeSubsystems(e),!0):!1}reinitializeSubsystems(e){const t=this.gameController.getRandom();this.cultivationSystem=new Me(e),this.meridianSystem=new ke(e,t),this.elementSystem=new Ae(e),this.breakthroughSystem=new Re(e,t),this.combatSystem=new le(e,t,this.inventorySystem),this.eventSystem=new Ne(e,t)}generateRandomEnemy(){return this.combatSystem.generateRandomEnemy()}resolveCombat(e){return this.combatSystem.resolveCombat(e)}playerAttack(e){return this.combatSystem.playerAttack(e)}enemyAttack(e){const t=this.getState().player;return this.combatSystem.enemyAttack(t,e)}attemptFlee(){return this.combatSystem.attemptFlee()}handlePlayerVictory(e){return this.combatSystem.handlePlayerVictory(e)}handlePlayerDefeat(e){return this.combatSystem.handlePlayerDefeat(e)}calculateQiGatheringSpeed(){return this.cultivationSystem.calculateQiGatheringSpeed()}debugAddQi(){const e=this.gameController.getState(),t=e.player.maxQi*.1;e.player.qi=Math.min(e.player.qi+t,e.player.maxQi),console.log(`🐛 Debug: Added ${t} qi to player. Current qi: ${e.player.qi.toFixed(1)}/${e.player.maxQi}`)}debugAddMeridianProgress(e=10){this.meridianSystem.debugAddMeridianProgress(e)}debugAddElementProgress(e=10){this.elementSystem.debugAddElementProgress(e)}updateInventorySystem(e){this.inventorySystem=e;const t=this.gameController.getStateReference(),a=this.gameController.getRandom();this.combatSystem=new le(t,a,e)}}class V{constructor(e){this.maxSlots=100,this.storageExpansions=0,this.player=e,this.initializeInventory()}initializeInventory(){this.player.inventory||(this.player.inventory={items:[],equippedItems:{[E.Weapon]:void 0,[E.Armor]:void 0,[E.Amulet]:void 0,[E.Charm]:void 0,[E.Manual]:void 0,[E.SpiritStone]:void 0},storageCapacity:this.maxSlots,weight:0,maxWeight:1e3,organization:{bags:[],categories:this.initializeCategories()}}),this.updateCategories()}initializeCategories(){return{[u.Weapon]:[],[u.Armor]:[],[u.Pill]:[],[u.Herb]:[],[u.SpiritStone]:[],[u.Charm]:[],[u.Manual]:[],[u.Drug]:[],[u.Poison]:[],[u.BeastPart]:[],artifacts:[],resources:[],insights:[]}}addItem(e){if(console.log("DEBUG: InventorySystem.addItem called with:",p.getTranslatedItemName(e),e.category),this.isInventoryFull())return console.log("DEBUG: Inventory is full"),!1;if(console.log("DEBUG: Inventory not full, checking if stackable"),e.stackable){console.log("DEBUG: Item is stackable");const t=this.findStackableItem(e);if(t)return console.log("DEBUG: Found existing stack, updating quantity"),t.quantity+=e.quantity,this.updateWeight(),console.log("DEBUG: Stack updated successfully"),!0}return console.log("DEBUG: Adding as new item"),this.player.inventory.items.push(e),console.log("DEBUG: Item pushed to inventory"),this.updateWeight(),console.log("DEBUG: Weight updated"),this.updateCategories(),console.log("DEBUG: Categories updated"),console.log("DEBUG: Item added successfully"),!0}removeItem(e,t=1){const a=this.player.inventory.items.findIndex(i=>i.id===e);if(a===-1)return!1;const n=this.player.inventory.items[a];return n.stackable&&n.quantity>t?n.quantity-=t:this.player.inventory.items.splice(a,1),this.updateWeight(),this.updateCategories(),!0}findStackableItem(e){return this.player.inventory.items.find(t=>t.stackable&&t.nameQuality===e.nameQuality&&t.nameBase===e.nameBase&&t.nameElement===e.nameElement&&t.nameRealm===e.nameRealm&&t.category===e.category&&t.quality===e.quality&&t.element===e.element)||null}isInventoryFull(){return this.player.inventory.items.length>=this.getMaxCapacity()}getMaxCapacity(){return this.maxSlots+this.storageExpansions*25}updateWeight(){this.player.inventory.weight=this.player.inventory.items.reduce((e,t)=>e+(t.stackable?t.quantity:1),0)}updateCategories(){console.log("DEBUG: updateCategories called"),this.player.inventory.organization.categories=this.initializeCategories(),console.log("DEBUG: Categories reset");for(const e of this.player.inventory.items)console.log("DEBUG: Processing item:",p.getTranslatedItemName(e),"category:",e.category),e.category in this.player.inventory.organization.categories?(console.log("DEBUG: Category exists, pushing item"),this.player.inventory.organization.categories[e.category].push(e)):console.log("DEBUG: Category does not exist for item:",e.category);console.log("DEBUG: updateCategories completed")}getItemsByCategory(e){return this.player.inventory.organization.categories[e]||[]}getItems(e,t){let a=[...this.player.inventory.items];return e&&(a=this.applyFilters(a,e)),t&&(a=this.applySorting(a,t)),a}applyFilters(e,t){return e.filter(a=>{if(t.category&&a.category!==t.category||t.quality&&a.quality<t.quality||t.element&&a.element!==t.element||t.realm&&a.realm>t.realm)return!1;if(t.searchText){const n=t.searchText.toLowerCase();if(!p.getTranslatedItemName(a).toLowerCase().includes(n)&&!p.getTranslatedItemDescription(a).toLowerCase().includes(n))return!1}return!0})}applySorting(e,t){return e.sort((a,n)=>{let i=0;switch(t.by){case"name":i=p.getTranslatedItemName(a).localeCompare(p.getTranslatedItemName(n));break;case"quality":i=n.quality-a.quality;break;case"value":i=n.value-a.value;break;case"category":i=a.category.localeCompare(n.category);break;case"quantity":i=n.quantity-a.quantity;break}return t.direction==="desc"?-i:i})}equipItem(e,t){const a=this.player.inventory.items.find(n=>n.id===e);return!a||!this.canEquipToSlot(a,t)||this.player.inventory.equippedItems[t]&&!this.unequipItem(t)?!1:(this.removeItem(e),this.player.inventory.equippedItems[t]=a,!0)}unequipItem(e){const t=this.player.inventory.equippedItems[e];return!t||!this.addItem(t)?!1:(delete this.player.inventory.equippedItems[e],!0)}canEquipToSlot(e,t){switch(t){case E.Weapon:return e.category===u.Weapon;case E.Armor:return e.category===u.Armor;case E.Amulet:case E.Charm:return e.category===u.Charm;case E.Manual:return e.category===u.Manual;case E.SpiritStone:return e.category===u.SpiritStone;default:return!1}}useItem(e){const t=this.player.inventory.items.find(a=>a.id===e);return!t||!this.isConsumable(t)?!1:(this.applyItemEffects(t),this.removeItem(e,1),!0)}isConsumable(e){return[u.Pill,u.Drug,u.Herb].includes(e.category)}applyItemEffects(e){console.log(`Applying effects from ${p.getTranslatedItemName(e)}:`,e.effects)}getEquippedItems(){return this.player.inventory.equippedItems}getInventorySummary(){const e=this.player.inventory.items,t=Object.keys(this.player.inventory.organization.categories).reduce((a,n)=>(a[n]=this.player.inventory.organization.categories[n].length,a),{});return{totalItems:e.reduce((a,n)=>a+n.quantity,0),uniqueItems:e.length,totalValue:e.reduce((a,n)=>a+n.value*n.quantity,0),weight:this.player.inventory.weight,capacity:this.getMaxCapacity(),categories:t}}expandCapacity(e=25){this.storageExpansions+=Math.ceil(e/25),this.player.inventory.storageCapacity=this.getMaxCapacity()}getPlayer(){return this.player}}class ve{constructor(e){this.inventorySystem=e,this.player=e.getPlayer()}useItem(e,t){const a=this.findItem(e);if(!a)return{success:!1,message:"Item not found in inventory"};switch(a.category){case u.Pill:case u.Drug:case u.Herb:return this.consumeItem(a);case u.Weapon:case u.Armor:case u.Charm:return this.equipItem(a);case u.Manual:return this.studyManual(a);case u.SpiritStone:return t==="enhance"?this.enhanceSpiritStone(a):this.absorbSpiritStone(a);default:return{success:!1,message:"This item cannot be used directly"}}}consumeItem(e){if(e.realm>this.player.realm)return{success:!1,message:`Your cultivation realm is too low to safely consume this ${e.category.toLowerCase()}`};const t=this.applyEffects(e.effects,e);return this.inventorySystem.removeItem(e.id,1),{success:!0,message:`Consumed ${p.getTranslatedItemName(e)}`,effects:t}}equipItem(e){const t=this.getEquipmentSlotForItem(e);return t?e.realm>this.player.realm?{success:!1,message:`Your cultivation realm is too low to equip this ${e.category.toLowerCase()}`}:this.inventorySystem.equipItem(e.id,t)?{success:!0,message:`Equipped ${p.getTranslatedItemName(e)} to ${t}`,effects:e.effects}:{success:!1,message:"Failed to equip item (inventory full or invalid slot)"}:{success:!1,message:"Cannot determine equipment slot for this item"}}studyManual(e){const t=this.applyEffects(e.effects,e);return this.inventorySystem.removeItem(e.id,1),{success:!0,message:`Studied ${p.getTranslatedItemName(e)} and gained cultivation insights`,effects:t}}absorbSpiritStone(e){const t=this.applyEffects(e.effects,e);if(e.durability){e.durability--;const n=[.2,.15,.1,.07,.05,.03][e.quality]||.2,i=e.effects.find(o=>o.type==="qi_absorption"&&!o.isPercentage);if(i){const o=i.value,c=Math.max(1,Math.floor(o*n));i.value=Math.max(1,o-c)}if(e.durability<=0)return this.inventorySystem.removeItem(e.id,1),{success:!0,message:`Absorbed the last qi from ${p.getTranslatedItemName(e)} - spirit stone depleted`,effects:t}}return{success:!0,message:`Absorbed qi from ${p.getTranslatedItemName(e)}`,effects:t}}enhanceSpiritStone(e){return this.inventorySystem.getEquippedItems()[E.SpiritStone]?{success:!1,message:"You already have a spirit stone equipped for qi gathering enhancement"}:this.inventorySystem.equipItem(e.id,E.SpiritStone)?{success:!0,message:`Enhanced qi gathering with ${p.getTranslatedItemName(e)}. Automatic qi absorption increased!`}:{success:!1,message:"Failed to equip spirit stone"}}unequipItem(e){return this.inventorySystem.unequipItem(e)?{success:!0,message:`Unequipped item from ${e}`}:{success:!1,message:"No item equipped in this slot"}}combineItems(e){if(e.length<2)return{success:!1,message:"Need at least 2 items to combine"};const t=e.map(a=>this.findItem(a)).filter(a=>a!==null);if(t.length!==e.length)return{success:!1,message:"One or more items not found"};if(!this.canCombineItems(t))return{success:!1,message:"These items cannot be combined"};if(this.areItemsIdentical(t)){const a=t[0],n=t.reduce((o,c)=>o+c.quantity,0);t.forEach(o=>this.inventorySystem.removeItem(o.id,o.quantity));const i={...a,quantity:Math.min(n,a.maxStack||99)};return this.inventorySystem.addItem(i),{success:!0,message:`Combined ${t.length} stacks into ${i.quantity} ${p.getTranslatedItemName(a)}`,result:i}}return{success:!1,message:"Advanced combining not yet implemented"}}applyEffects(e,t){const a=[];for(const n of e)try{this.applySingleEffect(n,t),a.push(n)}catch(i){console.error(`Failed to apply effect ${n.type}:`,i)}return a}applySingleEffect(e,t){const a=e.isPercentage?this.getBaseStatForEffect(e.type)*e.value/100:e.value;switch(e.type){case"qi_absorption":this.player.qi=Math.min(this.player.maxQi,this.player.qi+a);break;case"health_recovery":if(this.player.health!==void 0&&this.player.maxHealth!==void 0){const n=Math.min(this.player.maxHealth-this.player.health,a);this.player.health+=n,console.log(s.t("messages.healthRecovered",{amount:n}))}break;case"cultivation_speed":console.log(s.t("messages.cultivationSpeedIncreased",{value:a,duration:e.duration}));break;case"combat_power":console.log(s.t("messages.combatPowerIncreased",{value:a}));break;case"element_boost":e.element&&this.player.elements[e.element]!==void 0&&(this.player.elements[e.element]=Math.min(100,this.player.elements[e.element]+a));break;case"comprehension":console.log(s.t("messages.comprehensionIncreased",{value:a,duration:e.duration}));break;case"luck":console.log(s.t("messages.luckIncreased",{value:a,duration:e.duration}));break;default:console.log(s.t("messages.effectApplied",{effectType:e.type,value:a}))}}getBaseStatForEffect(e){switch(e){case"qi_absorption":return this.player.maxQi;case"health_recovery":return this.player.maxHealth||100;case"cultivation_speed":return 100;case"combat_power":return 100;default:return 100}}getEquipmentSlotForItem(e){const a={[u.Weapon]:[E.Weapon],[u.Armor]:[E.Armor],[u.Charm]:[E.Charm,E.Amulet],[u.SpiritStone]:[E.SpiritStone],[u.Manual]:[E.Manual]}[e.category];if(!a||a.length===0)return null;if(a.length===1)return a[0];const n=this.inventorySystem.getEquippedItems();for(const i of a)if(!n[i])return i;return a[0]}findItem(e){return this.inventorySystem.getItems().find(t=>t.id===e)||null}canCombineItems(e){return this.areItemsIdentical(e)}areItemsIdentical(e){if(e.length<2)return!1;const t=e[0];return e.every(a=>a.nameQuality===t.nameQuality&&a.nameBase===t.nameBase&&a.nameElement===t.nameElement&&a.nameRealm===t.nameRealm&&a.category===t.category&&a.quality===t.quality&&a.element===t.element&&a.realm===t.realm)}getItemTooltip(e){let t=`${p.getTranslatedItemName(e)}
`;return t+=`Quality: ${f[e.quality]}
`,t+=`Category: ${e.category.replace("_"," ")}
`,e.element&&(t+=`Element: ${e.element}
`),t+=`Realm: ${m[e.realm]}
`,t+=`Value: ${e.value} essence
`,e.durability&&e.maxDurability&&(t+=`Durability: ${e.durability}/${e.maxDurability}
`),e.quantity>1&&(t+=`Quantity: ${e.quantity}
`),t+=`
Effects:
`,e.effects.forEach(a=>{const n=a.isPercentage?`${a.value}%`:a.value,i=a.element?` (${a.element})`:"",o=a.duration?` for ${a.duration} days`:"";t+=`• ${a.type.replace("_"," ")}: ${n}${i}${o}
`}),t+=`
${p.getTranslatedItemDescription(e)}`,t}getEquippedEffects(){const e=this.inventorySystem.getEquippedItems(),t={[E.Weapon]:[],[E.Armor]:[],[E.Amulet]:[],[E.Charm]:[],[E.Manual]:[],[E.SpiritStone]:[]};return Object.entries(e).forEach(([a,n])=>{n&&(t[a]=n.effects)}),t}}const _e=document.getElementById("player-status"),xe=document.getElementById("cultivation-info"),Ee=document.getElementById("meridian-info");document.getElementById("meridian-controls");const ae=document.getElementById("meridian-select"),ne=document.getElementById("unlock-meridian-btn"),lt=document.getElementById("elements-info"),De=document.getElementById("time-info"),K=document.getElementById("game-output"),we=document.getElementById("cultivate-btn"),$e=document.getElementById("breakthrough-btn"),Ge=document.querySelectorAll(".nav-tab"),Pe=document.querySelector(".game-info"),Be=document.getElementById("combat-page"),ce=document.getElementById("inventory-page"),ue=document.getElementById("enemy-display"),Oe=document.getElementById("find-enemy-btn"),$=document.getElementById("attack-btn"),G=document.getElementById("flee-btn"),he=document.getElementById("combat-stats"),de=document.getElementById("combat-loot"),He=document.getElementById("inventory-search"),Qe=document.getElementById("category-filter"),Ke=document.getElementById("quality-filter"),Ue=document.getElementById("sort-select"),mt=document.getElementById("total-items"),ct=document.getElementById("unique-items"),ut=document.getElementById("total-value"),ht=document.getElementById("inventory-capacity"),ge=document.getElementById("item-grid"),Se=document.getElementById("item-details"),be=document.getElementById("item-actions"),Le=document.getElementById("equipment-slots"),qe={};document.getElementById("artifact-count");document.getElementById("inventory-space");document.getElementById("artifact-grid");document.getElementById("artifact-details");let v=null,A=[];function We(r){Ge.forEach(e=>{e.classList.remove("active"),e.dataset.page===r&&e.classList.add("active")}),Pe.classList.toggle("active",r==="overview"),Be.classList.toggle("active",r!=="overview"),ce.classList.toggle("active",r==="inventory"),Pe.style.display=r==="overview"?"grid":"none",Be.style.display=r==="combat"?"block":"none",ce.style.display=r==="inventory"?"block":"none",r==="inventory"&&(F(),s.applyTranslations())}function Ve(){Le.innerHTML="",Object.values(E).forEach(e=>{const t=document.createElement("div");t.className="equipment-slot",t.setAttribute("data-slot",e);const a=document.createElement("div");a.className="slot-label";const n=s.t(`equipmentSlots.${e.replace(" ","")}`);a.textContent=n;const i=document.createElement("div");i.className="slot-content",i.id=`${e}-slot`,i.innerHTML='<div class="equipment-empty">'+s.t("ui.empty")+"</div>",t.appendChild(a),t.appendChild(i),Le.appendChild(t),qe[e]=i})}window.generateEquipmentSlots=Ve;const dt=document.getElementById("game-title");document.getElementById("player-status-title");document.getElementById("cultivation-title");document.getElementById("meridians-title");document.getElementById("elements-title");document.getElementById("time-title");document.getElementById("debug-title");const je=document.getElementById("debug-add-qi-btn"),ze=document.getElementById("debug-add-meridian-btn"),Ye=document.getElementById("debug-add-element-btn"),Xe=document.getElementById("debug-add-spirit-stone-btn");function Fe(r){if(r<30)return`${r} ${s.t("ui.days")}`;if(r<365){const e=Math.floor(r/30),t=r%30;return t===0?`${e} ${s.t("ui.months")}`:`${e} ${s.t("ui.months")}, ${t} ${s.t("ui.days")}`}else{const e=Math.floor(r/365),t=r%365,a=Math.floor(t/30),n=t%30;let i=`${e} ${s.t("ui.years")}`;return a>0&&(i+=`, ${a} ${s.t("ui.months")}`),n>0&&(i+=`, ${n} ${s.t("ui.days")}`),i}}function W(){if(!v){ue.innerHTML='<div class="no-enemy">'+s.t("messages.noEnemyEncountered")+"</div>",$.disabled=!0,G.disabled=!0;return}const r=`
    <div class="enemy-info">
      <div class="enemy-name">${v.name}</div>
      <div class="enemy-stats">
        <div class="enemy-stat">${s.t("status.realm")}: ${d.getRealmName(v.realm)}</div>
        <div class="enemy-stat">Qi: ${v.qi.toFixed(0)}/${v.maxQi.toFixed(0)}</div>
        <div class="enemy-stat">${s.t("status.health")}: ${v.health.toFixed(0)}/${v.maxHealth.toFixed(0)}</div>
        <div class="enemy-stat">${s.t("status.type")}: ${s.getCombatTypeName(v.combatType)}</div>
        <div class="enemy-stat">${s.t("status.aggression")}: ${v.aggression}%</div>
      </div>
    </div>
  `;ue.innerHTML=r,$.disabled=!1,G.disabled=!1}function ie(){if(!v){he.textContent=s.t("messages.noActiveCombat");return}const r=d.getState().player,e=r.qi+r.talent*2+r.realm*100,t=v.qi+v.realm*50;he.innerHTML=`
    <strong>${s.t("messages.yourPower")}</strong> ${e.toFixed(0)}<br>
    <strong>${s.t("messages.enemyPower")}</strong> ${t.toFixed(0)}<br>
    <strong>${s.t("messages.winChance")}</strong> ${(e/(e+t)*100).toFixed(1)}%
  `}function se(){if(A.length===0){de.textContent=s.t("messages.noLootAvailable");return}const r=A.map(e=>{let t="�";switch(e.category){case"spirit_stone":t="💎";break;case"pill":t="💊";break;case"herb":t="🌿";break;case"weapon":t="⚔️";break;case"armor":t="🛡️";break;case"charm":t="📿";break;case"manual":t="📚";break}return`${t} ${p.getTranslatedItemName(e)}: ${p.getTranslatedItemDescription(e)} (Value: ${e.value})`}).join("<br>");de.innerHTML=r}function gt(){v=d.generateRandomEnemy(),A=[],W(),ie(),se(),console.log(s.t("messages.foundEnemy",{enemy:v.name}))}function pt(){if(!v)return;$.disabled=!0,G.disabled=!0;const r=d.playerAttack(v);if(W(),r.enemyDefeated){A=d.handlePlayerVictory(v),console.log(s.t("messages.victoryGainedLoot",{count:A.length})),v=null,W(),ie(),se();return}setTimeout(()=>{d.enemyAttack(v).playerDefeated&&(A=d.handlePlayerDefeat(v),console.log(s.t("messages.defeatedBy",{enemy:v.name})),v=null),$.disabled=!1,G.disabled=!1,W(),ie(),se()},1e3)}function yt(){if(!v)return;d.attemptFlee()?(console.log(s.t("messages.successfullyFled",{enemy:v.name})),v=null):(console.log(s.t("messages.failedToFlee",{enemy:v.name})),d.enemyAttack(v).playerDefeated&&(A=d.handlePlayerDefeat(v),console.log(s.t("messages.defeatedBy",{enemy:v.name})),v=null)),A=[],W(),ie(),se()}function F(){if(!d||!C)return;const r=C.getInventorySummary();mt.textContent=r.totalItems.toString(),ct.textContent=r.uniqueItems.toString(),ut.textContent=`${r.totalValue.toString()} $`,ht.textContent=`${r.weight}/${r.capacity}`,ft();const e=He.value,t=Qe.value,a=Ke.value,n=Ue.value,i={searchText:e||void 0,category:t||void 0,quality:a?f[a]:void 0},o={by:n,direction:"asc"},c=C.getItems(i,o);vt(c)}function ft(){if(!d)return;const e=d.getState().player.inventory;if(!e)return;const t=e.equippedItems;Object.values(E).forEach(a=>{const n=qe[a];if(!n)return;const i=t[a];i?(n.innerHTML=`
        <div class="equipment-item" data-item-id="${i.id}">
          <div class="item-name quality-${f[i.quality].toLowerCase()}">${p.getTranslatedItemName(i)}</div>
          <div class="item-quality quality-${f[i.quality].toLowerCase()}">${f[i.quality]}</div>
        </div>
      `,n.classList.add("equipped")):(n.innerHTML='<div class="equipment-empty">'+s.t("ui.empty")+"</div>",n.classList.remove("equipped"))})}function vt(r){if(r.length===0){ge.innerHTML='<div class="no-items">'+s.t("ui.noItemsMatchFilters")+"</div>",Se.innerHTML=s.t("ui.selectItemToViewDetails"),be.innerHTML="";return}const e=r.map(t=>`
    <div class="item-card" data-item-id="${t.id}">
      <div class="item-name quality-${f[t.quality].toLowerCase()}">${p.getTranslatedItemName(t)}</div>
      <div class="item-category">${s.getCategoryName(t.category)}</div>
      <div class="item-quantity">${t.stackable?`${t.quantity}`:""}</div>
      <div class="item-value">${t.value}$</div>
    </div>
  `).join("");ge.innerHTML=e}function Et(r){var i,o;if(!C||!L)return;const t=C.getItems().find(c=>c.id===r);if(!t)return;document.querySelectorAll(".item-card").forEach(c=>{c.classList.remove("selected")}),(i=document.querySelector(`[data-item-id="${r}"]`))==null||i.classList.add("selected");const a=((o=t.effects)==null?void 0:o.map(c=>`${s.getEffectTypeName(c.type)}: ${c.value}${c.element?` (${s.getElementName(c.element)})`:""}`).join("<br>"))||s.t("ui.noSpecialEffects");Se.innerHTML=`
    <div class="item-detail-header">
      <h3>${p.getTranslatedItemName(t)}</h3>
      <div class="item-detail-quality quality-${f[t.quality].toLowerCase()}">${s.t("ui.rarity")}: ${s.getQualityName(t.quality)}</div>
    </div>
    <div class="item-detail-category">${s.t("ui.category")}: ${s.getCategoryName(t.category)}</div>
    <div class="item-detail-description">${p.getTranslatedItemDescription(t)}</div>
    <div class="item-detail-effects">${a}</div>
    <div class="item-detail-value">${s.t("ui.value")} ${t.value}💰</div>
    ${t.durability!==void 0&&t.maxDurability!==void 0?`<div class="item-detail-durability">${s.t("ui.durability")} ${t.durability}/${t.maxDurability}</div>`:""}
    ${t.stackable?`<div class="item-detail-quantity">${s.t("ui.quantity")} ${t.quantity}</div>`:""}
  `;let n="";(t.category===u.Pill||t.category===u.Drug||t.category===u.Herb)&&(n+='<button class="action-btn" data-action="use">'+s.t("ui.use")+"</button>"),(t.category===u.Weapon||t.category===u.Armor||t.category===u.Charm)&&(n+='<button class="action-btn" data-action="equip">'+s.t("ui.equip")+"</button>"),t.category===u.Manual&&(n+='<button class="action-btn" data-action="study">'+s.t("ui.study")+"</button>"),t.category===u.SpiritStone&&(n+='<button class="action-btn" data-action="absorb">'+s.t("ui.absorb")+"</button>",n+='<button class="action-btn" data-action="enhance">'+s.t("ui.enhanceQiGathering")+"</button>"),t.stackable&&t.quantity>1&&(n+='<button class="action-btn" data-action="drop">'+s.t("ui.drop")+"</button>"),be.innerHTML=n||s.t("ui.noActionsAvailable"),document.querySelectorAll(".action-btn").forEach(c=>{c.addEventListener("click",()=>{const h=c.dataset.action;St(t,h)})})}function St(r,e){if(!L)return;let t;switch(e){case"use":case"equip":case"study":case"absorb":case"enhance":t=L.useItem(r.id,e);break;case"drop":t={success:C.removeItem(r.id,1),message:"Item dropped"};break;default:t={success:!1,message:"Unknown action"}}t.success?(q(`✅ ${t.message}`),F(),S(),(e==="use"||e==="equip"||e==="study"||e==="absorb"||e==="enhance"||e==="drop")&&(Se.innerHTML="Select an item to view details",be.innerHTML="",document.querySelectorAll(".item-card").forEach(a=>{a.classList.remove("selected")}))):q(`❌ ${t.message}`)}const j=document.createElement("select");j.id="language-select";const bt=[{code:"en",name:"English"},{code:"vi",name:"Tiếng Việt"}];bt.forEach(r=>{const e=document.createElement("option");e.value=r.code,e.textContent=r.name,r.code===s.getLanguage()&&(e.selected=!0),j.appendChild(e)});const z=document.createElement("button");z.textContent=s.t("ui.saveGame");z.id="save-btn";const Y=document.createElement("button");Y.textContent=s.t("ui.loadGame");Y.id="load-btn";const X=document.createElement("button");X.textContent=s.t("ui.clearSavedGame");X.id="clear-btn";const Je=document.querySelector(".top-controls"),re=document.createElement("div");re.className="control-group";re.innerHTML='<label for="language-select" style="margin-right: 5px;">🌐</label>';re.appendChild(j);const J=document.createElement("div");J.className="control-group";J.appendChild(z);J.appendChild(Y);J.appendChild(X);Je.appendChild(re);Je.appendChild(J);function qt(){document.querySelectorAll(".card-toggle").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),e.dataset.card;const a=e.closest(".info-card"),n=a==null?void 0:a.querySelector(".card-content");a&&n&&(a.classList.contains("card-collapsed")?(a.classList.remove("card-collapsed"),e.textContent="−"):(a.classList.add("card-collapsed"),e.textContent="+"))})})}let C,L,d,O=!1;function Ct(){return typeof window<"u"&&window.localStorage?localStorage.getItem("culsim-save-0")!==null:!1}function Tt(){if(Ct()){q(s.t("ui.savedGameDetected"));const e=new w(void 0,S).getState().player;if(C=new V(e),d=new w(void 0,S,C),d.loadGame()){const a=d.getState().player,n=new V(a);d.updateInventorySystem(n),C=n,L=new ve(C),d.start(),O=!0,q(s.t("ui.gameLoaded")),S()}else q(s.t("ui.startingNewGame")),pe()}else q(s.t("ui.welcomeMessage")),q(s.t("ui.startingNewGame")),pe()}function pe(){const e=new w(void 0,S).getState().player;C=new V(e),d=new w(void 0,S,C),L=new ve(C),d.start(),O=!0,q(s.t("ui.gameStarted")),S()}function S(){if(!d)return;const r=d.getState(),e=r.player,t=r.soul;_e.innerHTML=`
    <strong>${s.t("status.player")}:</strong> ${e.name}<br>
    <strong>${s.t("status.realm")}:</strong> ${s.getRealmName(e.realm)}<br>
    <strong>${s.t("status.health")}:</strong> ${e.health} / ${e.maxHealth}<br>
    <strong>${s.t("status.qi")}:</strong> ${e.qi.toFixed(1)} / ${e.maxQi}<br>
    <strong>${s.t("ui.qiGathering")}:</strong> ${d.calculateQiGatheringSpeed().toFixed(3)} ${s.t("ui.qiPerDay")}<br>
    <strong>${s.t("status.meridians")}:</strong> ${e.meridians.filter(o=>o.isOpen).length}/12 ${s.t("ui.meridiansOpen")}<br>
    <strong>${s.t("status.talent")}:</strong> ${e.talent}/100<br>
    <strong>${s.t("status.karma")}:</strong> ${t.karmicBalance>0?"+":""}${t.karmicBalance}
  `,xe.innerHTML=`
    <strong>${s.t("status.lifetime")}:</strong> ${Fe(e.lifetime)}<br>
    <strong>${s.t("status.reincarnation")}:</strong> ${t.lifetimeCount}<br>
    <strong>${s.t("ui.maxRealm")}:</strong> ${s.getRealmName(t.maxRealmAchieved)}<br>
    <strong>${s.t("ui.breakthroughs")}:</strong> ${t.cultivationInsights.realmBreakthroughs.length}
  `,Ee.innerHTML=e.meridians.map((o,c)=>{const h=o.isOpen?"🟢":"🔴",g=o.isOpen?` (${o.purity.toFixed(1)}%)`:"",y=s.getMeridianName(c),I=y.length>15?y.substring(0,12)+"...":y,k=o.isOpen?"":` (${s.t("ui.meridianReq",{qi:M.OPENING_BASE_COST+c*M.OPENING_COST_INCREMENT})})`,_=o.isOpen&&o.purity>=d.getMeridianEffectiveCap(o)&&o.breakthroughStage<3?(()=>{const B=(c+1)*R.QI_COST_MULTIPLIER,H=1+o.breakthroughStage*10,Q=B*H;return`<button class="meridian-breakthrough-btn" data-meridian-index="${c}" style="background: #007bff; color: white; border: none; padding: 2px 6px; margin-right: 5px; cursor: pointer; border-radius: 3px; font-size: 0.8em;">${Q} ${s.t("ui.qiUnit")}</button>`})():"";return`${h} ${_}${I}${g}${k}`}).join("<br>");const a=d.getPrimaryElement(),n=a?d.getComplementaryElements(a,e.realm):[];lt.innerHTML=`
    <strong>${s.getElementName(0)}:</strong> ${e.elements.metal.toFixed(1)}% ${a===l.Metal?"(Primary)":n.includes(l.Metal)?"(Complementary)":""}<br>
    <strong>${s.getElementName(1)}:</strong> ${e.elements.wood.toFixed(1)}% ${a===l.Wood?"(Primary)":n.includes(l.Wood)?"(Complementary)":""}<br>
    <strong>${s.getElementName(2)}:</strong> ${e.elements.water.toFixed(1)}% ${a===l.Water?"(Primary)":n.includes(l.Water)?"(Complementary)":""}<br>
    <strong>${s.getElementName(3)}:</strong> ${e.elements.fire.toFixed(1)}% ${a===l.Fire?"(Primary)":n.includes(l.Fire)?"(Complementary)":""}<br>
    <strong>${s.getElementName(4)}:</strong> ${e.elements.earth.toFixed(1)}% ${a===l.Earth?"(Primary)":n.includes(l.Earth)?"(Complementary)":""}
  `;const i=Math.floor(r.time);De.innerHTML=`
    <strong>${s.t("status.time")}:</strong> ${Fe(i)}<br>
    <strong>${s.t("status.gameSpeed")}:</strong> ${O?"▶️":"⏸️"} ${O?s.t("status.running"):s.t("status.paused")}
  `,It(),ce.classList.contains("active")&&F()}function D(r,e){const t=document.getElementById(r);if(t){const a=t.querySelector(".title-text");a?a.textContent=e:t.textContent=e}}function Ze(){dt.textContent=s.t("ui.gameTitle"),D("player-status-title",s.t("ui.playerStatus")),D("cultivation-title",s.t("ui.cultivationInfo")),D("meridians-title",s.t("ui.meridianInfo")),D("elements-title",s.t("status.elements")),D("time-title",s.t("ui.timeInfo")),D("debug-title",s.t("ui.debugTitle")),we.textContent=s.t("ui.cultivate"),$e.textContent=s.t("ui.breakthrough"),ne.textContent=s.t("ui.unlockSelectedMeridian"),Oe.textContent=s.t("messages.findEnemy"),$.textContent=s.t("ui.attack"),G.textContent=s.t("ui.flee"),je.textContent=s.t("ui.addQi"),ze.textContent=s.t("ui.addMeridians"),Ye.textContent=s.t("ui.addElements"),Xe.textContent=s.t("ui.addSpiritStone"),z.textContent=s.t("ui.saveGame"),Y.textContent=s.t("ui.loadGame"),X.textContent=s.t("ui.clearSavedGame");const r=document.querySelector('.nav-tab[data-page="overview"]'),e=document.querySelector('.nav-tab[data-page="combat"]'),t=document.querySelector('.nav-tab[data-page="inventory"]');r&&(r.textContent=s.t("ui.overview")),e&&(e.textContent=s.t("ui.combat")),t&&(t.textContent=s.t("ui.inventory"));const a=document.querySelector('#combat-page h3[data-i18n="ui.combatArena"]'),n=document.querySelector('#combat-page h3[data-i18n="ui.combatStats"]'),i=document.querySelector('#combat-page h3[data-i18n="ui.lootAndRewards"]');a&&(a.textContent="⚔️ "+s.t("ui.combatArena")),n&&(n.textContent="📊 "+s.t("ui.combatStats")),i&&(i.textContent="🎁 "+s.t("ui.lootAndRewards")),d||(_e.textContent=s.t("ui.loading"),xe.textContent=s.t("ui.loading"),Ee.textContent=s.t("ui.loading"),De.textContent=s.t("ui.loading")),v||(ue.innerHTML='<div class="no-enemy">'+s.t("messages.noEnemyEncountered")+"</div>"),v||(he.textContent=s.t("messages.noActiveCombat")),(!A||A.length===0)&&(de.textContent=s.t("messages.noLootAvailable"))}function It(){if(!d)return;const e=d.getState().player.meridians.map((t,a)=>({meridian:t,index:a})).filter(({meridian:t})=>!t.isOpen);if(ae.innerHTML="",e.length===0){const t=document.createElement("option");t.textContent=s.t("ui.allMeridiansOpen"),t.disabled=!0,ae.appendChild(t),ne.disabled=!0}else e.forEach(({meridian:t,index:a})=>{const n=document.createElement("option");n.value=a.toString(),n.textContent=`${s.getMeridianName(a)} (${s.t("ui.meridianReq",{qi:M.OPENING_BASE_COST+a*M.OPENING_COST_INCREMENT})})`,ae.appendChild(n)}),ne.disabled=!1}function q(r){K.textContent+=r+`
`,K.scrollTop=K.scrollHeight,K.style.border="2px solid rgba(74, 158, 255, 0.8)",setTimeout(()=>{K.style.border="2px solid rgba(255, 255, 255, 0.3)"},200)}const Mt=console.log;console.log=(...r)=>{const e=r.join(" ");q(e),Mt(...r)};we.addEventListener("click",()=>{d&&(d.cultivate(),S())});$e.addEventListener("click",()=>{d&&(d.attemptBreakthrough(),S())});je.addEventListener("click",()=>{d&&(d.debugAddQi(),S())});ze.addEventListener("click",()=>{d&&(d.debugAddMeridianProgress(10),S())});Ye.addEventListener("click",()=>{d&&(d.debugAddElementProgress(10),S())});Xe.addEventListener("click",()=>{if(!d||!C)return;const r=p.createItem(u.SpiritStone,f.Rare,m.Mortal),e=C.addItem(r);q(e?`✅ Added ${p.getTranslatedItemName(r)} to inventory`:"❌ Failed to add spirit stone - inventory full"),S()});z.addEventListener("click",()=>{d&&(d.saveGame(),S())});Y.addEventListener("click",()=>{if(!d){const t=new w(void 0,S).getState().player;C=new V(t),d=new w(void 0,S,C)}if(d.loadGame()){const e=d.getState().player,t=new V(e);d.updateInventorySystem(t),C=t,L=new ve(C),S(),q(s.t("ui.gameLoaded"))}else q(s.t("ui.noSavedGame"))});X.addEventListener("click",()=>{typeof window<"u"&&window.localStorage&&confirm(s.t("ui.confirmClearSavedGame"))&&(d&&O&&(d.stop(),O=!1),localStorage.removeItem("culsim-save"),pe(),q(s.t("ui.savedGameCleared")))});ne.addEventListener("click",()=>{if(!d)return;const r=parseInt(ae.value);if(isNaN(r))return;const e=d.getState().player;if(r>=0&&r<e.meridians.length&&!e.meridians[r].isOpen){const t=M.OPENING_BASE_COST+r*M.OPENING_COST_INCREMENT;e.qi>=t?(d.attemptMeridianOpening(r),S()):q(s.t("ui.notEnoughQi",{qi:t,meridian:s.getMeridianName(r)}))}});Ee.addEventListener("click",r=>{const e=r.target;if(e.classList.contains("meridian-breakthrough-btn")){const t=parseInt(e.getAttribute("data-meridian-index")||"-1");t>=0&&d&&(d.attemptMeridianBreakthrough(t),S())}});j.addEventListener("change",()=>{const r=j.value;s.setLanguage(r),Ze(),S()});Ge.forEach(r=>{r.addEventListener("click",()=>{const e=r.dataset.page;e&&We(e)})});Oe.addEventListener("click",()=>{d&&gt()});$.addEventListener("click",()=>{d&&pt()});G.addEventListener("click",()=>{d&&yt()});He.addEventListener("input",()=>{F()});Qe.addEventListener("change",()=>{F()});Ke.addEventListener("change",()=>{F()});Ue.addEventListener("change",()=>{F()});function kt(){Object.values(E).forEach(r=>{const e=qe[r];e&&e.addEventListener("click",()=>{if(!L)return;const t=L.unequipItem(r);t.success?(q(`✅ ${t.message}`),F(),S()):q(`❌ ${t.message}`)})})}qt();Ve();kt();ge.addEventListener("click",r=>{const t=r.target.closest(".item-card");t&&t.dataset.itemId&&Et(t.dataset.itemId)});We("overview");Ze();S();q("🏮 Welcome to CULSIM - Cultivation Simulator");q("📜 Game log initialized");Tt();
