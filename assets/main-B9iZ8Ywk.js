(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function t(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(n){if(n.ep)return;n.ep=!0;const r=t(n);fetch(n.href,r)}})();const ne={en:{ui:{playerStatus:"Player Status",cultivationInfo:"Cultivation",meridianInfo:"Meridians",meridianControls:"Meridian Controls",timeInfo:"Time",gameOutput:"Game Output",startGame:"Start Game",stopGame:"Stop Game",pauseGame:"Pause",cultivate:"Cultivate",saveGame:"Save Game",loadGame:"Load Game",clearSavedGame:"Clear Saved Game",unlockMeridian:"Unlock Meridian",unlockSelectedMeridian:"Unlock Selected Meridian",allMeridiansOpen:"All meridians open!",meridianReq:"Req: {qi} qi",gameStarted:"Game started!",gameStopped:"Game stopped.",gameLoaded:"Game loaded successfully!",noSavedGame:"No saved game found.",savedGameCleared:"Saved game cleared!",confirmClearSavedGame:"Are you sure you want to clear the saved game? This action cannot be undone.",notEnoughQi:"Not enough qi! Need {qi} qi to attempt opening {meridian}.",meridianOpened:"Successfully opened {meridian} meridian!",loading:"Loading...",gameTitle:"🏮 CULSIM - Cultivation Simulator 🏮",maxRealm:"Max Realm",breakthroughs:"Breakthroughs",qiGathering:"Qi Gathering",days:"days",years:"years",months:"months",meridiansOpen:"open",qiPerDay:"qi/day",welcomeMessage:"Welcome to CULSIM!",savedGameDetected:"Saved game detected. Auto-loading...",startingNewGame:"Starting new cultivation journey...",autoLoadingGame:"Auto-loading saved game...",autoSaved:"🔄 Auto-saved game progress!",manualCultivationComplete:"✨ Manual cultivation complete! Gained {qi} qi.",breakthrough:"Breakthrough",alreadyMaxRealm:"Already at maximum realm!",breakthroughNotAvailable:"Breakthrough not available for current realm.",debugPanel:"Debug Panel",addQi:"Add 10 Qi",debugTitle:"Debug Panel",addCultivation:"Add Cultivation (10 Qi + 10% Meridians + 10% Elements)",addMeridians:"Add 10% Meridians",addElements:"Add 10% Elements",qiUnit:"qi"},status:{player:"Player",realm:"Realm",qi:"Qi",talent:"Talent",lifetime:"Lifetime",reincarnation:"Reincarnation",karma:"Karma",meridians:"Meridians",elements:"Elements",time:"Time",gameSpeed:"Game Speed",running:"Running",paused:"Paused"},realms:{mortal:"Mortal",qiCondensation:"Qi Condensation",foundationEstablishment:"Foundation Establishment",coreFormation:"Core Formation",nascentSoul:"Nascent Soul",divineTransformation:"Divine Transformation",voidRefinement:"Void Refinement",immortalAscension:"Immortal Ascension"},meridians:{governorVessel:"Governor Vessel",conceptionVessel:"Conception Vessel",stomach:"Stomach",spleen:"Spleen",heart:"Heart",smallIntestine:"Small Intestine",bladder:"Bladder",kidney:"Kidney",pericardium:"Pericardium",tripleBurner:"Triple Burner",gallbladder:"Gallbladder",liver:"Liver"},elements:{metal:"Metal (金)",wood:"Wood (木)",water:"Water (水)",fire:"Fire (火)",earth:"Earth (土)"},events:{fortuitousEncounter:"Fortuitous Encounter",tribulationChallenge:"Tribulation Challenge",karmicReward:"Karmic Reward",enemyEncounter:"Enemy Encounter"},messages:{startingJourney:`🌅 Starting your cultivation journey...
`,cultivationSessionEnded:"🏮 Cultivation session ended.",statusUpdate:"📊 Status Update (Day {day})",day:"Day",meridianAttemptFailed:"❌ Failed to open {meridian} meridian.",meridianPurified:"✨ {meridian} purified to {purity}%",meridianOpeningFailed:"❌ Failed to open {meridian} meridian. Success chance: {chance}%. Consumed {qi} qi.",meridianBreakthroughAttempt:"🔥 Attempting meridian breakthrough for {meridian}. Cost: {qi} qi. Success chance: {chance}%",meridianBreakthroughSuccess:"🎉 Meridian breakthrough successful! {meridian} purity increased from {oldPurity}% to {newPurity}%. Consumed {qi} qi.",meridianBreakthroughStageAdvanced:"⭐ {meridian} breakthrough stage advanced from {oldStage} to {newStage}!",meridianBreakthroughFailed:"💔 Meridian breakthrough failed. {meridian} purity decreased by {purityLoss}%. Consumed {qi} qi.",meridianBreakthroughNotEnoughQi:"❌ Not enough qi for meridian breakthrough. Required: {qi} qi.",meridianBreakthroughNotOpen:"❌ Cannot breakthrough {meridian} - meridian is not open.",meridianBreakthroughNotReady:"❌ Cannot breakthrough {meridian} - requires {required}% purity first.",meridianNotPurified:"❌ Cannot breakthrough {meridian} - requires {required}% purity. Current: {purity}%. Continue cultivating to purify meridians.",meridianBreakthroughAlreadyPerfect:"✨ {meridian} is already at perfect purity.",meridianBreakthroughInvalidIndex:"❌ Invalid meridian index.",breakthroughAttempt:"⚡ Attempting breakthrough to {realm}...",breakthroughSuccess:"🎉 Breakthrough successful! Reached {realm}!",breakthroughFailed:"💔 Breakthrough failed. Cultivation insights gained.",breakthroughRequirements:"📋 Requirements for {realm} breakthrough:",breakthroughQiRequirement:"   💎 Qi: {current}/{required} {status}",breakthroughMeridianRequirement:"   🫀 Open Meridians: {current}/{required} {status}",breakthroughPurifiedMeridianRequirement:"   🫀 Purified Meridians (80%+): {current}/{required} {status}",breakthroughHighlyPurifiedMeridianRequirement:"   🫀 Highly Purified Meridians (95%+): {current}/{required} {status}",breakthroughPerfectMeridianRequirement:"   🫀 Perfect Meridians (100%): {current}/{required} {status}",breakthroughElementRequirement:"   🌟 Fully Cultivated Elements: {current}/{required} {status}",breakthroughAllElementsRequirement:"   🌟 All Elements Mastered: {current}/{required} {status}",breakthroughDivineElementsRequirement:"   🌟 Divine Elements: {current}/{required} {status}",breakthroughRequirementsMet:"🎯 Requirements met! Facing {tribulation} tribulation...",breakthroughRequirementsNotMet:"❌ Breakthrough requirements not met. Continue cultivating!",reincarnation:"🔄 Reincarnating...",lifetimeSummary:"📈 Lifetime Summary:",totalQiGathered:"Total Qi Gathered: {qi}",maxRealmAchieved:"Max Realm Achieved: {realm}",karmicBalance:"Karmic Balance: {karma}",cultivationInsights:"Cultivation Insights: {insights}",artifactsPreserved:"Artifacts Preserved: {artifacts}",newLifeBegins:"🌱 New life begins...",randomEvent:"🎲 Random Event: {event}",fortuitousEncounter:"✨ Met a mysterious master! Talent increased by {talent}.",tribulationChallengeSuccess:"⚡ Survived a minor tribulation! Gained {insights} tribulation insights.",tribulationChallengeFailure:"💥 Failed tribulation challenge! Lost {qi} qi.",karmicReward:"🙏 Performed a good deed! Karmic balance increased by {karma}.",enemyEncounter:"👹 Encountered {enemy} (Realm: {realm}, Qi: {qi}/{maxQi})",enemyDefeated:"✅ Defeated {enemy}!",enemyDefeatedBy:"❌ Defeated by {enemy}! Lost {damage} qi.",combatVictory:"🎉 Victory! Defeated {enemy}. Gained {qi} qi and {talent} talent.",combatDefeat:"💀 Defeated by {enemy}! Lost {qiLoss} qi.",lootArtifact:"📿 Obtained {name} (Value: {value})",lootElementalCrystal:"💎 Obtained {element} Crystal! {element} affinity increased by {affinity}%.",lootCultivationInsight:"📚 Obtained cultivation insight! Talent increased by {talent} points.",meridianDamage:"💥 {meridian} damaged in combat! Purity decreased by {damage}%.",tribulationStart:"⚡ Heavenly Tribulation: {type}! Success rate: {rate}%",tribulationSuccess:"✨ Tribulation overcome! Breakthrough successful!",tribulationFailed:"💥 Tribulation failed! Cultivation damaged.",breakthroughAdvanced:"🚀 Breakthrough successful! Advanced to {realm} realm!",maxQiIncreased:"💎 Max Qi increased to {maxQi}",elementCultivationEnabled:"🌟 New elements available for cultivation: {elements}",unlockedElements:"🔓 Unlocked elements: {elements}",gameSaved:"💾 Game saved successfully!",gameLoaded:"📂 Game loaded successfully!",saveError:"❌ Failed to save game:",loadError:"❌ Failed to load game:"}},vi:{ui:{playerStatus:"Trạng Thái Người Chơi",cultivationInfo:"Tu Luyện",meridianInfo:"Kinh Mạch",meridianControls:"Điều Khiển Kinh Mạch",timeInfo:"Thời Gian",gameOutput:"Đầu Ra Trò Chơi",startGame:"Bắt Đầu Trò Chơi",stopGame:"Dừng Trò Chơi",pauseGame:"Tạm Dừng",cultivate:"Tu Luyện",saveGame:"Lưu Trò Chơi",loadGame:"Tải Trò Chơi",clearSavedGame:"Xóa Trò Chơi Đã Lưu",unlockMeridian:"Mở Khóa Kinh Mạch",unlockSelectedMeridian:"Mở Khóa Kinh Mạch Đã Chọn",allMeridiansOpen:"Tất cả kinh mạch đã mở!",meridianReq:"Cần: {qi} khí",gameStarted:"Trò chơi đã bắt đầu!",gameStopped:"Trò chơi đã dừng.",gameLoaded:"Đã tải trò chơi thành công!",noSavedGame:"Không tìm thấy trò chơi đã lưu.",savedGameCleared:"Đã xóa trò chơi đã lưu!",confirmClearSavedGame:"Bạn có chắc chắn muốn xóa trò chơi đã lưu? Hành động này không thể hoàn tác.",notEnoughQi:"Không đủ khí! Cần {qi} khí để thử mở {meridian}.",meridianOpened:"Đã mở thành công kinh mạch {meridian}!",loading:"Đang tải...",gameTitle:"🏮 CULSIM - Trò Chơi Tu Luyện 🏮",maxRealm:"Cảnh Giới Cao Nhất",breakthroughs:"Đột Phá",qiGathering:"Thu Thập Khí",days:"ngày",years:"năm",months:"tháng",meridiansOpen:"đã mở",qiPerDay:"khí/ngày",welcomeMessage:"Chào mừng đến với CULSIM!",savedGameDetected:"Phát hiện trò chơi đã lưu. Đang tự động tải...",startingNewGame:"Bắt đầu hành trình tu luyện mới...",autoLoadingGame:"Đang tự động tải trò chơi đã lưu...",autoSaved:"🔄 Tự động lưu tiến trình trò chơi!",manualCultivationComplete:"✨ Tu luyện thủ công hoàn thành! Nhận được {qi} khí.",breakthrough:"Đột Phá",alreadyMaxRealm:"Đã đạt cảnh giới cao nhất!",breakthroughNotAvailable:"Đột phá không khả dụng cho cảnh giới hiện tại.",debugPanel:"Bảng Gỡ Lỗi",addQi:"Thêm 10 Khí",debugTitle:"Bảng Gỡ Lỗi",addCultivation:"Thêm Tu Luyện (10 Khí + 10% Kinh Mạch + 10% Ngũ Hành)",addMeridians:"Thêm 10% Kinh Mạch",addElements:"Thêm 10% Ngũ Hành",qiUnit:"khí"},status:{player:"Người Chơi",realm:"Cảnh Giới",qi:"Khí",talent:"Tài Năng",lifetime:"Tuổi Thọ",reincarnation:"Tái Sinh",karma:"Nghiệp Lực",meridians:"Kinh Mạch",elements:"Ngũ Hành",time:"Thời Gian",gameSpeed:"Tốc Độ Trò Chơi",running:"Đang Chạy",paused:"Tạm Dừng"},realms:{mortal:"Phàm Nhân",qiCondensation:"Luyện Khí",foundationEstablishment:"Trúc Cơ",coreFormation:"Kim Đan",nascentSoul:"Nguyên Anh",divineTransformation:"Hóa Thần",voidRefinement:"Luyện Không",immortalAscension:"Phi Thăng"},meridians:{governorVessel:"Đốc Mạch",conceptionVessel:"Nhâm Mạch",stomach:"Vị Kinh",spleen:"Tỳ Kinh",heart:"Tâm Kinh",smallIntestine:"Tiểu Trường Kinh",bladder:"Bàng Quang Kinh",kidney:"Thận Kinh",pericardium:"Tâm Bao Kinh",tripleBurner:"Tam Tiêu Kinh",gallbladder:"Đởm Kinh",liver:"Gan Kinh"},elements:{metal:"Kim (金)",wood:"Mộc (木)",water:"Thủy (水)",fire:"Hỏa (火)",earth:"Thổ (土)"},events:{fortuitousEncounter:"Hào Ngẫu Chi Kiếp",tribulationChallenge:"Thử Thách Kiếp Nạn",karmicReward:"Thưởng Nghiệp Lực",enemyEncounter:"Gặp Kẻ Thù"},messages:{startingJourney:`🌅 Bắt đầu hành trình tu luyện của bạn...
`,cultivationSessionEnded:"🏮 Kỳ tu luyện kết thúc.",statusUpdate:"📊 Cập Nhật Trạng Thái (Ngày {day})",day:"Ngày",meridianAttemptFailed:"❌ Thất bại khi mở kinh mạch {meridian}.",meridianPurified:"✨ Kinh mạch {meridian} tinh lọc đạt {purity}%",meridianOpeningFailed:"❌ Thất bại khi mở kinh mạch {meridian}. Tỷ lệ thành công: {chance}%. Tiêu thụ {qi} khí.",meridianBreakthroughAttempt:"🔥 Thử đột phá kinh mạch {meridian}. Chi phí: {qi} khí. Tỷ lệ thành công: {chance}%",meridianBreakthroughSuccess:"🎉 Đột phá kinh mạch thành công! {meridian} độ tinh khiết tăng từ {oldPurity}% lên {newPurity}%. Tiêu thụ {qi} khí.",meridianBreakthroughStageAdvanced:"⭐ {meridian} cấp độ đột phá tăng từ {oldStage} lên {newStage}!",meridianBreakthroughFailed:"💔 Đột phá kinh mạch thất bại. {meridian} độ tinh khiết giảm {purityLoss}%. Tiêu thụ {qi} khí.",meridianBreakthroughNotEnoughQi:"❌ Không đủ khí để đột phá kinh mạch. Cần: {qi} khí.",meridianBreakthroughNotOpen:"❌ Không thể đột phá {meridian} - kinh mạch chưa mở.",meridianBreakthroughNotReady:"❌ Không thể đột phá {meridian} - cần đạt {required}% độ tinh khiết trước.",meridianNotPurified:"❌ Không thể đột phá {meridian} - cần đạt {required}% độ tinh khiết. Hiện tại: {purity}%. Tiếp tục tu luyện để tinh lọc kinh mạch.",meridianBreakthroughAlreadyPerfect:"✨ {meridian} đã đạt độ tinh khiết hoàn hảo.",meridianBreakthroughInvalidIndex:"❌ Chỉ số kinh mạch không hợp lệ.",breakthroughAttempt:"⚡ Đang thử đột phá lên {realm}...",breakthroughSuccess:"🎉 Đột phá thành công! Đạt {realm}!",breakthroughFailed:"💔 Đột phá thất bại. Nhận được hiểu biết tu luyện.",breakthroughRequirements:"📋 Yêu cầu đột phá {realm}:",breakthroughQiRequirement:"   💎 Khí: {current}/{required} {status}",breakthroughMeridianRequirement:"   🫀 Kinh Mạch Đã Mở: {current}/{required} {status}",breakthroughPurifiedMeridianRequirement:"   🫀 Kinh Mạch Tinh Lọc (80%+): {current}/{required} {status}",breakthroughHighlyPurifiedMeridianRequirement:"   🫀 Kinh Mạch Cao Cấp Tinh Lọc (95%+): {current}/{required} {status}",breakthroughPerfectMeridianRequirement:"   🫀 Kinh Mạch Hoàn Hảo (100%): {current}/{required} {status}",breakthroughElementRequirement:"   🌟 Ngũ Hành Đã Tu Luyện Đầy Đủ: {current}/{required} {status}",breakthroughAllElementsRequirement:"   🌟 Toàn Bộ Ngũ Hành Thông Thuợ: {current}/{required} {status}",breakthroughDivineElementsRequirement:"   🌟 Ngũ Hành Thần Linh: {current}/{required} {status}",breakthroughRequirementsMet:"🎯 Đủ yêu cầu! Đối mặt với kiếp nạn {tribulation}...",breakthroughRequirementsNotMet:"❌ Chưa đủ yêu cầu đột phá. Tiếp tục tu luyện!",reincarnation:"🔄 Đang tái sinh...",lifetimeSummary:"📈 Tóm Tắt Tuổi Thọ:",totalQiGathered:"Tổng Khí Thu Thập: {qi}",maxRealmAchieved:"Cảnh Giới Cao Nhất: {realm}",karmicBalance:"Cân Bằng Nghiệp Lực: {karma}",cultivationInsights:"Hiểu Biết Tu Luyện: {insights}",artifactsPreserved:"Pháp Bảo Giữ Lại: {artifacts}",newLifeBegins:"🌱 Cuộc đời mới bắt đầu...",randomEvent:"🎲 Sự Kiện Ngẫu Nhiên: {event}",fortuitousEncounter:"✨ Gặp gỡ một bậc thầy bí ẩn! Tài năng tăng {talent} điểm.",tribulationChallengeSuccess:"⚡ Vượt qua kiếp nạn nhỏ! Nhận được {insights} hiểu biết về kiếp nạn.",tribulationChallengeFailure:"💥 Thất bại trong thử thách kiếp nạn! Mất {qi} khí.",karmicReward:"🙏 Làm một việc thiện! Cân bằng nghiệp lực tăng {karma} điểm.",enemyEncounter:"👹 Gặp {enemy} (Cảnh Giới: {realm}, Khí: {qi}/{maxQi})",enemyDefeated:"✅ Đánh bại {enemy}!",enemyDefeatedBy:"❌ Bị {enemy} đánh bại! Mất {damage} khí.",combatVictory:"🎉 Chiến thắng! Đánh bại {enemy}. Nhận được {qi} khí và {talent} tài năng.",combatDefeat:"💀 Bị {enemy} đánh bại! Mất {qiLoss} khí.",lootArtifact:"📿 Nhận được {name} (Giá trị: {value})",lootElementalCrystal:"💎 Nhận được Tinh Thạch {element}! Độ tương hợp {element} tăng {affinity}%.",lootCultivationInsight:"📚 Nhận được hiểu biết tu luyện! Tài năng tăng {talent} điểm.",meridianDamage:"💥 Kinh mạch {meridian} bị thương trong chiến đấu! Độ tinh khiết giảm {damage}%.",tribulationStart:"⚡ Thiên Kiếp: {type}! Tỷ lệ thành công: {rate}%",tribulationSuccess:"✨ Vượt qua kiếp nạn! Đột phá thành công!",tribulationFailed:"💥 Thất bại trong kiếp nạn! Tu luyện bị tổn thương.",breakthroughAdvanced:"🚀 Đột phá thành công! Tiến lên cảnh giới {realm}!",maxQiIncreased:"💎 Khí tối đa tăng lên {maxQi}",elementCultivationEnabled:"🌟 Ngũ hành mới có thể tu luyện: {elements}",unlockedElements:"🔓 Ngũ hành đã mở khóa: {elements}",gameSaved:"💾 Đã lưu trò chơi thành công!",gameLoaded:"📂 Đã tải trò chơi thành công!",saveError:"❌ Lưu trò chơi thất bại:",loadError:"❌ Tải trò chơi thất bại:"}}};class Oe{constructor(e){this.currentLanguage="en",this.STORAGE_KEY="culsim-language";const t=this.loadSavedLanguage();this.currentLanguage=t||e||"en"}loadSavedLanguage(){if(typeof window<"u"&&window.localStorage){const e=localStorage.getItem(this.STORAGE_KEY);if(e==="en"||e==="vi")return e}return null}saveLanguage(e){typeof window<"u"&&window.localStorage&&localStorage.setItem(this.STORAGE_KEY,e)}setLanguage(e){this.currentLanguage=e,this.saveLanguage(e)}getLanguage(){return this.currentLanguage}t(e,t){const a=e.split(".");let n=ne[this.currentLanguage];for(const r of a)if(n&&typeof n=="object"&&r in n)n=n[r];else{n=ne.en;for(const o of a)if(n&&typeof n=="object"&&o in n)n=n[o];else return e;break}return typeof n=="string"&&t?n.replace(/\{(\w+)\}/g,(r,o)=>t[o]!==void 0?t[o]:r):typeof n=="string"?n:e}getRealmName(e){const t={0:"realms.mortal",1:"realms.qiCondensation",2:"realms.foundationEstablishment",3:"realms.coreFormation",4:"realms.nascentSoul",5:"realms.divineTransformation",6:"realms.voidRefinement",7:"realms.immortalAscension"};return this.t(t[e]||"realms.mortal")}getMeridianName(e){const t={0:"meridians.governorVessel",1:"meridians.conceptionVessel",2:"meridians.stomach",3:"meridians.spleen",4:"meridians.heart",5:"meridians.smallIntestine",6:"meridians.bladder",7:"meridians.kidney",8:"meridians.pericardium",9:"meridians.tripleBurner",10:"meridians.gallbladder",11:"meridians.liver"};return this.t(t[e]||"meridians.governorVessel")}getElementName(e){const t={0:"elements.metal",1:"elements.wood",2:"elements.water",3:"elements.fire",4:"elements.earth"};return this.t(t[e]||"elements.metal")}}const i=new Oe;var m=(l=>(l[l.Mortal=0]="Mortal",l[l.QiCondensation=1]="QiCondensation",l[l.FoundationEstablishment=2]="FoundationEstablishment",l[l.CoreFormation=3]="CoreFormation",l[l.NascentSoul=4]="NascentSoul",l[l.DivineTransformation=5]="DivineTransformation",l[l.VoidRefinement=6]="VoidRefinement",l[l.ImmortalAscension=7]="ImmortalAscension",l))(m||{}),s=(l=>(l.Metal="metal",l.Wood="wood",l.Water="water",l.Fire="fire",l.Earth="earth",l))(s||{}),f=(l=>(l[l.Common=0]="Common",l[l.Uncommon=1]="Uncommon",l[l.Rare=2]="Rare",l[l.Epic=3]="Epic",l[l.Legendary=4]="Legendary",l[l.Mythical=5]="Mythical",l))(f||{}),g=(l=>(l.Armor="armor",l.Weapon="weapon",l.Pill="pill",l.Drug="drug",l.Poison="poison",l.Herb="herb",l.BeastPart="beast_part",l.SpiritStone="spirit_stone",l.Charm="charm",l.Manual="manual",l))(g||{}),K=(l=>(l.Melee="melee",l.Ranged="ranged",l))(K||{});const O={0:1,1:1.5,2:2.5,3:4,4:6,5:10},ie={0:1,1:2,2:5,3:10,4:20,5:40,6:80,7:150},W={armor:{defense:10,durability:100,value:50},weapon:{attack:15,durability:80,value:75},pill:{effectStrength:25,duration:7,value:30},drug:{effectStrength:20,duration:3,value:40},poison:{effectStrength:30,duration:5,value:60},spirit_stone:{qiStorage:100,value:20},herb:{qiContent:50,value:15},beast_part:{effectStrength:35,value:45},charm:{effectStrength:10,duration:30,value:100},manual:{knowledge:25,value:200}},xe={0:60,1:25,2:10,3:4,4:.9,5:.1};class we{constructor(e=Math.floor(Math.random()*1e6)){this.seed=e}random(){return this.seed=16807*this.seed%2147483647,(this.seed-1)/2147483646}int(e,t){return Math.floor(this.random()*(t-e+1))+e}float(e,t){return this.random()*(t-e)+e}choice(e){return e[this.int(0,e.length-1)]}weightedChoice(e,t){if(e.length!==t.length)throw new Error("Items and weights arrays must have the same length");const a=t.reduce((r,o)=>r+o,0);let n=this.random()*a;for(let r=0;r<e.length;r++)if(n-=t[r],n<=0)return e[r];return e[e.length-1]}shuffle(e){for(let t=e.length-1;t>0;t--){const a=this.int(0,t);[e[t],e[a]]=[e[a],e[t]]}return e}chance(e){return this.random()<e}getSeed(){return this.seed}setSeed(e){this.seed=e}}const x={MAX_QI:100,TALENT:50,ELEMENT_AFFINITY_BASE:{min:10,max:20}},De={INTERVAL_DAYS:10},E={[m.Mortal]:{qi:100,meridians:1,elements:1},[m.QiCondensation]:{qi:1e4,meridians:6,elements:2},[m.FoundationEstablishment]:{qi:1e5,meridians:12,elements:3},[m.CoreFormation]:{qi:1e6,meridians:12,elements:4},[m.NascentSoul]:{qi:1e7,meridians:12,elements:5},[m.DivineTransformation]:{qi:1e8,meridians:12,elements:5},[m.VoidRefinement]:{qi:1e9,meridians:12,elements:5}},M={OPENING_BASE_COST:50,OPENING_COST_INCREMENT:25,OPENING_ATTEMPT_COST_FRACTION:.25,INITIAL_PURITY:10,MAX_PURITY:100},v={NATURAL_CAP:50,PURIFIED:80,HIGHLY_PURIFIED:95,PERFECT:100},R={[m.Mortal]:.8,[m.QiCondensation]:.7,[m.FoundationEstablishment]:.6,[m.CoreFormation]:.5,[m.NascentSoul]:.4,[m.DivineTransformation]:.3,[m.VoidRefinement]:.2},w={MAX_QI_MULTIPLIER:100,QI_RETENTION_PERCENTAGE:.1,MIN_QI_RETAINED:10},B={BASE_MERIDIAN_PURIFICATION:.1,MAX_ELEMENT_AFFINITY:100},re={[m.Mortal]:{BASIC_ABSORPTION:.1,ENHANCED_ABSORPTION:.05},[m.QiCondensation]:{BASE_ABSORPTION:1},[m.FoundationEstablishment]:{BASE_ABSORPTION:5},[m.CoreFormation]:{BASE_ABSORPTION:10,REALM_MULTIPLIER:1.5},[m.NascentSoul]:{BASE_ABSORPTION:50,REALM_MULTIPLIER:2},[m.DivineTransformation]:{BASE_ABSORPTION:100,REALM_MULTIPLIER:2.5},[m.VoidRefinement]:{BASE_ABSORPTION:250,REALM_MULTIPLIER:3},[m.ImmortalAscension]:{BASE_ABSORPTION:500,REALM_MULTIPLIER:4}},Qe={[m.Mortal]:500,[m.QiCondensation]:150,[m.FoundationEstablishment]:120,[m.CoreFormation]:300,[m.NascentSoul]:250,[m.DivineTransformation]:200,[m.VoidRefinement]:150,[m.ImmortalAscension]:100},k={QI_COST_MULTIPLIER:100,BASE_SUCCESS_CHANCE:.6,TALENT_BONUS_DIVISOR:200,ATTEMPT_COST_FRACTION:.5,HEART_DEMON_CHANCE:.2,HEART_DEMON_QI_LOSS:.1,FAILURE_DAMAGE_CHANCE:.3,FAILURE_DAMAGE_PERCENTAGE:.1};class H{static calculateScaledStat(e,t,a){const n=O[t],r=ie[a];return Math.floor(e*n*r)}static generateItemEffects(e,t,a,n){const r=[],o=W[e];switch(e){case g.Armor:r.push({type:"defense",value:this.calculateScaledStat(o.defense,t,a),isPercentage:!1}),t>=f.Rare&&r.push({type:"elemental_resistance",value:t*5,element:n,isPercentage:!0});break;case g.Weapon:r.push({type:"combat_power",value:this.calculateScaledStat(o.attack,t,a),element:n,isPercentage:!1}),t>=f.Epic&&r.push({type:"critical_chance",value:(t-2)*2,isPercentage:!0});break;case g.Pill:r.push({type:"qi_absorption",value:this.calculateScaledStat(o.effectStrength,t,a),duration:o.duration*O[t],isPercentage:!0}),t>=f.Uncommon&&r.push({type:"cultivation_speed",value:t*10,duration:o.duration,isPercentage:!0});break;case g.SpiritStone:r.push({type:"qi_absorption",value:this.calculateScaledStat(o.qiStorage,t,a),isPercentage:!1});break;case g.Herb:r.push({type:"qi_absorption",value:this.calculateScaledStat(o.qiContent,t,a),isPercentage:!1}),n&&r.push({type:"element_boost",value:t*5,element:n,isPercentage:!0});break;case g.Charm:r.push({type:"luck",value:this.calculateScaledStat(o.effectStrength,t,a),duration:o.duration,isPercentage:!0}),t>=f.Rare&&r.push({type:"comprehension",value:t*3,duration:o.duration*2,isPercentage:!0});break}return r}static generateItemName(e,t,a,n){const r={[f.Common]:"",[f.Uncommon]:"Refined ",[f.Rare]:"Superior ",[f.Epic]:"Exquisite ",[f.Legendary]:"Legendary ",[f.Mythical]:"Mythical "},o={[m.Mortal]:"",[m.QiCondensation]:" of Qi Condensation",[m.FoundationEstablishment]:" of Foundation Establishment",[m.CoreFormation]:" of Core Formation",[m.NascentSoul]:" of Nascent Soul",[m.DivineTransformation]:" of Divine Transformation",[m.VoidRefinement]:" of Void Refinement",[m.ImmortalAscension]:" of Immortal Ascension"},c={[s.Metal]:"Metal",[s.Wood]:"Wood",[s.Water]:"Water",[s.Fire]:"Fire",[s.Earth]:"Earth"},u={[g.Armor]:"Daoist Robe",[g.Weapon]:"Spirit Sword",[g.Pill]:"Cultivation Pill",[g.Drug]:"Spirit Wine",[g.Poison]:"Venom Extract",[g.SpiritStone]:"Spirit Stone",[g.Herb]:"Spirit Herb",[g.BeastPart]:"Beast Core",[g.Charm]:"Protection Charm",[g.Manual]:"Cultivation Manual"};let d=r[t]+u[e];return n&&(d=`${c[n]} ${d}`),d+=o[a],d}static calculateItemValue(e,t,a){var r;const n=((r=W[e])==null?void 0:r.value)||10;return Math.floor(n*O[t]*(ie[a]*.5))}static determineItemQuality(e,t){const a=Math.min(e*2,20);for(let n=f.Mythical;n>=f.Common;n--){const r=xe[n],o=Math.min(r+a,100);if(t.chance(o))return n}return f.Common}static createItem(e,t,a,n,r){const o=this.generateItemEffects(e,t,a,n),c=this.generateItemName(e,t,a,n),u=this.calculateItemValue(e,t,a),d=W[e],p="durability"in d?Math.floor(d.durability*O[t]):void 0;return{id:r||`item-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,name:c,category:e,quality:t,realm:a,element:n,effects:o,description:this.generateItemDescription(e,t,a,n),value:u,durability:p,maxDurability:p,stackable:e===g.Pill||e===g.SpiritStone||e===g.Herb,maxStack:e===g.Pill?10:e===g.SpiritStone?50:e===g.Herb?20:1,quantity:1}}static generateItemDescription(e,t,a,n){let o=`A ${{[f.Common]:"ordinary",[f.Uncommon]:"refined",[f.Rare]:"superior",[f.Epic]:"exquisite",[f.Legendary]:"legendary",[f.Mythical]:"mythical"}[t]} ${e.toLowerCase().replace("_"," ")}`;return n&&(o+=` infused with ${n} energy`),o+=` suitable for cultivators at the ${m[a].toLowerCase().replace("_"," ")} realm and above.`,o}}class Ue{constructor(e,t,a,n){this.gameLoop=null,this.lastAutoSaveTime=0,this.AUTO_SAVE_INTERVAL_DAYS=De.INTERVAL_DAYS,this.random=new we(e),this.state=this.initializeGameState(),this.updateCallback=t,this.uiUpdateCallback=a,this.autoSaveCallback=n}initializeGameState(){const e={id:"player-1",name:"Cultivator",realm:m.Mortal,qi:0,maxQi:x.MAX_QI,meridians:this.createInitialMeridians(),elements:this.initializeElementAffinities(),talent:x.TALENT,artifacts:[],items:[H.createItem(g.SpiritStone,f.Common,m.Mortal)],lifetime:0},t={id:"soul-1",lifetimeCount:1,totalLifetime:0,cultivationInsights:{realmBreakthroughs:[],techniqueMastery:[],elementalUnderstanding:{[s.Metal]:0,[s.Wood]:0,[s.Water]:0,[s.Fire]:0,[s.Earth]:0},tribulationSurvivals:0},karmicBalance:0,maxRealmAchieved:m.Mortal,artifacts:[],items:[{id:"test-spirit-stone",name:"Test Spirit Stone",category:g.SpiritStone,quality:f.Common,realm:m.Mortal,effects:[{type:"qi_absorption",value:36,isPercentage:!1}],description:"A test spirit stone with 36 qi absorption",value:20,durability:void 0,maxDurability:void 0,stackable:!1,quantity:1}]};return{player:e,soul:t,time:0,isRunning:!1,seed:this.random.getSeed()}}createInitialMeridians(){return["Governor Vessel","Conception Vessel","Stomach","Spleen","Heart","Small Intestine","Bladder","Kidney","Pericardium","Triple Burner","Gallbladder","Liver"].map((t,a)=>({id:`meridian-${a}`,name:t,isOpen:!1,purity:0,breakthroughStage:0}))}initializeElementAffinities(){const e=[s.Metal,s.Wood,s.Water,s.Fire,s.Earth],t=this.random.choice(e),a={[s.Metal]:0,[s.Wood]:0,[s.Water]:0,[s.Fire]:0,[s.Earth]:0};return a[t]=this.random.int(x.ELEMENT_AFFINITY_BASE.min,x.ELEMENT_AFFINITY_BASE.max),a}start(){console.log(i.t("messages.startingJourney")),this.state.isRunning=!0,this.displayStatus(),this.gameLoop=setInterval(()=>{this.update()},1e3)}stop(){this.gameLoop&&(clearInterval(this.gameLoop),this.gameLoop=null),this.state.isRunning=!1,console.log(`
`+i.t("messages.cultivationSessionEnded"))}update(){this.state.isRunning&&(this.state.time+=1,this.state.player.lifetime+=1,this.state.time-this.lastAutoSaveTime>=this.AUTO_SAVE_INTERVAL_DAYS&&this.autoSave(),this.updateCallback&&this.updateCallback(),this.uiUpdateCallback&&this.uiUpdateCallback())}displayStatus(){const e=this.state.player,t=this.state.soul;console.log(i.t("messages.statusUpdate",{day:Math.floor(this.state.time)})),console.log(`${i.t("status.player")}: ${e.name}`),console.log(`${i.t("status.realm")}: ${this.getRealmName(e.realm)}`),console.log(`${i.t("status.qi")}: ${e.qi.toFixed(1)} / ${e.maxQi}`),console.log(`${i.t("status.talent")}: ${e.talent}/100`);const a=this.getPrimaryElement();if(a){console.log(`${i.t("status.primaryElement")}: ${a} (${e.elements[a].toFixed(1)})`);const n=this.getComplementaryElements(a,e.realm);n.length>0&&console.log(`${i.t("status.complementaryElements")}: ${n.map(r=>{var o;return`${r} (${((o=e.elements[r])==null?void 0:o.toFixed(1))||"0.0"})`}).join(", ")}`)}console.log(`${i.t("status.lifetime")}: ${e.lifetime} ${i.t("messages.day")} (${i.t("status.reincarnation")}: ${t.lifetimeCount})`),console.log(`${i.t("status.karma")}: ${t.karmicBalance>0?"+":""}${t.karmicBalance}`),console.log(`─────────────────────────────
`)}getRealmName(e){return i.getRealmName(e)}getPrimaryElement(){const e=this.state.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,r])=>{r>t&&(t=r,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[s.Wood]:s.Fire,[s.Fire]:s.Earth,[s.Earth]:s.Metal,[s.Metal]:s.Water,[s.Water]:s.Wood},r={[s.Wood]:s.Earth,[s.Earth]:s.Water,[s.Water]:s.Fire,[s.Fire]:s.Metal,[s.Metal]:s.Wood};if(t>=m.QiCondensation&&a.push(n[e]),t>=m.CoreFormation&&a.push(r[e]),t>=m.DivineTransformation){const c=r[e],u=(o=Object.entries(r).find(([d,p])=>p===c))==null?void 0:o[0];u&&a.push(u)}return a}getState(){return{...this.state}}getStateReference(){return this.state}setState(e){this.state=e}getRandom(){return this.random}autoSave(){this.autoSaveCallback&&this.autoSaveCallback(),this.lastAutoSaveTime=this.state.time}saveGame(){try{const e=this.serializeGameState();localStorage.setItem("culsim-save",e),console.log(i.t("messages.gameSaved"))}catch(e){console.error(i.t("messages.saveError"),e)}}loadGame(){try{const e=localStorage.getItem("culsim-save");if(e)return this.state=this.deserializeGameState(e),console.log(i.t("messages.gameLoaded")),!0}catch(e){console.error(i.t("messages.loadError"),e)}return!1}serializeGameState(){return JSON.stringify(this.state,null,2)}deserializeGameState(e){const t=JSON.parse(e);return{player:t.player||this.initializeGameState().player,soul:t.soul||this.initializeGameState().soul,time:t.time?Math.floor(t.time/86400):0,isRunning:!1,seed:t.seed||this.random.getSeed()}}}class Se{constructor(e){this.gameState=e}calculateQiAbsorptionBonus(){let e=0,t=0;return this.gameState.player.items.forEach(a=>{a.effects.forEach(n=>{n.type==="qi_absorption"&&(n.isPercentage?e+=n.value:t+=n.value)})}),this.gameState.soul.items.forEach(a=>{a.effects.forEach(n=>{n.type==="qi_absorption"&&(n.isPercentage?e+=n.value:t+=n.value)})}),{percentage:e,flat:t}}calculateCultivationSpeedBonus(){let e=0;return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.type==="cultivation_speed"&&a.isPercentage&&(e+=a.value)})}),this.gameState.soul.items.forEach(t=>{t.effects.forEach(a=>{a.type==="cultivation_speed"&&a.isPercentage&&(e+=a.value)})}),e}calculateCombatPowerBonus(){let e=0;return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.type==="combat_power"&&!a.isPercentage&&(e+=a.value)})}),this.gameState.soul.items.forEach(t=>{t.effects.forEach(a=>{a.type==="combat_power"&&!a.isPercentage&&(e+=a.value)})}),e}calculateDefenseBonus(){let e=0;return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.type==="defense"&&!a.isPercentage&&(e+=a.value)})}),this.gameState.soul.items.forEach(t=>{t.effects.forEach(a=>{a.type==="defense"&&!a.isPercentage&&(e+=a.value)})}),e}calculateCriticalChanceBonus(){let e=0;return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.type==="critical_chance"&&a.isPercentage&&(e+=a.value)})}),this.gameState.soul.items.forEach(t=>{t.effects.forEach(a=>{a.type==="critical_chance"&&a.isPercentage&&(e+=a.value)})}),e}calculateElementalBoost(e){let t=0;return this.gameState.player.items.forEach(a=>{a.effects.forEach(n=>{n.type==="element_boost"&&n.element===e&&n.isPercentage&&(t+=n.value)})}),t}calculateElementalResistance(e){let t=0;return this.gameState.player.items.forEach(a=>{a.effects.forEach(n=>{n.type==="elemental_resistance"&&n.element===e&&n.isPercentage&&(t+=n.value)})}),t}calculateLuckBonus(){let e=0;return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.type==="luck"&&!a.isPercentage&&(e+=a.value)})}),e}calculateComprehensionBonus(){let e=0;return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.type==="comprehension"&&a.isPercentage&&(e+=a.value)})}),e}getActiveTemporaryEffects(){const e=[];return this.gameState.player.items.forEach(t=>{t.effects.forEach(a=>{a.duration&&a.duration>0&&e.push(a)})}),e}processTemporaryEffects(){this.gameState.player.items.forEach(e=>{e.effects.forEach(t=>{t.duration&&t.duration>0&&(t.duration--,t.duration<=0&&console.log(`⚡ ${e.name} effect expired: ${t.type}`))}),e.effects=e.effects.filter(t=>!t.duration||t.duration>0)}),this.gameState.player.items=this.gameState.player.items.filter(e=>e.effects.length>0)}useConsumableItem(e){const t=this.gameState.player.items.findIndex(n=>n.id===e);if(t===-1)return!1;const a=this.gameState.player.items[t];return a.effects.forEach(n=>{this.applyImmediateEffect(n,a)}),a.quantity>1?a.quantity--:this.gameState.player.items.splice(t,1),console.log(`🍽️ Used ${a.name}`),!0}applyImmediateEffect(e,t){const a=this.gameState.player;switch(e.type){case"qi_absorption":if(!e.isPercentage){const n=Math.min(e.value,a.maxQi-a.qi);a.qi+=n,console.log(`💎 Gained ${n} qi from ${t.name}`)}break;case"talent_boost":if(!e.isPercentage){const n=Math.min(e.value,100-a.talent);a.talent+=n,console.log(`🎓 Talent increased by ${n} from ${t.name}`)}break;case"element_boost":if(e.element&&e.isPercentage){const n=a.elements[e.element],r=Math.floor(n*(e.value/100));a.elements[e.element]=Math.min(100,n+r),console.log(`🌟 ${e.element} affinity boosted by ${r}% from ${t.name}`)}break}}getEquippedItems(){return this.gameState.player.items.filter(e=>e.category===g.Armor||e.category===g.Weapon||e.category===g.Charm)}getConsumableItems(){return this.gameState.player.items.filter(e=>e.category===g.Pill||e.category===g.SpiritStone||e.category===g.Herb||e.category===g.Drug)}}class se{constructor(e){this.gameState=e,this.itemEffectProcessor=new Se(e)}processCultivation(){const e=this.gameState.player;switch(this.processMeridianPurification(),e.realm){case m.Mortal:this.cultivateMortalRealm();break;case m.QiCondensation:this.cultivateQiCondensationRealm();break;case m.FoundationEstablishment:this.cultivateFoundationEstablishmentRealm();break;case m.CoreFormation:this.cultivateCoreFormationRealm();break;case m.NascentSoul:this.cultivateNascentSoulRealm();break;case m.DivineTransformation:this.cultivateDivineTransformationRealm();break;case m.VoidRefinement:this.cultivateVoidRefinementRealm();break;case m.ImmortalAscension:this.cultivateImmortalAscensionRealm();break}}cultivateMortalRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.Mortal);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateQiCondensationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.QiCondensation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateFoundationEstablishmentRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.FoundationEstablishment);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateCoreFormationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.CoreFormation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateNascentSoulRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.NascentSoul);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateDivineTransformationRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.DivineTransformation);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateVoidRefinementRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.VoidRefinement);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}cultivateImmortalAscensionRealm(){const e=this.gameState.player,t=this.calculateQiGatheringForRealm(m.ImmortalAscension);e.qi=Math.min(e.qi+t,e.maxQi),this.cultivateElements()}calculateQiGatheringForRealm(e){const t=this.gameState.player;if(e===m.Mortal){const a=re[m.Mortal].BASIC_ABSORPTION,n=1+t.talent/500;let r=a*n;const o=t.meridians.filter(d=>d.isOpen).length;if(o>0){const d=o*.5;r*=1+d}const c=this.itemEffectProcessor.calculateCultivationSpeedBonus();r*=1+c/100;const u=this.itemEffectProcessor.calculateQiAbsorptionBonus();return r*=1+u.percentage/100,r+=u.flat,(u.flat>0||u.percentage>0)&&console.log(`Item Effects Applied - Qi Absorption: +${u.flat} flat, +${u.percentage}% multiplier`),r}else{const a=re[e],n=a.BASE_ABSORPTION,r=1+t.talent/Qe[e],o=this.calculateMeridianBonus(),c=a.REALM_MULTIPLIER||1;let u=1;e===m.VoidRefinement?u=1+this.gameState.soul.karmicBalance/1e3:e===m.ImmortalAscension&&(u=1+this.gameState.soul.karmicBalance/500);let d=n*r*o*c*u;const p=this.itemEffectProcessor.calculateCultivationSpeedBonus();d*=1+p/100;const C=this.itemEffectProcessor.calculateQiAbsorptionBonus();return d*=1+C.percentage/100,d+=C.flat,(C.flat>0||C.percentage>0)&&console.log(`Item Effects Applied - Qi Absorption: +${C.flat} flat, +${C.percentage}% multiplier`),d}}calculateMeridianBonus(){const t=this.gameState.player.meridians.filter(r=>r.isOpen);if(t.length===0)return 1;const a=t.length*.1,n=t.reduce((r,o)=>r+o.purity/1e3,0);return 1+a*2+n*4}cultivateElements(){const e=this.gameState.player,t=e.realm,a=.1+e.talent/1e3,n=this.getPrimaryElement();n&&(e.elements[n]=Math.min(100,e.elements[n]+a),this.getComplementaryElements(n,t).forEach(o=>{e.elements[o]=Math.min(100,e.elements[o]+a*.5)}))}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,r])=>{r>t&&(t=r,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[s.Wood]:s.Fire,[s.Fire]:s.Earth,[s.Earth]:s.Metal,[s.Metal]:s.Water,[s.Water]:s.Wood},r={[s.Wood]:s.Earth,[s.Earth]:s.Water,[s.Water]:s.Fire,[s.Fire]:s.Metal,[s.Metal]:s.Wood};if(t>=m.QiCondensation&&a.push(n[e]),t>=m.CoreFormation&&a.push(r[e]),t>=m.DivineTransformation){const c=r[e],u=(o=Object.entries(r).find(([d,p])=>p===c))==null?void 0:o[0];u&&a.push(u)}return a}processMeridianPurification(){const e=this.gameState.player;e.meridians.forEach((t,a)=>{if(!t.isOpen)return;const n=this.getMeridianEffectiveCap(t);if(t.purity>=n)return;const r=B.BASE_MERIDIAN_PURIFICATION+e.talent/1e3+t.breakthroughStage*.05;t.purity=Math.min(n,t.purity+r)})}getMeridianEffectiveCap(e){switch(e.breakthroughStage){case 0:return v.NATURAL_CAP;case 1:return v.PURIFIED;case 2:return v.HIGHLY_PURIFIED;case 3:return v.PERFECT;default:return v.PERFECT}}cultivate(){const e=this.gameState.player,a=this.calculateQiGatheringForRealm(e.realm)*2;return e.qi=Math.min(e.qi+a,e.maxQi),this.cultivateElements(),this.processMeridianPurification(),a}calculateQiGatheringSpeed(){const e=this.gameState.player;return this.calculateQiGatheringForRealm(e.realm)}}class oe{constructor(e,t){this.gameState=e,this.random=t}attemptMeridianOpening(e){const t=this.gameState.player,a=t.meridians.map((d,p)=>({meridian:d,index:p})).filter(({meridian:d})=>!d.isOpen);if(a.length===0)return;const n=e!==void 0&&e<t.meridians.length?{meridian:t.meridians[e],index:e}:this.random.choice(a),r=M.OPENING_BASE_COST+n.index*M.OPENING_COST_INCREMENT,o=t.talent/200,c=Math.min(.8,t.qi/r*(.5+o)),u=Math.floor(r*M.OPENING_ATTEMPT_COST_FRACTION);t.qi=Math.max(0,t.qi-u),this.random.chance(c)?(t.meridians[n.index].isOpen=!0,t.meridians[n.index].purity=M.INITIAL_PURITY,console.log(i.t("messages.meridianOpened",{meridian:i.getMeridianName(n.index)}))):console.log(i.t("messages.meridianOpeningFailed",{meridian:i.getMeridianName(n.index),chance:(c*100).toFixed(1)}))}attemptMeridianBreakthrough(e){const t=this.gameState.player;if(e<0||e>=t.meridians.length){console.log(i.t("messages.invalidMeridianIndex"));return}const a=t.meridians[e];if(!a.isOpen){console.log(i.t("messages.meridianNotOpen",{meridian:i.getMeridianName(e)}));return}const n=this.getMeridianEffectiveCap(a);if(a.purity<n){console.log(i.t("messages.meridianNotPurified",{meridian:i.getMeridianName(e),purity:a.purity.toFixed(1),required:n}));return}if(a.purity>=M.MAX_PURITY){console.log(i.t("messages.meridianMaxPurity",{meridian:i.getMeridianName(e)}));return}const r=(e+1)*k.QI_COST_MULTIPLIER,o=1+a.breakthroughStage*10,c=r*o,u=k.BASE_SUCCESS_CHANCE,d=t.talent/k.TALENT_BONUS_DIVISOR,p=Math.min(.95,u+d);if(console.log(i.t("messages.meridianBreakthroughAttempt",{meridian:i.getMeridianName(e),qi:c,chance:(p*100).toFixed(1)})),t.qi<c){console.log(i.t("messages.insufficientQi",{required:c,current:t.qi.toFixed(1)}));return}const C=Math.floor(c*k.ATTEMPT_COST_FRACTION);if(t.qi=Math.max(0,t.qi-C),this.random.chance(p)){a.breakthroughStage+=1;const q=this.getMeridianEffectiveCap(a);if(console.log(i.t("messages.meridianBreakthroughSuccess",{meridian:i.getMeridianName(e),stage:a.breakthroughStage,cap:q})),this.random.chance(k.HEART_DEMON_CHANCE))if(console.log(i.t("messages.heartDemonTribulation")),this.random.chance(.3))console.log(i.t("messages.heartDemonSuccess"));else{const G=t.qi*k.HEART_DEMON_QI_LOSS;t.qi=Math.max(0,t.qi-G),console.log(i.t("messages.heartDemonFailure",{qiLoss:G.toFixed(1)}))}}else if(console.log(i.t("messages.meridianBreakthroughFailed",{meridian:i.getMeridianName(e)})),this.random.chance(k.FAILURE_DAMAGE_CHANCE)){const q=a.purity*k.FAILURE_DAMAGE_PERCENTAGE;a.purity=Math.max(0,a.purity-q),console.log(i.t("messages.meridianBreakthroughDamage",{meridian:i.getMeridianName(e),damage:q.toFixed(1),purity:a.purity.toFixed(1)}))}}getMeridianEffectiveCap(e){switch(e.breakthroughStage){case 0:return v.NATURAL_CAP;case 1:return v.PURIFIED;case 2:return v.HIGHLY_PURIFIED;case 3:return v.PERFECT;default:return v.NATURAL_CAP}}getMeridianInfo(e){return e<0||e>=this.gameState.player.meridians.length?null:this.gameState.player.meridians[e]}getAllMeridians(){return[...this.gameState.player.meridians]}canOpenMeridian(e){return e<0||e>=this.gameState.player.meridians.length?!1:!this.gameState.player.meridians[e].isOpen}canBreakthroughMeridian(e){if(e<0||e>=this.gameState.player.meridians.length)return!1;const t=this.gameState.player.meridians[e];return!(!t.isOpen||t.purity<v.NATURAL_CAP||t.purity>=M.MAX_PURITY)}debugAddMeridianProgress(e){this.gameState.player.meridians.forEach(a=>{if(a.isOpen){const n=this.getMeridianEffectiveCap(a);if(a.purity<n){const r=a.purity;a.purity=Math.min(n,a.purity+e),console.log(`🐛 Debug: Meridian purified from ${r.toFixed(1)}% to ${a.purity.toFixed(1)}% (cap: ${n}%)`)}}})}}class le{constructor(e){this.gameState=e}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,r])=>{r>t&&(t=r,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[s.Wood]:s.Fire,[s.Fire]:s.Earth,[s.Earth]:s.Metal,[s.Metal]:s.Water,[s.Water]:s.Wood},r={[s.Wood]:s.Earth,[s.Earth]:s.Water,[s.Water]:s.Fire,[s.Fire]:s.Metal,[s.Metal]:s.Wood};if(t>=1&&a.push(n[e]),t>=3&&a.push(r[e]),t>=5){const c=r[e],u=(o=Object.entries(r).find(([d,p])=>p===c))==null?void 0:o[0];u&&a.push(u)}return a}getElementAffinity(e){return this.gameState.player.elements[e]||0}getAllElementAffinities(){return{...this.gameState.player.elements}}isElementFullyCultivated(e){return this.getElementAffinity(e)>=B.MAX_ELEMENT_AFFINITY}getFullyCultivatedElementCount(){return Object.values(this.gameState.player.elements).filter(e=>e>=B.MAX_ELEMENT_AFFINITY).length}calculateElementalBonus(e,t){const a={[s.Wood]:s.Fire,[s.Fire]:s.Earth,[s.Earth]:s.Metal,[s.Metal]:s.Water,[s.Water]:s.Wood},n={[s.Wood]:s.Earth,[s.Earth]:s.Water,[s.Water]:s.Fire,[s.Fire]:s.Metal,[s.Metal]:s.Wood};return a[e]===t?1.25:n[e]===t?.75:1}getElementCultivationProgress(e){return Math.min(100,this.getElementAffinity(e))}getUnlockedElements(){const e=this.getPrimaryElement();if(!e)return[];const t=[e],a=this.getComplementaryElements(e,this.gameState.player.realm);return t.push(...a),[...new Set(t)]}debugAddElementProgress(e=10){const t=this.gameState.player,a=this.getPrimaryElement();let n=0;a&&this.getUnlockedElements().forEach(o=>{const c=t.elements[o];c<B.MAX_ELEMENT_AFFINITY&&(t.elements[o]=Math.min(B.MAX_ELEMENT_AFFINITY,c+e),n++)}),console.log(`🐛 Debug: Added ${e}% affinity to ${n} unlocked elements`)}getElementDisplayInfo(e){const t=this.getPrimaryElement();return{name:e,affinity:this.getElementAffinity(e),progress:this.getElementCultivationProgress(e),isPrimary:t===e,isFullyCultivated:this.isElementFullyCultivated(e)}}}class me{constructor(e,t){this.gameState=e,this.random=t}attemptBreakthrough(){const e=this.gameState.player;switch(console.log(i.t("messages.breakthroughAttempt",{realm:this.getRealmName(e.realm)})),e.realm){case m.Mortal:this.attemptQiCondensationBreakthrough();break;case m.QiCondensation:this.attemptFoundationEstablishmentBreakthrough();break;case m.FoundationEstablishment:this.attemptCoreFormationBreakthrough();break;case m.CoreFormation:this.attemptNascentSoulBreakthrough();break;case m.NascentSoul:this.attemptDivineTransformationBreakthrough();break;case m.DivineTransformation:this.attemptVoidRefinementBreakthrough();break;case m.VoidRefinement:this.attemptImmortalAscensionBreakthrough();break;default:console.log(i.t("messages.breakthroughMaxRealm"))}}attemptQiCondensationBreakthrough(){const e=this.gameState.player,t=E[m.Mortal].qi,a=E[m.Mortal].meridians,n=E[m.Mortal].elements,r=e.meridians.filter(c=>c.isOpen).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(m.QiCondensation)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&r>=a&&o>=n?(console.log(i.t("messages.breakthroughRequirementsMet")),this.performTribulation("lightning",R[m.Mortal],()=>{this.performBreakthrough(m.QiCondensation)})):console.log(i.t("messages.breakthroughFailed"))}attemptFoundationEstablishmentBreakthrough(){const e=this.gameState.player,t=E[m.QiCondensation].qi,a=E[m.QiCondensation].meridians,n=E[m.QiCondensation].elements,r=e.meridians.filter(u=>u.isOpen).length,o=this.getPrimaryElement();let c=0;if(o){const u=this.getComplementaryElements(o,m.QiCondensation);c=[o,...u].filter(p=>e.elements[p]>=100).length}console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(m.FoundationEstablishment)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:c,required:n,status:c>=n?"✅":"❌"})),e.qi>=t&&r>=a&&c>=n?this.performTribulation("lightning",R[m.QiCondensation],()=>{this.performBreakthrough(m.FoundationEstablishment)}):console.log(i.t("messages.breakthroughFailed"))}attemptCoreFormationBreakthrough(){const e=this.gameState.player,t=E[m.FoundationEstablishment].qi,a=E[m.FoundationEstablishment].meridians,n=E[m.FoundationEstablishment].elements,r=e.meridians.filter(u=>u.isOpen).length,o=this.getPrimaryElement();let c=0;if(o){const u=this.getComplementaryElements(o,m.FoundationEstablishment);c=[o,...u].filter(p=>e.elements[p]>=100).length}console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(m.CoreFormation)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:c,required:n,status:c>=n?"✅":"❌"})),e.qi>=t&&r>=a&&c>=n?this.performTribulation("lightning",R[m.FoundationEstablishment],()=>{this.performBreakthrough(m.CoreFormation)}):console.log(i.t("messages.breakthroughFailed"))}attemptNascentSoulBreakthrough(){const e=this.gameState.player,t=E[m.CoreFormation].qi,a=E[m.CoreFormation].meridians,n=E[m.CoreFormation].elements,r=e.meridians.filter(u=>u.isOpen&&u.purity>=v.PURIFIED).length,o=this.getPrimaryElement();let c=0;if(o){const u=this.getComplementaryElements(o,m.CoreFormation);c=[o,...u].filter(p=>e.elements[p]>=100).length}console.log(i.t("messages.breakthroughRequirements",{realm:i.getRealmName(m.NascentSoul)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughPurifiedMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughElementRequirement",{current:c,required:n,status:c>=n?"✅":"❌"})),e.qi>=t&&r>=a&&c>=n?this.performTribulation("heart_demon",R[m.CoreFormation],()=>{this.performBreakthrough(m.NascentSoul)}):console.log(i.t("messages.breakthroughFailed"))}attemptDivineTransformationBreakthrough(){const e=this.gameState.player,t=E[m.NascentSoul].qi,a=E[m.NascentSoul].meridians,n=E[m.NascentSoul].elements,r=e.meridians.filter(c=>c.isOpen&&c.purity>=v.HIGHLY_PURIFIED).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:this.getRealmName(m.DivineTransformation)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughHighlyPurifiedMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughAllElementsRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&r>=a&&o>=n?this.performTribulation("elemental",R[m.NascentSoul],()=>{this.performBreakthrough(m.DivineTransformation)}):console.log(i.t("messages.breakthroughFailed"))}attemptVoidRefinementBreakthrough(){const e=this.gameState.player,t=E[m.DivineTransformation].qi,a=E[m.DivineTransformation].meridians,n=E[m.DivineTransformation].elements,r=e.meridians.filter(c=>c.isOpen&&c.purity>=v.PERFECT).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:this.getRealmName(m.VoidRefinement)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughPerfectMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughDivineElementsRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&r>=a&&o>=n?this.performTribulation("karmic",R[m.DivineTransformation],()=>{this.performBreakthrough(m.VoidRefinement)}):console.log(i.t("messages.breakthroughFailed"))}attemptImmortalAscensionBreakthrough(){const e=this.gameState.player,t=E[m.VoidRefinement].qi,a=E[m.VoidRefinement].meridians,n=E[m.VoidRefinement].elements,r=e.meridians.filter(c=>c.isOpen&&c.purity>=v.PERFECT).length,o=Object.values(e.elements).filter(c=>c>=100).length;console.log(i.t("messages.breakthroughRequirements",{realm:this.getRealmName(m.ImmortalAscension)})),console.log(i.t("messages.breakthroughQiRequirement",{current:e.qi.toFixed(1),required:t,status:e.qi>=t?"✅":"❌"})),console.log(i.t("messages.breakthroughPerfectMeridianRequirement",{current:r,required:a,status:r>=a?"✅":"❌"})),console.log(i.t("messages.breakthroughDivineElementsRequirement",{current:o,required:n,status:o>=n?"✅":"❌"})),e.qi>=t&&r>=a&&o>=n?this.performTribulation("karmic",R[m.VoidRefinement],()=>{this.performBreakthrough(m.ImmortalAscension)}):console.log(i.t("messages.breakthroughFailed"))}performBreakthrough(e){const t=this.gameState.player,a=t.realm;t.realm=e,t.maxQi*=w.MAX_QI_MULTIPLIER,t.qi=Math.max(w.MIN_QI_RETAINED,t.qi*w.QI_RETENTION_PERCENTAGE),this.enableComplementaryElementCultivation(e),this.gameState.soul.cultivationInsights.realmBreakthroughs.push(a),e>this.gameState.soul.maxRealmAchieved&&(this.gameState.soul.maxRealmAchieved=e),console.log(i.t("messages.breakthroughAdvanced",{realm:this.getRealmName(e)})),console.log(i.t("messages.maxQiIncreased",{maxQi:t.maxQi}))}enableComplementaryElementCultivation(e){const t=this.gameState.player,a=this.getPrimaryElement();if(!a)return;const n=this.getComplementaryElements(a,t.realm-1),o=this.getComplementaryElements(a,e).filter(c=>!n.includes(c));o.length>0&&console.log(i.t("messages.newElementsUnlocked",{elements:o.join(", ")}))}performTribulation(e,t,a){const n=this.gameState.player,r=this.gameState.soul;let o=t;const c=this.getPrimaryElement();c&&e==="elemental"&&(o+=n.elements[c]/1e3),o+=n.talent/1e3,(e==="karmic"||e==="heart_demon")&&(o+=(r.karmicBalance>0?r.karmicBalance:r.karmicBalance*2)/1e3),console.log(i.t("messages.tribulationStart",{type:e.toUpperCase(),rate:(o*100).toFixed(1)})),this.random.chance(o)?(console.log(i.t("messages.tribulationSuccess")),r.cultivationInsights.tribulationSurvivals++,a()):(console.log(i.t("messages.tribulationFailed")),this.handleTribulationFailure(e))}handleTribulationFailure(e){const t=this.gameState.player;switch(e){case"lightning":const a=t.qi*.5;t.qi=Math.max(0,t.qi-a),console.log(i.t("messages.tribulationLightningFailure",{qiLoss:a.toFixed(1)}));break;case"heart_demon":const n=Math.min(2,t.realm);n>0&&(t.realm-=n,t.maxQi/=Math.pow(w.MAX_QI_MULTIPLIER,n),console.log(i.t("messages.tribulationHeartDemonFailure",{realms:n})));break;case"elemental":const r=this.getPrimaryElement();if(r){const o=t.elements[r]*.3;t.elements[r]=Math.max(0,t.elements[r]-o),console.log(i.t("messages.tribulationElementalFailure",{element:r,affinityLoss:o.toFixed(1)}))}break;case"karmic":this.gameState.soul.karmicBalance-=50,console.log(i.t("messages.tribulationKarmicFailure"));break}}getRealmName(e){return i.getRealmName(e)}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,r])=>{r>t&&(t=r,a=n)}),a}getComplementaryElements(e,t){var o;const a=[],n={[s.Wood]:s.Fire,[s.Fire]:s.Earth,[s.Earth]:s.Metal,[s.Metal]:s.Water,[s.Water]:s.Wood},r={[s.Wood]:s.Earth,[s.Earth]:s.Water,[s.Water]:s.Fire,[s.Fire]:s.Metal,[s.Metal]:s.Wood};if(t>=m.QiCondensation&&a.push(n[e]),t>=m.CoreFormation&&a.push(r[e]),t>=m.DivineTransformation){const c=r[e],u=(o=Object.entries(r).find(([d,p])=>p===c))==null?void 0:o[0];u&&a.push(u)}return a}}class ce{constructor(e,t){this.gameState=e,this.random=t,this.itemEffectProcessor=new Se(e)}generateRandomEnemy(){const e=this.random.weightedChoice([m.Mortal,m.QiCondensation,m.FoundationEstablishment],[.5,.3,.2]),t=["Wild Beast","Bandit","Spirit Beast","Demon Cultivator","Heavenly Tribulation Remnant","Ancient Guardian","Chaos Spirit"];let a=20,n=80,r=50,o=150;e>=m.QiCondensation&&(a=200,n=800,r=300,o=1e3),e>=m.FoundationEstablishment&&(a=2e3,n=8e3,r=3e3,o=1e4);const c={id:`enemy-${Date.now()}-${this.random.int(1e3,9999)}`,name:this.random.choice(t),realm:e,qi:this.random.int(a,n),maxQi:this.random.int(r,o),elements:{[s.Metal]:this.random.int(0,50),[s.Wood]:this.random.int(0,50),[s.Water]:this.random.int(0,50),[s.Fire]:this.random.int(0,50),[s.Earth]:this.random.int(0,50)},combatType:this.random.choice([K.Melee,K.Ranged]),aggression:this.random.int(30,90),lootTable:this.generateLootTable(e)};return c.qi=Math.min(c.qi,c.maxQi),c}generateLootTable(e){const t=[],a=e+1;if(this.random.chance(.6)&&t.push({type:"artifact",name:"Spirit Stone",description:"A stone containing spiritual energy",value:this.random.int(10,50)*a}),this.random.chance(.3)){const n=[s.Metal,s.Wood,s.Water,s.Fire,s.Earth],r=this.random.choice(n);t.push({type:"elemental_crystal",element:r,name:`${r} Crystal`,description:`A crystal infused with ${r} energy`,value:this.random.int(25,100)*a})}return this.random.chance(.1)&&t.push({type:"cultivation_insight",name:"Ancient Scroll",description:"Contains insights into cultivation techniques",value:this.random.int(50,200)*a}),t}resolveCombat(e){const t=this.gameState.player;console.log(i.t("messages.enemyEncounter",{enemy:e.name,realm:e.realm,qi:e.qi,maxQi:e.maxQi}));const a=this.itemEffectProcessor.calculateCombatPowerBonus(),n=this.itemEffectProcessor.calculateDefenseBonus(),r=this.itemEffectProcessor.calculateCriticalChanceBonus(),o=(t.qi+t.talent*2+t.realm*100+a)*(1+n/100),c=e.qi+e.realm*50,u=this.calculateElementalCombatBonus(t,e),d=this.calculateElementalCombatBonus(e,t);let p=o*u;const C=c*d,q=Math.min(r/100,.5);this.random.chance(q)&&(console.log("💥 Critical hit! Damage doubled!"),p*=2);const V=p/(p+C);return this.random.chance(V)?(this.handlePlayerVictory(e),"player_win"):(this.handlePlayerDefeat(e),"enemy_win")}calculateElementalCombatBonus(e,t){let a=null,n=0;if(Object.entries(e.elements||{}).forEach(([u,d])=>{typeof d=="number"&&d>n&&(n=d,a=u)}),!a)return 1;let r=null;if(n=0,Object.entries(t.elements||{}).forEach(([u,d])=>{typeof d=="number"&&d>n&&(n=d,r=u)}),!r)return 1;const o={[s.Wood]:s.Fire,[s.Fire]:s.Earth,[s.Earth]:s.Metal,[s.Metal]:s.Water,[s.Water]:s.Wood},c={[s.Wood]:s.Earth,[s.Earth]:s.Water,[s.Water]:s.Fire,[s.Fire]:s.Metal,[s.Metal]:s.Wood};return o[a]===r?1.25:c[a]===r?.75:1}handlePlayerVictory(e){const t=this.gameState.player,a=Math.floor(e.maxQi*.1),n=this.random.int(1,3);t.qi=Math.min(t.qi+a,t.maxQi),t.talent=Math.min(100,t.talent+n),this.processLoot(e.lootTable),console.log(i.t("messages.combatVictory",{enemy:e.name,qi:a,talent:n}))}handlePlayerDefeat(e){const t=this.gameState.player,a=Math.floor(t.qi*.2);if(t.qi=Math.max(0,t.qi-a),this.random.chance(.3)){const n=this.random.int(1,5),r=this.random.choice(t.meridians.filter(o=>o.isOpen));r&&(r.purity=Math.max(0,r.purity-n),console.log(i.t("messages.meridianDamage",{meridian:r.name,damage:n})))}console.log(i.t("messages.combatDefeat",{enemy:e.name,qiLoss:a}))}processLoot(e){e.forEach(t=>{switch(t.type){case"artifact":if(t.name==="Spirit Stone"){const o=H.determineItemQuality(this.gameState.player.realm,{chance:u=>this.random.chance(u/100)}),c=H.createItem(g.SpiritStone,o,this.gameState.player.realm);this.gameState.player.items.push(c),console.log(i.t("messages.lootArtifact",{name:c.name,value:c.value}))}else{const o={id:`artifact-${Date.now()}-${this.random.int(1e3,9999)}`,name:t.name,type:"spirit_stone",effects:[{type:"qi_absorption",value:t.value}]};this.gameState.player.artifacts.push(o),console.log(i.t("messages.lootArtifact",{name:t.name,value:t.value}))}break;case"elemental_crystal":const a=t.element,n=this.gameState.player.elements[a]||0;this.gameState.player.elements[a]=Math.min(100,n+t.value/10),console.log(i.t("messages.lootElementalCrystal",{element:a,affinity:(t.value/10).toFixed(1)}));break;case"cultivation_insight":const r=Math.floor(t.value/10);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+r),console.log(i.t("messages.lootCultivationInsight",{talent:r}));break}})}shouldFlee(e){const t=this.gameState.player,a=t.qi+t.talent*2+t.realm*100;return e.qi+e.realm*50>a*1.5}getCombatDifficulty(e){const t=this.gameState.player,a=t.qi+t.talent*2+t.realm*100,r=(e.qi+e.realm*50)/a;return r<.5?"easy":r<1?"medium":r<1.5?"hard":"deadly"}}class ue{constructor(e,t){this.gameState=e,this.random=t}processRandomEvent(){const e=[{name:i.t("events.fortuitousEncounter"),chance:.25,effect:()=>this.fortuitousEncounter()},{name:i.t("events.tribulationChallenge"),chance:.25,effect:()=>this.tribulationChallenge()},{name:i.t("events.karmicReward"),chance:.25,effect:()=>this.karmicReward()},{name:i.t("events.enemyEncounter"),chance:.25,effect:()=>this.enemyEncounter()}],t=this.random.weightedChoice(e,e.map(a=>a.chance));console.log(i.t("messages.randomEvent",{event:t.name})),t.effect()}fortuitousEncounter(){const e=this.random.int(1,5);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+e),console.log(i.t("messages.fortuitousEncounter",{talent:e}))}tribulationChallenge(){if(this.random.chance(.7)){const e=this.random.int(50,200);this.gameState.player.qi=Math.min(this.gameState.player.qi+e,this.gameState.player.maxQi),console.log(i.t("messages.tribulationSuccess",{qi:e}))}else{const e=Math.floor(this.gameState.player.qi*.1);this.gameState.player.qi=Math.max(0,this.gameState.player.qi-e),console.log(i.t("messages.tribulationFailure",{qiLoss:e}))}}karmicReward(){const e=this.random.int(1,10);this.gameState.soul.karmicBalance+=e,console.log(i.t("messages.karmicReward",{karma:e}))}enemyEncounter(){console.log(i.t("messages.enemyEncounterGeneric"))}processLifeMilestone(e){e===50?this.midLifeCrisis():e===100?this.centuryMilestone():e===200&&this.longevityBreakthrough(),this.random.chance(.05)&&this.processRandomEvent()}midLifeCrisis(){if(console.log(i.t("events.midLifeCrisis")),this.random.chance(.6)){const e=this.random.int(2,8);this.gameState.player.talent+=e,console.log(i.t("messages.midLifeCrisisPositive",{talent:e}))}else{const e=Math.floor(this.gameState.player.qi*.05);this.gameState.player.qi=Math.max(0,this.gameState.player.qi-e),console.log(i.t("messages.midLifeCrisisNegative",{qiLoss:e}))}}centuryMilestone(){console.log(i.t("events.centuryMilestone"));const e=this.random.int(1,3);if(this.gameState.player.talent=Math.min(100,this.gameState.player.talent+e),this.random.chance(.3)){const t=this.random.int(5,15);this.gameState.soul.karmicBalance+=t,console.log(i.t("messages.centuryMilestoneKarmic",{talent:e,karma:t}))}else console.log(i.t("messages.centuryMilestone",{talent:e}))}longevityBreakthrough(){console.log(i.t("events.longevityBreakthrough"));const e=Math.floor(this.gameState.player.maxQi*.1);this.gameState.player.maxQi+=e,this.gameState.player.qi=Math.min(this.gameState.player.qi+e,this.gameState.player.maxQi);const t=this.random.int(3,10);this.gameState.player.talent=Math.min(100,this.gameState.player.talent+t),console.log(i.t("messages.longevityBreakthrough",{qi:e,talent:t}))}processRealmEvent(e){switch(e){case 0:this.processMortalRealmEvents();break;case 1:this.processQiCondensationEvents();break;case 2:this.processFoundationEstablishmentEvents();break}}processMortalRealmEvents(){if(this.random.chance(.1)){console.log(i.t("events.spiritualAwakening"));const e=this.random.int(1,3);this.gameState.player.talent+=e,console.log(i.t("messages.spiritualAwakening",{talent:e}))}}processQiCondensationEvents(){if(this.random.chance(.08)){console.log(i.t("events.meridianInsight"));const e=this.gameState.player.meridians.filter(t=>t.isOpen);if(e.length>0){const t=this.random.choice(e),a=this.random.int(5,15);t.purity=Math.min(100,t.purity+a),console.log(i.t("messages.meridianInsight",{meridian:t.name,purity:a}))}}}processFoundationEstablishmentEvents(){if(this.random.chance(.06)){console.log(i.t("events.elementalHarmony"));const e=this.getPrimaryElement();if(e){const t=this.random.int(5,10);this.gameState.player.elements[e]=Math.min(100,this.gameState.player.elements[e]+t),console.log(i.t("messages.elementalHarmony",{element:e,affinity:t}))}}}getPrimaryElement(){const e=this.gameState.player.elements;let t=0,a=null;return Object.entries(e).forEach(([n,r])=>{typeof r=="number"&&r>t&&(t=r,a=n)}),a}processDeath(){console.log(i.t("events.deathEvent"));const e=this.gameState.soul;this.random.chance(.2)&&this.specialReincarnation(),this.resetPlayerForNewLife(),console.log(i.t("messages.reincarnationComplete",{lifetime:e.lifetimeCount+1}))}specialReincarnation(){console.log(i.t("events.specialReincarnation"));const e=[()=>{const a=this.random.int(5,15);this.gameState.player.talent+=a,console.log(i.t("messages.specialReincarnationTalent",{talent:a}))},()=>{const a=this.random.int(10,30);this.gameState.soul.karmicBalance+=a,console.log(i.t("messages.specialReincarnationKarma",{karma:a}))},()=>{const a=Object.keys(this.gameState.player.elements),n=this.random.choice(a),r=this.random.int(10,25);this.gameState.player.elements[n]+=r,console.log(i.t("messages.specialReincarnationElement",{element:n,affinity:r}))}];this.random.choice(e)()}resetPlayerForNewLife(){const e=this.gameState.player,t=this.gameState.soul;t.lifetimeCount++,t.totalLifetime+=e.lifetime,e.realm=0,e.qi=0,e.maxQi=100,e.lifetime=0,e.meridians.forEach(a=>{a.isOpen&&(a.purity=Math.max(10,a.purity*.1))}),Object.keys(e.elements).forEach(a=>{const n=a;e.elements[n]=Math.max(0,e.elements[n]*.2)}),e.talent=Math.max(10,e.talent*.5)}}class Ve{constructor(){this.SAVE_KEY_PREFIX="culsim-save",this.MAX_SAVE_SLOTS=5}saveGame(e,t=0){try{if(t<0||t>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${t}. Must be between 0 and ${this.MAX_SAVE_SLOTS-1}`),!1;const a=`${this.SAVE_KEY_PREFIX}-${t}`,r={state:this.serializeGameState(e),timestamp:Date.now(),version:"1.0.0"};return localStorage.setItem(a,JSON.stringify(r)),!0}catch(a){return console.error("Failed to save game:",a),!1}}loadGame(e=0){try{if(e<0||e>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${e}. Must be between 0 and ${this.MAX_SAVE_SLOTS-1}`),null;const t=`${this.SAVE_KEY_PREFIX}-${e}`,a=localStorage.getItem(t);if(!a)return console.log(`No save found in slot ${e}`),null;const n=JSON.parse(a);if(!this.validateSaveData(n))return console.error("Invalid save data structure"),null;const r=this.deserializeGameState(n.state);return console.log(`Game loaded from slot ${e} (saved: ${new Date(n.timestamp).toLocaleString()})`),r}catch(t){return console.error("Failed to load game:",t),null}}getAvailableSaveSlots(){const e=[];for(let t=0;t<this.MAX_SAVE_SLOTS;t++){const a=`${this.SAVE_KEY_PREFIX}-${t}`,n=localStorage.getItem(a);if(n)try{const r=JSON.parse(n);this.validateSaveData(r)?e.push({slot:t,timestamp:r.timestamp,hasData:!0}):e.push({slot:t,timestamp:0,hasData:!1})}catch{e.push({slot:t,timestamp:0,hasData:!1})}else e.push({slot:t,timestamp:0,hasData:!1})}return e}deleteSaveSlot(e){try{if(e<0||e>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${e}`),!1;const t=`${this.SAVE_KEY_PREFIX}-${e}`;return localStorage.removeItem(t),console.log(`Save slot ${e} deleted`),!0}catch(t){return console.error("Failed to delete save slot:",t),!1}}exportSaveData(e=0){try{const t=`${this.SAVE_KEY_PREFIX}-${e}`,a=localStorage.getItem(t);return a||null}catch(t){return console.error("Failed to export save data:",t),null}}importSaveData(e,t=0){try{if(t<0||t>=this.MAX_SAVE_SLOTS)return console.error(`Invalid save slot: ${t}`),!1;const a=JSON.parse(e);if(!this.validateSaveData(a))return console.error("Invalid save data format"),!1;const n=`${this.SAVE_KEY_PREFIX}-${t}`;return localStorage.setItem(n,e),console.log(`Save data imported to slot ${t}`),!0}catch(a){return console.error("Failed to import save data:",a),!1}}autoSave(e){return this.saveGame(e,0)}serializeGameState(e){return JSON.stringify(e,null,2)}deserializeGameState(e){const t=JSON.parse(e),a={player:{id:"player-1",name:"Cultivator",realm:0,qi:0,maxQi:100,meridians:[],elements:{metal:0,wood:0,water:0,fire:0,earth:0},talent:50,artifacts:[],items:[],lifetime:0},soul:{id:"soul-1",lifetimeCount:1,totalLifetime:0,cultivationInsights:{realmBreakthroughs:[],techniqueMastery:[],elementalUnderstanding:{metal:0,wood:0,water:0,fire:0,earth:0},tribulationSurvivals:0},karmicBalance:0,maxRealmAchieved:0,artifacts:[],items:[]},time:0,seed:0};return{player:{...a.player,...t.player},soul:{...a.soul,...t.soul},time:t.time||a.time,isRunning:!1,seed:t.seed||a.seed}}validateSaveData(e){try{return e&&typeof e=="object"&&e.state&&typeof e.timestamp=="number"&&e.version&&e.timestamp>0}catch{return!1}}clearAllSaveData(){try{for(let e=0;e<this.MAX_SAVE_SLOTS;e++){const t=`${this.SAVE_KEY_PREFIX}-${e}`;localStorage.removeItem(t)}return console.log("All save data cleared"),!0}catch(e){return console.error("Failed to clear save data:",e),!1}}getSaveStatistics(){const t=this.getAvailableSaveSlots().filter(n=>n.hasData),a=t.map(n=>n.timestamp).filter(n=>n>0);return{totalSlots:this.MAX_SAVE_SLOTS,usedSlots:t.length,oldestSave:a.length>0?Math.min(...a):null,newestSave:a.length>0?Math.max(...a):null}}}class J{constructor(e,t){this.gameController=new Ue(e,()=>this.update(),t,()=>this.saveGame());const a=this.gameController.getStateReference(),n=this.gameController.getRandom();this.cultivationSystem=new se(a),this.meridianSystem=new oe(a,n),this.elementSystem=new le(a),this.breakthroughSystem=new me(a,n),this.combatSystem=new ce(a,n),this.eventSystem=new ue(a,n),this.saveLoadSystem=new Ve}start(){this.gameController.start()}stop(){this.gameController.stop()}update(){const e=this.gameController.getStateReference();this.validateAndFixArtifacts(e.player.artifacts),this.validateAndFixArtifacts(e.soul.artifacts),this.cultivationSystem.processCultivation(),this.gameController.getRandom().chance(.02)&&this.eventSystem.processRandomEvent()}cultivate(){const e=this.cultivationSystem.cultivate();console.log(i.t("ui.manualCultivationComplete",{qi:e.toFixed(2)}))}attemptBreakthrough(){this.breakthroughSystem.attemptBreakthrough()}attemptMeridianOpening(e){this.meridianSystem.attemptMeridianOpening(e)}attemptMeridianBreakthrough(e){this.meridianSystem.attemptMeridianBreakthrough(e)}getPrimaryElement(){return this.elementSystem.getPrimaryElement()}getComplementaryElements(e,t){return this.elementSystem.getComplementaryElements(e,t)}getMeridianEffectiveCap(e){return this.meridianSystem.getMeridianEffectiveCap(e)}getRealmName(e){return this.gameController.getRealmName(e)}getState(){return this.gameController.getState()}saveGame(){const e=this.gameController.getState();this.saveLoadSystem.saveGame(e)}loadGame(){const e=this.saveLoadSystem.loadGame();return e?(console.log("🔄 Loading game state:",{meridians:e.player.meridians.map((t,a)=>({index:a,name:t.name,isOpen:t.isOpen,purity:t.purity}))}),this.gameController.setState(e),this.reinitializeSubsystems(e),!0):!1}reinitializeSubsystems(e){const t=this.gameController.getRandom();this.cultivationSystem=new se(e),this.meridianSystem=new oe(e,t),this.elementSystem=new le(e),this.breakthroughSystem=new me(e,t),this.combatSystem=new ce(e,t),this.eventSystem=new ue(e,t)}generateRandomEnemy(){return this.combatSystem.generateRandomEnemy()}resolveCombat(e){return this.combatSystem.resolveCombat(e)}calculateQiGatheringSpeed(){return this.cultivationSystem.calculateQiGatheringSpeed()}debugAddQi(){const e=this.gameController.getState(),t=e.player.maxQi*.1;e.player.qi=Math.min(e.player.qi+t,e.player.maxQi),console.log(`🐛 Debug: Added ${t} qi to player. Current qi: ${e.player.qi.toFixed(1)}/${e.player.maxQi}`)}debugAddMeridianProgress(e=10){this.meridianSystem.debugAddMeridianProgress(e)}debugAddElementProgress(e=10){this.elementSystem.debugAddElementProgress(e)}validateAndFixArtifacts(e){for(let t=e.length-1;t>=0;t--){const a=e[t];if(!a.id||!a.name||!a.type){console.warn("Removing malformed artifact:",a),e.splice(t,1);continue}(!a.effects||!Array.isArray(a.effects))&&(console.warn("Fixing artifact with missing effects:",a.name),a.effects=[{type:"qi_absorption",value:a.value||10}])}}getRandom(){return this.gameController.getRandom()}}const ve=document.getElementById("player-status"),be=document.getElementById("cultivation-info"),Z=document.getElementById("meridian-info");document.getElementById("meridian-controls");const D=document.getElementById("meridian-select"),Q=document.getElementById("unlock-meridian-btn"),We=document.getElementById("elements-info"),Ce=document.getElementById("time-info"),N=document.getElementById("game-output"),Me=document.getElementById("cultivate-btn"),ke=document.getElementById("breakthrough-btn"),qe=document.querySelectorAll(".nav-tab"),he=document.querySelector(".game-info"),de=document.getElementById("combat-page"),Y=document.getElementById("inventory-page"),ge=document.getElementById("enemy-display"),Ke=document.getElementById("find-enemy-btn"),j=document.getElementById("attack-btn"),X=document.getElementById("flee-btn"),pe=document.getElementById("combat-stats"),fe=document.getElementById("combat-loot"),He=document.getElementById("artifact-count"),Ye=document.getElementById("inventory-space"),ye=document.getElementById("artifact-grid"),Te=document.getElementById("artifact-details");let y=null,T=[];function Re(l){qe.forEach(e=>{e.classList.remove("active"),e.dataset.page===l&&e.classList.add("active")}),he.classList.toggle("active",l==="overview"),de.classList.toggle("active",l!=="overview"),Y.classList.toggle("active",l==="inventory"),he.style.display=l==="overview"?"grid":"none",de.style.display=l==="combat"?"block":"none",Y.style.display=l==="inventory"?"block":"none",l==="inventory"&&Pe()}const je=document.getElementById("game-title");document.getElementById("player-status-title");document.getElementById("cultivation-title");document.getElementById("meridians-title");document.getElementById("elements-title");document.getElementById("time-title");document.getElementById("debug-title");const Ae=document.getElementById("debug-add-qi-btn"),Ie=document.getElementById("debug-add-meridian-btn"),Ne=document.getElementById("debug-add-element-btn");function Ee(l){if(l<30)return`${l} ${i.t("ui.days")}`;if(l<365){const e=Math.floor(l/30),t=l%30;return t===0?`${e} ${i.t("ui.months")}`:`${e} ${i.t("ui.months")}, ${t} ${i.t("ui.days")}`}else{const e=Math.floor(l/365),t=l%365,a=Math.floor(t/30),n=t%30;let r=`${e} ${i.t("ui.years")}`;return a>0&&(r+=`, ${a} ${i.t("ui.months")}`),n>0&&(r+=`, ${n} ${i.t("ui.days")}`),r}}function ee(){if(!y){ge.innerHTML='<div class="no-enemy">No enemy encountered. Click "Find Enemy" to search for opponents.</div>',j.disabled=!0,X.disabled=!0;return}const l=`
    <div class="enemy-info">
      <div class="enemy-name">${y.name}</div>
      <div class="enemy-stats">
        <div class="enemy-stat">Realm: ${h.getRealmName(y.realm)}</div>
        <div class="enemy-stat">Qi: ${y.qi.toFixed(0)}/${y.maxQi.toFixed(0)}</div>
        <div class="enemy-stat">Type: ${y.combatType}</div>
        <div class="enemy-stat">Aggression: ${y.aggression}%</div>
      </div>
    </div>
  `;ge.innerHTML=l,j.disabled=!1,X.disabled=!1}function te(){if(!y){pe.textContent="No active combat";return}const l=h.getState().player,e=l.qi+l.talent*2+l.realm*100,t=y.qi+y.realm*50;pe.innerHTML=`
    <strong>Your Power:</strong> ${e.toFixed(0)}<br>
    <strong>Enemy Power:</strong> ${t.toFixed(0)}<br>
    <strong>Win Chance:</strong> ${(e/(e+t)*100).toFixed(1)}%
  `}function ae(){if(T.length===0){fe.textContent="No loot available";return}const l=T.map(e=>e.type==="artifact"?`📿 ${e.name}: ${e.description} (Value: ${e.value})`:e.type==="elemental_crystal"?`💎 ${e.element} Crystal: ${e.description} (Value: ${e.value})`:e.type==="cultivation_insight"?`📚 ${e.name}: ${e.description} (Value: ${e.value})`:`${e.name}: ${e.description}`).join("<br>");fe.innerHTML=l}function Xe(){y=h.generateRandomEnemy(),T=[],ee(),te(),ae(),console.log(`🔍 Found enemy: ${y.name}`)}function Be(){if(!y)return;const l=h.resolveCombat(y);l==="player_win"?(T=y.lootTable||[],console.log(`🎉 Victory! Gained ${T.length} loot items.`)):l==="enemy_win"?(T=[],console.log(`💀 Defeated by ${y.name}.`)):(T=[],console.log(`🏃 Successfully fled from ${y.name}.`)),y=null,ee(),te(),ae()}function ze(){if(!y)return;if(Math.random()<.7)console.log(`🏃 Successfully fled from ${y.name}.`),y=null;else{console.log(`❌ Failed to flee! ${y.name} attacks!`),Be();return}T=[],ee(),te(),ae()}function Pe(){if(!h)return;const e=h.getState().player.artifacts;if(He.textContent=e.length.toString(),Ye.textContent="∞",document.querySelectorAll(".artifact-card").forEach(a=>{a.classList.remove("selected")}),e.length===0){ye.innerHTML='<div class="no-artifacts">No artifacts collected yet. Defeat enemies in combat to obtain artifacts!</div>',Te.innerHTML="Select an artifact to view details";return}const t=e.map((a,n)=>{const r=a.effects.map(o=>`${o.type.replace("_"," ").replace(/\b\w/g,u=>u.toUpperCase())}: ${o.value}${o.element?` (${o.element})`:""}`).join(", ");return`
      <div class="artifact-card" data-artifact-index="${n}">
        <div class="artifact-name">${a.name}</div>
        <div class="artifact-type">${a.type}</div>
        <div class="artifact-effects">${r}</div>
      </div>
    `}).join("");ye.innerHTML=t,document.querySelectorAll(".artifact-card").forEach(a=>{a.addEventListener("click",()=>{const n=parseInt(a.dataset.artifactIndex||"0");Je(n)})})}function Je(l){var n;if(!h)return;const t=h.getState().player.artifacts[l];if(!t)return;document.querySelectorAll(".artifact-card").forEach(r=>{r.classList.remove("selected")}),(n=document.querySelector(`[data-artifact-index="${l}"]`))==null||n.classList.add("selected");const a=t.effects.map(r=>{const o=r.type.replace("_"," ").replace(/\b\w/g,u=>u.toUpperCase()),c=r.element?` (${r.element})`:"";return`<div class="artifact-effect"><span class="artifact-effect-type">${o}${c}:</span> <span class="artifact-effect-value">${r.value}</span></div>`}).join("");Te.innerHTML=`
    <div class="artifact-detail-title">${t.name}</div>
    <div class="artifact-detail-type">${t.type}</div>
    <div class="artifact-effects-list">${a}</div>
  `}const P=document.createElement("select");P.id="language-select";const Ze=[{code:"en",name:"English"},{code:"vi",name:"Tiếng Việt"}];Ze.forEach(l=>{const e=document.createElement("option");e.value=l.code,e.textContent=l.name,l.code===i.getLanguage()&&(e.selected=!0),P.appendChild(e)});const F=document.createElement("button");F.textContent=i.t("ui.saveGame");F.id="save-btn";const L=document.createElement("button");L.textContent=i.t("ui.loadGame");L.id="load-btn";const _=document.createElement("button");_.textContent=i.t("ui.clearSavedGame");_.id="clear-btn";const Fe=document.querySelector(".top-controls"),U=document.createElement("div");U.className="control-group";U.innerHTML='<label for="language-select" style="margin-right: 5px;">🌐</label>';U.appendChild(P);const $=document.createElement("div");$.className="control-group";$.appendChild(F);$.appendChild(L);$.appendChild(_);Fe.appendChild(U);Fe.appendChild($);function et(){document.querySelectorAll(".card-toggle").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),e.dataset.card;const a=e.closest(".info-card"),n=a==null?void 0:a.querySelector(".card-content");a&&n&&(a.classList.contains("card-collapsed")?(a.classList.remove("card-collapsed"),e.textContent="−"):(a.classList.add("card-collapsed"),e.textContent="+"))})})}let h,I=!1;function tt(){return typeof window<"u"&&window.localStorage?localStorage.getItem("culsim-save-0")!==null:!1}function at(){tt()?(b(i.t("ui.savedGameDetected")),h=new J(void 0,S),h.loadGame()?(h.start(),I=!0,b(i.t("ui.gameLoaded")),S()):(b(i.t("ui.startingNewGame")),z())):(b(i.t("ui.welcomeMessage")),b(i.t("ui.startingNewGame")),z())}function z(){h=new J(void 0,S),h.start(),I=!0,b(i.t("ui.gameStarted")),S()}function S(){if(!h)return;const l=h.getState(),e=l.player,t=l.soul;ve.innerHTML=`
    <strong>${i.t("status.player")}:</strong> ${e.name}<br>
    <strong>${i.t("status.realm")}:</strong> ${i.getRealmName(e.realm)}<br>
    <strong>${i.t("status.qi")}:</strong> ${e.qi.toFixed(1)} / ${e.maxQi}<br>
    <strong>${i.t("ui.qiGathering")}:</strong> ${h.calculateQiGatheringSpeed().toFixed(3)} ${i.t("ui.qiPerDay")}<br>
    <strong>${i.t("status.meridians")}:</strong> ${e.meridians.filter(o=>o.isOpen).length}/12 ${i.t("ui.meridiansOpen")}<br>
    <strong>${i.t("status.talent")}:</strong> ${e.talent}/100<br>
    <strong>${i.t("status.karma")}:</strong> ${t.karmicBalance>0?"+":""}${t.karmicBalance}
  `,be.innerHTML=`
    <strong>${i.t("status.lifetime")}:</strong> ${Ee(e.lifetime)}<br>
    <strong>${i.t("status.reincarnation")}:</strong> ${t.lifetimeCount}<br>
    <strong>${i.t("ui.maxRealm")}:</strong> ${i.getRealmName(t.maxRealmAchieved)}<br>
    <strong>${i.t("ui.breakthroughs")}:</strong> ${t.cultivationInsights.realmBreakthroughs.length}
  `,Z.innerHTML=e.meridians.map((o,c)=>{const u=o.isOpen?"🟢":"🔴",d=o.isOpen?` (${o.purity.toFixed(1)}%)`:"",p=i.getMeridianName(c),C=p.length>15?p.substring(0,12)+"...":p,q=o.isOpen?"":` (${i.t("ui.meridianReq",{qi:M.OPENING_BASE_COST+c*M.OPENING_COST_INCREMENT})})`,V=o.isOpen&&o.purity>=h.getMeridianEffectiveCap(o)&&o.breakthroughStage<3?(()=>{const _e=(c+1)*k.QI_COST_MULTIPLIER,$e=1+o.breakthroughStage*10,Ge=_e*$e;return`<button class="meridian-breakthrough-btn" data-meridian-index="${c}" style="background: #007bff; color: white; border: none; padding: 2px 6px; margin-right: 5px; cursor: pointer; border-radius: 3px; font-size: 0.8em;">${Ge} ${i.t("ui.qiUnit")}</button>`})():"";return`${u} ${V}${C}${d}${q}`}).join("<br>");const a=h.getPrimaryElement(),n=a?h.getComplementaryElements(a,e.realm):[];We.innerHTML=`
    <strong>${i.getElementName(0)}:</strong> ${e.elements.metal.toFixed(1)}% ${a===s.Metal?"(Primary)":n.includes(s.Metal)?"(Complementary)":""}<br>
    <strong>${i.getElementName(1)}:</strong> ${e.elements.wood.toFixed(1)}% ${a===s.Wood?"(Primary)":n.includes(s.Wood)?"(Complementary)":""}<br>
    <strong>${i.getElementName(2)}:</strong> ${e.elements.water.toFixed(1)}% ${a===s.Water?"(Primary)":n.includes(s.Water)?"(Complementary)":""}<br>
    <strong>${i.getElementName(3)}:</strong> ${e.elements.fire.toFixed(1)}% ${a===s.Fire?"(Primary)":n.includes(s.Fire)?"(Complementary)":""}<br>
    <strong>${i.getElementName(4)}:</strong> ${e.elements.earth.toFixed(1)}% ${a===s.Earth?"(Primary)":n.includes(s.Earth)?"(Complementary)":""}
  `;const r=Math.floor(l.time);Ce.innerHTML=`
    <strong>${i.t("status.time")}:</strong> ${Ee(r)}<br>
    <strong>${i.t("status.gameSpeed")}:</strong> ${I?"▶️":"⏸️"} ${I?i.t("status.running"):i.t("status.paused")}
  `,nt(),Y.classList.contains("active")&&Pe()}function A(l,e){const t=document.getElementById(l);if(t){const a=t.querySelector(".title-text");a?a.textContent=e:t.textContent=e}}function Le(){je.textContent=i.t("ui.gameTitle"),A("player-status-title",i.t("ui.playerStatus")),A("cultivation-title",i.t("ui.cultivationInfo")),A("meridians-title",i.t("ui.meridianInfo")),A("elements-title",i.t("status.elements")),A("time-title",i.t("ui.timeInfo")),A("debug-title",i.t("ui.debugTitle")),Me.textContent=i.t("ui.cultivate"),ke.textContent=i.t("ui.breakthrough"),Q.textContent=i.t("ui.unlockSelectedMeridian"),Ae.textContent=i.t("ui.addQi"),Ie.textContent=i.t("ui.addMeridians"),Ne.textContent=i.t("ui.addElements"),F.textContent=i.t("ui.saveGame"),L.textContent=i.t("ui.loadGame"),_.textContent=i.t("ui.clearSavedGame"),h||(ve.textContent=i.t("ui.loading"),be.textContent=i.t("ui.loading"),Z.textContent=i.t("ui.loading"),Ce.textContent=i.t("ui.loading"))}function nt(){if(!h)return;const e=h.getState().player.meridians.map((t,a)=>({meridian:t,index:a})).filter(({meridian:t})=>!t.isOpen);if(D.innerHTML="",e.length===0){const t=document.createElement("option");t.textContent=i.t("ui.allMeridiansOpen"),t.disabled=!0,D.appendChild(t),Q.disabled=!0}else e.forEach(({meridian:t,index:a})=>{const n=document.createElement("option");n.value=a.toString(),n.textContent=`${i.getMeridianName(a)} (${i.t("ui.meridianReq",{qi:M.OPENING_BASE_COST+a*M.OPENING_COST_INCREMENT})})`,D.appendChild(n)}),Q.disabled=!1}function b(l){N.textContent+=l+`
`,N.scrollTop=N.scrollHeight,N.style.border="2px solid rgba(74, 158, 255, 0.8)",setTimeout(()=>{N.style.border="2px solid rgba(255, 255, 255, 0.3)"},200)}const it=console.log;console.log=(...l)=>{const e=l.join(" ");b(e),it(...l)};Me.addEventListener("click",()=>{h&&(h.cultivate(),S())});ke.addEventListener("click",()=>{h&&(h.attemptBreakthrough(),S())});Ae.addEventListener("click",()=>{h&&(h.debugAddQi(),S())});Ie.addEventListener("click",()=>{h&&(h.debugAddMeridianProgress(10),S())});Ne.addEventListener("click",()=>{h&&(h.debugAddElementProgress(10),S())});F.addEventListener("click",()=>{h&&(h.saveGame(),S())});L.addEventListener("click",()=>{h||(h=new J(void 0,S)),h.loadGame()?(S(),b(i.t("ui.gameLoaded"))):b(i.t("ui.noSavedGame"))});_.addEventListener("click",()=>{typeof window<"u"&&window.localStorage&&confirm(i.t("ui.confirmClearSavedGame"))&&(h&&I&&(h.stop(),I=!1),localStorage.removeItem("culsim-save"),z(),b(i.t("ui.savedGameCleared")))});Q.addEventListener("click",()=>{if(!h)return;const l=parseInt(D.value);if(isNaN(l))return;const e=h.getState().player;if(l>=0&&l<e.meridians.length&&!e.meridians[l].isOpen){const t=M.OPENING_BASE_COST+l*M.OPENING_COST_INCREMENT;e.qi>=t?(h.attemptMeridianOpening(l),S()):b(i.t("ui.notEnoughQi",{qi:t,meridian:i.getMeridianName(l)}))}});Z.addEventListener("click",l=>{const e=l.target;if(e.classList.contains("meridian-breakthrough-btn")){const t=parseInt(e.getAttribute("data-meridian-index")||"-1");t>=0&&h&&(h.attemptMeridianBreakthrough(t),S())}});P.addEventListener("change",()=>{const l=P.value;i.setLanguage(l),Le(),S()});qe.forEach(l=>{l.addEventListener("click",()=>{const e=l.dataset.page;e&&Re(e)})});Ke.addEventListener("click",()=>{h&&Xe()});j.addEventListener("click",()=>{h&&Be()});X.addEventListener("click",()=>{h&&ze()});et();Re("overview");Le();S();b("🏮 Welcome to CULSIM - Cultivation Simulator");b("📜 Game log initialized");at();
